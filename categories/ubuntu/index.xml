<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ubuntu on Zs's Blog</title><link>https://zzsqwq.github.io/categories/ubuntu/</link><description>Recent content in Ubuntu on Zs's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 02 Nov 2021 01:16:00 +0000</lastBuildDate><atom:link href="https://zzsqwq.github.io/categories/ubuntu/index.xml" rel="self" type="application/rss+xml"/><item><title>2021版小新Pro14 Ubuntu 20.04 配置指南</title><link>https://zzsqwq.github.io/posts/215/</link><pubDate>Tue, 02 Nov 2021 01:16:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/215/</guid><description>&lt;h1 id="2021版小新pro14-ubuntu-2004-配置指南">
2021版小新Pro14 Ubuntu 20.04 配置指南
&lt;a class="heading-link" href="#2021%e7%89%88%e5%b0%8f%e6%96%b0pro14-ubuntu-2004-%e9%85%8d%e7%bd%ae%e6%8c%87%e5%8d%97">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>苦于沉重游戏本的迫害，新买了一台小新Pro14 2021款，上手感觉还挺不错的。如下是配置：&lt;/p>
&lt;ul>
&lt;li>CPU：酷睿 i5-11300H&lt;/li>
&lt;li>显卡：集成显卡 Intel 锐炬Iris Xe&lt;/li>
&lt;li>内存：16G&lt;/li>
&lt;li>外存：512 SSD&lt;/li>
&lt;li>屏幕：分辨率 2880x1800、400nits、100%sRGB&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/11/3138090261.png" alt="电脑配置信息">&lt;/p>
&lt;p>这里需要注意的是，不同时间出的小新Pro14配置是不太一样的，所以我这里列了一下配置。主要区别在于有一部分是2.2K分辨率+MX450显卡，而我这个是2.8K分辨率+锐炬Iris Xe显卡。&lt;/p>
&lt;p>为了工作的需要，要装一个Ubuntu，先是装了之前用过的 Ubuntu 18.04，安装后发现触摸板无法使用，一系列探索后无果，在朋友的推荐下，还是决定安装 Ubuntu 20.04 试一下，踩了一些坑，在这里记录一下。&lt;/p>
&lt;h2 id="问题列表">
问题列表
&lt;a class="heading-link" href="#%e9%97%ae%e9%a2%98%e5%88%97%e8%a1%a8">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>如果你遇到了以下问题，那么这篇文章的方法可能会对你有益处：&lt;/p>
&lt;h3 id="ubuntu-1804-相关">
Ubuntu 18.04 相关
&lt;a class="heading-link" href="#ubuntu-1804-%e7%9b%b8%e5%85%b3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Ubuntu 18.04 无法使用触摸板&lt;/li>
&lt;li>Ubuntu 18.04 无法使用内置键盘&lt;/li>
&lt;li>Ubuntu 18.04 无法调节亮&lt;/li>
&lt;li>Ubuntu 18.04 查看GPU发现是llvm，而不是Iris Xe&lt;/li>
&lt;/ol>
&lt;h3 id="ubuntu-2004-相关">
Ubuntu 20.04 相关
&lt;a class="heading-link" href="#ubuntu-2004-%e7%9b%b8%e5%85%b3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Ubuntu 20.04 进入后屏幕花屏、黑屏&lt;/li>
&lt;li>Ubuntu 20.04 查看GPU发现是llvm，而不是Iris Xe&lt;/li>
&lt;/ol>
&lt;h2 id="现在达成的效果">
现在达成的效果
&lt;a class="heading-link" href="#%e7%8e%b0%e5%9c%a8%e8%be%be%e6%88%90%e7%9a%84%e6%95%88%e6%9e%9c">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Ubuntu 20.04 能够正常使用，触摸板以及外界屏幕，亮度调节均无问题。&lt;/p>
&lt;p>开机时也能够使用键盘。&lt;/p>
&lt;p>但是开机登录界面还是存在花屏、闪屏的问题，我通过自动登录解决。BIOS界面仍旧会闪屏。&lt;/p>
&lt;h2 id="安装-ubuntu-1804-的问题">
安装 Ubuntu 18.04 的问题
&lt;a class="heading-link" href="#%e5%ae%89%e8%a3%85-ubuntu-1804-%e7%9a%84%e9%97%ae%e9%a2%98">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>首先安装Ubuntu 18.04 还是比较顺利，没有什么坑。&lt;/p>
&lt;p>安装的话就是按流程来一遍——压缩卷、进入BIOS关闭安全启动模式&lt;code>(这里网上有部分同学说也需要关闭 Intel Platform Trust Technology 、但是我不关闭也是可以的)&lt;/code>、然后Try Ubuntu看一下效果&lt;code>（这里Try Ubuntu我没法使用鼠标，不过安装的时候可以）&lt;/code>、开始安装。&lt;/p>
&lt;p>安装过程一般没啥问题，进入系统后我们就会发现一些问题，首先是你的**触摸板用不了，然后键盘也用不了。**再就是屏幕没法调节亮度（这个是小问题我觉得，好像也可以通过安装插件解决，大家可以自行搜索。）&lt;/p>
&lt;p>经过查询资料，这里有同学已经提出很好的解决方案：https://zhuanlan.zhihu.com/p/322377515&lt;/p>
&lt;p>简而言之，键盘用不了需要在 grub 启动项中加入 i8042.dumbkbd 参数，然后运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo update-grub2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可在每次启动后保证键盘可用。&lt;/p>
&lt;p>关于没法使用触摸板和调节亮度，办法就是升级内核，据说是内核升级到5.9.8以上可用，Ubuntu 18.04内置版本是5.4.0.84好像是，但是我在更新后会花屏、黑屏等来回鬼畜，试了好多四五个内核依旧不管用，我猜想是因为我是2.8K的屏幕而网上的教程多是基于2.2K屏幕的，锐炬显卡对于高分辨率的屏幕支持并没有那么优秀。&lt;/p>
&lt;p>于是一直被这个问题折磨，搜了很多的教程也没有解决办法，最后决定换Ubuntu 20.04 尝试一下，之前一直觉得系统版本是个不可逾越的鸿沟，但是随着实践的越来越多，发现很多版本不兼容的问题都是有可解决办法的，因此也下定决心尝试一下未曾试过的 20.04。&lt;/p>
&lt;h2 id="安装ubuntu-2004-的问题">
安装Ubuntu 20.04 的问题
&lt;a class="heading-link" href="#%e5%ae%89%e8%a3%85ubuntu-2004-%e7%9a%84%e9%97%ae%e9%a2%98">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>首先是关于安装的问题&lt;/p>
&lt;p>在安装Ubuntu 18.04 的时候只有四个选项，应该是一个 Try Ubuntu、一个直接安装，一个高级模式，一个进BIOS&lt;/p>
&lt;p>而安装Ubuntu 20.04 的时候却有五个选项，分别是Ubuntu、Ubuntu&lt;code>(safe graphics)&lt;/code>、OEM install&lt;code>(for manufacturers)&lt;/code>、还有就是一个是高级模式、一个是进BIOS&lt;/p>
&lt;p>说一下三个安装方式的区别&lt;/p>
&lt;p>第一个模式与第二个模式的区别就是，第二个模式对于grub启动项目中添加了一个 &lt;code>nomodeset&lt;/code> 选项，那么这个选项是做什么的？以下是他的解释：&lt;/p>
&lt;blockquote>
&lt;p>The newest kernels have moved the video mode setting into the kernel. So all the programming of the hardware specific clock rates and registers on the video card happen in the kernel rather than in the X driver when the X server starts.. This makes it possible to have high resolution nice looking splash (boot) screens and flicker free transitions from boot splash to login screen. Unfortunately, on some cards this doesn’t work properly and you end up with a black screen. Adding the nomodeset parameter instructs the kernel to not load video drivers and use BIOS modes instead until X is loaded.&lt;/p>
&lt;/blockquote>
&lt;p>大概意思是在最新的内核中，已经能够在BIOS引导阶段启用显卡，这样做的目的是很好的适应高分辨率屏，但是很遗憾的是某些显卡并不能很好的适配，通过 &lt;code>nomodeset&lt;/code> 参数可以防止以不支持的显卡驱动视频流。&lt;/p>
&lt;p>很遗憾，锐炬显卡刚好没有被适配，所以选第一个选项&lt;code>(Ubuntu)&lt;/code>来安装也会屏幕一闪一闪的，因此我们安装选择Ubuntu&lt;code>(safe graphics)&lt;/code>选项来进行安装然后流程是一样的，蛮顺利。&lt;/p>
&lt;p>这里装完就没有触摸板的问题，屏幕亮度调节也没有问题。不过键盘依旧有问题，可以根据上面描述进行更改。&lt;/p>
&lt;p>然后更鬼畜的问题来了，只要这么一搞，从BIOS引导阶段开始，就会一直闪屏，尤其是输入密码进行登录的时候，会卡个好长时间，几乎无法使用，不过很有意思的是，只要外接屏幕，外接的屏幕显示不会有问题。&lt;/p>
&lt;p>因此求助于搜索引擎，因为怀疑是显卡的问题，所以搜索了关键词 &lt;code>Ubuntu Iris Xe&lt;/code>，找到了以下两个比较有用的答案：&lt;/p>
&lt;p>StackOverflow：&lt;a href="https://askubuntu.com/questions/1299067/ubuntu-20-04-no-driver-loaded-for-intel-iris-xe-graphics">Ubuntu 20.04 no driver loaded for Intel Iris Xe Graphics&lt;/a>&lt;/p>
&lt;p>Intel：&lt;a href="https://dgpu-docs.intel.com/devices/iris-xe-max-graphics/index.html">Intel Iris Xe MAX Graphics with Linux&lt;/a>&lt;/p>
&lt;p>这两个帖子都说了一个问题吧，就是如何在 Ubuntu 20.04 上更好的使用锐炬显卡&lt;/p>
&lt;p>这个问题实质解决的是没有在Ubuntu 20.04 上启动起来显卡，所以你会在你的 Ubuntu-&amp;gt;Settings-&amp;gt;About 页面看到的是 llvm 有关的字眼，而不是上面我截图所示的 &lt;code>Mesa Intel® Xe Graphics (TGL GT2)&lt;/code>。&lt;/p>
&lt;p>解决这个问题比较关键的步骤是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo apt update
sudo apt install linux-oem-20.04
sudo reboot
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样开机再启动应该就会正常启动显卡了，这个方式在Ubuntu18.04是否奏效我没有实验过，可能可以安装对应的 &lt;code>linux-oem-18.04&lt;/code> 包。&lt;/p>
&lt;p>在 Intel 官方的教程中，还添加了 grub 启动项等，我并没有发现他们的实际作用，在他后续的测试中我也没有达到期待的效果，因此没有继续尝试，如果有同学跟着文档做成功了，可以一起来讨论一下。&lt;/p>
&lt;p>&lt;strong>但是！！！&lt;/strong>&lt;/p>
&lt;p>安装完成后，我还是会花屏和黑屏，问题依旧没有解决。我突发奇想，考虑到我外接屏幕没有问题，而自带的屏幕有问题，**因为外接屏是 1920x1080 而内置屏幕是 2880x1800，我联想到会不会是高分辨率屏幕的问题，所以尝试着把外接屏的显示比例调成了 150%&lt;code>(需要开启 Fractional Scaling)&lt;/code>，没想到歪打正着，居然好了，看起来也更加的顺眼，比例也更加协调。**具体的内部原因还不是很清楚。&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/11/3113030601.png" alt="比例配置信息">&lt;/p>
&lt;p>但是还是有一个小瑕疵，就是在BIOS引导阶段与输入密码登录的界面，我仍旧是会花屏、闪屏，我考虑到这是还没有初始化屏幕设置的问题，尝试搜索了修改BIOS比例、提前初始化login界面的分辨率，依旧没有找到比较好的解决办法，&lt;/p>
&lt;p>因此最后只好启动自动登录来跳过登录界面，这样就&lt;strong>看上去算是一个完好的系统&lt;/strong>了QAQ。。&lt;/p>
&lt;p>这里给出一些可能有价值的资料，大家可以自行查阅&lt;/p>
&lt;p>&lt;a href="https://askubuntu.com/questions/1041677/how-to-change-the-login-screen-resolution-in-ubuntu-18-04">How to change the login screen resolution in Ubuntu 18.04&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://askubuntu.com/questions/1252172/custom-resolution-ubuntu-20-04">Custom Resolution Ubuntu 20.04&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://askubuntu.com/questions/1091778/how-can-i-change-the-resolution-of-the-grub-menu">How can I change the resolution of the GRUB menu?&lt;/a>&lt;/p>
&lt;p>根据上述第三个教程，我修改了 GRUB 的显示分辨率为 1920x1080，还是会闪屏。&lt;/p>
&lt;p>如果有大佬有想法或者解决了，欢迎留言一起探讨。&lt;/p>
&lt;h2 id="后记与感想">
后记与感想
&lt;a class="heading-link" href="#%e5%90%8e%e8%ae%b0%e4%b8%8e%e6%84%9f%e6%83%b3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>折腾了一下午加一晚上，终于把系统整的能用了，不过又要重新配置各种软件，还是挺麻烦的。&lt;/p>
&lt;p>不过尝试新鲜事物、好比Windows11、最新款的电脑，还是挺高血压的，需要应付各种Bug，这可能也是一种平衡？hhhh，想要尝试新的事物、走在前沿、就必须要有付出。&lt;/p>
&lt;p>此外，发现查英文的资料要比中文靠谱的多，尤其是这种比较新的问题、要多去StackOverflow和AskUbuntu等论坛和官网查看，有奇效。&lt;/p>
&lt;h2 id="参考资料">
参考资料
&lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/322377515">联想小新pro14安装Ubuntu20.04&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/1299067/ubuntu-20-04-no-driver-loaded-for-intel-iris-xe-graphics">Ubuntu 20.04 no driver loaded for Intel Iris Xe Graphics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dgpu-docs.intel.com/devices/iris-xe-max-graphics/index.html">Intel Iris Xe MAX Graphics with Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/1041677/how-to-change-the-login-screen-resolution-in-ubuntu-18-04">How to change the login screen resolution in Ubuntu 18.04&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/1252172/custom-resolution-ubuntu-20-04">Custom Resolution Ubuntu 20.04&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/1091778/how-can-i-change-the-resolution-of-the-grub-menu">How can I change the resolution of the GRUB menu?&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>纯终端环境代理配置教程</title><link>https://zzsqwq.github.io/posts/212/</link><pubDate>Mon, 13 Sep 2021 18:15:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/212/</guid><description>&lt;h1 id="纯终端环境代理配置教程">
纯终端环境代理配置教程
&lt;a class="heading-link" href="#%e7%ba%af%e7%bb%88%e7%ab%af%e7%8e%af%e5%a2%83%e4%bb%a3%e7%90%86%e9%85%8d%e7%bd%ae%e6%95%99%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>我们在很多情况下，可能会在云服务器或是其他纯终端环境（例如树莓派服务器等），或者一些没有屏幕的情况下，只能 &lt;strong>ssh&lt;/strong> 链接到服务器上进行一些操作。&lt;/p>
&lt;p>这些时候，如果我们想要克隆一个 Github 的仓库，或者下载一些镜像源中没有的文件，简直是难如登天，100kb/s 的速度都很罕见，因此在这种环境下配一个代理还是十分必要的！&lt;/p>
&lt;p>我们常在 Linux 上使用的 GUI 代理软件如 &lt;strong>Qv2ray、Clash&lt;/strong> 这些就没法用了。因此需要考虑如何在纯终端环境中配置代理的问题，这篇教程就是为解决此问题而写的。&lt;/p>
&lt;h2 id="教程">
教程
&lt;a class="heading-link" href="#%e6%95%99%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>此教程搭配的是常用的 &lt;strong>v2ray-core + v2rayA&lt;/strong> ，这里的 &lt;strong>v2rayA&lt;/strong> 是一个网页端的代理管理工具，其中支持 &lt;strong>v2ray、Xray、SS、SSR、Trojan&lt;/strong> 等多种协议。&lt;/p>
&lt;h3 id="一安装-v2ray-core">
一、安装 v2ray-core
&lt;a class="heading-link" href="#%e4%b8%80%e5%ae%89%e8%a3%85-v2ray-core">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>首先是需要安装 &lt;strong>v2ray-core&lt;/strong> ，这里我们使用开源的项目 &lt;a href="https://github.com/v2fly/fhs-install-v2ray">v2fly/fhs-install-v2ray&lt;/a> 进行安装，它是一个脚本，可以直接运行完成 &lt;strong>v2ray&lt;/strong> 的安装，安装的文件组织结构符合 &lt;a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">Filesystem Hierarchy Standard&lt;/a> ，十分方便简洁，很赞！&lt;/p>
&lt;p>具体步骤如下：&lt;/p>
&lt;h4 id="下载-fhs-install-v2ray-源码">
下载 fhs-install-v2ray 源码
&lt;a class="heading-link" href="#%e4%b8%8b%e8%bd%bd-fhs-install-v2ray-%e6%ba%90%e7%a0%81">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>首先我们因为 Github 克隆很慢，可以先在自己的主机上克隆或者以 &lt;strong>zip&lt;/strong> 包形式下载源码&lt;/p>
&lt;h4 id="将源码上传到远端">
将源码上传到远端
&lt;a class="heading-link" href="#%e5%b0%86%e6%ba%90%e7%a0%81%e4%b8%8a%e4%bc%a0%e5%88%b0%e8%bf%9c%e7%ab%af">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>键入下列代码，通过 &lt;code>scp&lt;/code> 将解压后的代码文件夹目录上传到远端服务器的根目录（如果是树莓派的话可以连接同一局域网进行），注意这里的 &lt;strong>path/to/fhs-install-v2ray&lt;/strong> 指的是本地文件夹的路径&lt;/p>
&lt;p>&lt;code>scp -r path/to/fhs-install-v2ray username@hostname:~&lt;/code>&lt;/p>
&lt;h4 id="下载-v2ray-core-源码">
下载 v2ray-core 源码
&lt;a class="heading-link" href="#%e4%b8%8b%e8%bd%bd-v2ray-core-%e6%ba%90%e7%a0%81">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>此脚本可以全自动安装，即自动检测本机类型是 Ubuntu 还是其他的版本，然后从远端仓库下载最新的 &lt;strong>v2ray&lt;/strong> 进行安装，不过因为没有代理，这一步还是十分缓慢，因此我们可以进行本地安装。&lt;/p>
&lt;p>首先，我们去到 &lt;strong>v2ray-core&lt;/strong> 的官方仓库的发布站 -&amp;gt; &lt;a href="https://github.com/v2fly/v2ray-core/releases">Releases · v2fly/v2ray-core &lt;/a>，在这里可以下载最新版本的的 &lt;strong>v2ray-core&lt;/strong>，不过需要注意的是，需要自己辨别版本，如使用的是 &lt;strong>arm&lt;/strong> 还是 &lt;strong>x64_86&lt;/strong> 等，下载后是一个 &lt;strong>zip&lt;/strong> 压缩包，我们直接通过 &lt;code>scp&lt;/code> 上传到远端服务器根目录&lt;/p>
&lt;p>&lt;code>scp path/to/v2ray-linux-64.zip username@hostname:~&lt;/code>&lt;/p>
&lt;h4 id="连接远程服务器">
连接远程服务器
&lt;a class="heading-link" href="#%e8%bf%9e%e6%8e%a5%e8%bf%9c%e7%a8%8b%e6%9c%8d%e5%8a%a1%e5%99%a8">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>接下来我们通过 &lt;strong>ssh&lt;/strong> 连接到远程服务器&lt;/p>
&lt;p>&lt;code>ssh username@hostname&lt;/code>&lt;/p>
&lt;h4 id="完成安装">
完成安装
&lt;a class="heading-link" href="#%e5%ae%8c%e6%88%90%e5%ae%89%e8%a3%85">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>然后进入根目录后，进入 &lt;code>fhs-install-v2ray&lt;/code> 文件夹，会发现里面有两个脚本，一个是 &lt;code>install-dat-release.sh&lt;/code> 另一个是 &lt;code>install-release.sh&lt;/code> ，前者是带有路由规则的，后者是不带有路由规则的。我试用后发现 &lt;code>install-dat-release.sh&lt;/code> 没有办法本地安装，而后者可以，同时因为 &lt;strong>v2rayA&lt;/strong> 中会自带路由规则，因此完全没有必要用前者，我们可以直接使用 &lt;code>install-release.sh&lt;/code> 进行安装。&lt;/p>
&lt;p>执行 &lt;code>sudo chmod +x install-release.sh&lt;/code> ，添加执行权限&lt;/p>
&lt;p>执行 &lt;code>sudo ./install-release.sh --local ../v2ray-linux-64.zip&lt;/code>&lt;/p>
&lt;p>这里的 local 参数代表是本地安装，解析后面的文件，&lt;strong>注意这里是直接 zip 包&lt;/strong>，不需要解压。同时，这里的路径也是需要和你的下载的文件地址对应。&lt;/p>
&lt;p>不出意外的话，瞬间就可以安装完成。截止到这里，&lt;strong>v2ray-core&lt;/strong> 已经安装成功。需要注意的是，这里不需要执行 &lt;code>sudo systemctl enable v2ray&lt;/code> ，因为后续的 &lt;strong>v2rayA&lt;/strong> 不依赖此服务。&lt;/p>
&lt;p>安装的文件路径如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">installed: /usr/local/bin/v2ray &lt;span style="color:#75715e">#v2ray 主程序地址&lt;/span>
installed: /usr/local/bin/v2ctl &lt;span style="color:#75715e">#v2ray 控制程序&lt;/span>
installed: /usr/local/share/v2ray/geoip.dat &lt;span style="color:#75715e"># 可选，路由信息&lt;/span>
installed: /usr/local/share/v2ray/geosite.dat &lt;span style="color:#75715e">#可选，路由信息&lt;/span>
installed: /usr/local/etc/v2ray/config.json &lt;span style="color:#75715e">#代理配置文件&lt;/span>
installed: /var/log/v2ray/ &lt;span style="color:#75715e">#下面三个都是log文件&lt;/span>
installed: /var/log/v2ray/access.log
installed: /var/log/v2ray/error.log
installed: /etc/systemd/system/v2ray.service &lt;span style="color:#75715e">#v2ray 服务配置信息&lt;/span>
installed: /etc/systemd/system/v2ray@.service
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果有报错的话，可以看对应的 &lt;code>error&lt;/code> 报错去 &lt;a href="https://github.com/v2fly/fhs-install-v2ray">v2fly/fhs-install-v2ray&lt;/a> 官方仓库 Issue 处查看。&lt;/p>
&lt;h3 id="二安装-v2raya">
二、安装 v2rayA
&lt;a class="heading-link" href="#%e4%ba%8c%e5%ae%89%e8%a3%85-v2raya">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>首先，同样的是，为了防止 Github 下载太慢，我们也可以去到官方仓库的发布站 -&amp;gt; &lt;a href="https://github.com/v2rayA/v2rayA/releases">Releases · v2rayA/v2rayA &lt;/a> ，下载对应系统版本的安装包，然后通过 &lt;code>scp&lt;/code> 上传到远端。&lt;/p>
&lt;p>这里以 &lt;strong>x64_86 版本的 Ubuntu 18.04.5 LTS&lt;/strong> 举例，我们直接下载 &lt;code>installer_debian_x64_v1.5.2.deb&lt;/code> 到本地，然后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">scp path/to/installer_debian_x64_v1.5.2.deb username@hostname:~
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将文件上传到远端。&lt;/p>
&lt;p>然后 &lt;strong>ssh&lt;/strong> 到服务器执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo dpkg -i installer_debian_x64_v1.5.2.deb
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装成功后依次执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e"># 启动 v2raya&lt;/span>
sudo systemctl start v2raya
&lt;span style="color:#75715e"># 开机自启 v2raya&lt;/span>
sudo systemctl enable v2raya
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就成功开启了 &lt;code>v2rayA&lt;/code>，我们访问 &lt;code>ip:2017&lt;/code> ，前面是你云服务器的公网 &lt;code>ip&lt;/code> 或者是自建服务器的局域网 &lt;code>ip&lt;/code> ，我们就可以访问到对应的服务，界面大致如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/09/2395630589.png" alt="v2rayA界面">&lt;/p>
&lt;p>首次进入时会让你设置账号和密码，用于后续的管理。还会引导你导入链接，在导入链接后，就可以点击上方的第三栏，进行连接、查看或分享对应的代理了！&lt;/p>
&lt;p>说一下我现在用的设置，点击右上角设置，&lt;strong>透明代理和规则端口的分流模式&lt;/strong>设置为&lt;strong>大陆白名单&lt;/strong>，然后实现方式我用的是 &lt;strong>redirect&lt;/strong>，每隔 24h 更新依次代理，左下角设置的地址与端口我用的是默认的，如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/09/2537498828.png" alt="地址与端口设置">&lt;/p>
&lt;p>这样我们就可以愉快的上网了！！可以 &lt;strong>ssh&lt;/strong> 到服务器试一下 &lt;code>wget google.com&lt;/code>，正常结果如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>❯ wget google.com
--2021-09-13 18:11:04-- http://google.com/
Resolving google.com (google.com)... 93.46.8.90
Connecting to google.com (google.com)|93.46.8.90|:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
Location: http://www.google.com/ [following]
--2021-09-13 18:11:05-- http://www.google.com/
Resolving www.google.com (www.google.com)... 108.160.165.141, 2001::453f:b213
Connecting to www.google.com (www.google.com)|108.160.165.141|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: ‘index.html’
index.html [ &amp;lt;=&amp;gt; ] 13.42K 59.8KB/s in 0.2s
2021-09-13 18:11:06 (59.8 KB/s) - ‘index.html’ saved [13740]
&lt;/code>&lt;/pre>&lt;p>这代表着，我们下载到了 &lt;strong>google.com&lt;/strong> 页面的源码，即可以连通 &lt;strong>Google&lt;/strong> 服务。&lt;/p>
&lt;h3 id="一些存在的小问题">
一些存在的小问题
&lt;a class="heading-link" href="#%e4%b8%80%e4%ba%9b%e5%ad%98%e5%9c%a8%e7%9a%84%e5%b0%8f%e9%97%ae%e9%a2%98">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>我现在还没有搞清楚透明代理的作用，如果不开的话，我通过 &lt;code>proxychains&lt;/code> 配置对应的端口，发现并不能上网，但是如果我直接开了透明代理，不需要 &lt;code>proxychains&lt;/code> 也可以直接在终端使用代理，感觉是全局代理，不过不影响使用。&lt;/p>
&lt;p>具体的一些细节还没有搞清楚，后续学习了再回来补更。&lt;/p></description></item><item><title>关于Git的一些理解</title><link>https://zzsqwq.github.io/posts/201/</link><pubDate>Fri, 23 Jul 2021 14:17:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/201/</guid><description>&lt;h1 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>前段时间在 Github 学完了关于 git 的小游戏 &lt;a href="https://github.com/pcottle/learnGitBranching">learnGitBranching&lt;/a> ，受益匪浅。&lt;/p>
&lt;p>它通过可视化的方式将分支的关系，每条命令的作用等都明明白白的体现出来，可以很直观的感受到你每条命令对整个分支树，每一个 ref 的作用。&lt;/p>
&lt;p>通过这种学习感觉自己对 Git 的理解更加深入一步，能够理解其中的原理，而不是浅尝辄止，照猫画虎。&lt;/p>
&lt;p>学习中记了一些零零散散的思路，想要写一篇笔记记录出来，之前已经写过一个简单的 Git 教程，这篇教程将会更加深入，希望可以帮助大家更好的掌握 Git。&lt;/p>
&lt;p>窃认为，想要学好 Git ，必须要理解清楚其中的分区以及引用，学会了这两个，各种基本操作就很容易理解了。接下来的笔记也基本以此思路展开。&lt;/p>
&lt;h1 id="git中的分区">
Git中的分区
&lt;a class="heading-link" href="#git%e4%b8%ad%e7%9a%84%e5%88%86%e5%8c%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/07/612956951.jpg" alt="Git中的三大分区，图片来源自掘金GabrielPanda">&lt;/p>
&lt;p>首先，Git中存在三大分区，分别是&lt;strong>工作区、暂存区、版本库&lt;/strong>。其中，&lt;/p>
&lt;p>&lt;strong>工作区&lt;/strong>即我们工作的目录，&lt;strong>暂存区&lt;/strong>是我们执行 &lt;code>git add&lt;/code> 后文件存在的区域。&lt;/p>
&lt;p>我们可以通过 &lt;code>git status&lt;/code> 对两种状态进行查看，例如：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-sheel" data-lang="sheel">~/test master*
base ❯ git status
On branch master
Changes to be committed:
(use &amp;quot;git restore --staged &amp;lt;file&amp;gt;...&amp;quot; to unstage)
modified: test
Changes not staged for commit:
(use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
(use &amp;quot;git restore &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
modified: test
&lt;/code>&lt;/pre>&lt;p>上图中存在两部分， 分别为 &lt;code>Changes to be committed&lt;/code> 这里是表示的版本库与暂存区的区别，还有&lt;code>Changes not staged for commit&lt;/code> ，它表示的是工作区与暂存区的区别。&lt;/p>
&lt;p>&lt;strong>版本库&lt;/strong>是我们执行 &lt;code>git commit -m &amp;quot;xxx&amp;quot;&lt;/code> 后，文件存在的区域。在上述过程中，Git 记录暂存区与版本库的差异，生成版本号，记录下来。我们可以通过 &lt;code>git log&lt;/code> 来查看我们产生的更改，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">commit 9da52a0e4800547ca46bd6bb919d1105cea43f1e &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span>
Author: zs &amp;lt;2459958352@qq.com&amp;gt;
Date: Thu Jul &lt;span style="color:#ae81ff">22&lt;/span> 22:09:45 &lt;span style="color:#ae81ff">2021&lt;/span> +0800
test commit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中包含了版本号、当前节点上的 ref 记录、作者、邮箱、日期以及此次提交的注释。&lt;/p>
&lt;h1 id="git中的引用">
Git中的引用
&lt;a class="heading-link" href="#git%e4%b8%ad%e7%9a%84%e5%bc%95%e7%94%a8">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>在 Git 中，引用到处可见，引用类似于给某一个 &lt;code>commit-id&lt;/code> 即某一次提交的 &lt;code>SHA-1&lt;/code> 值起一个简单的名字，如 &lt;code>branch&lt;/code> ，&lt;code>tag&lt;/code> 这些都是引用。&lt;/p>
&lt;p>Git 中存在一个命令， &lt;code>git update-ref&lt;/code> ，你可能几乎没见过，但可能天天在用。&lt;/p>
&lt;p>当运行类似于 &lt;code>git branch &amp;lt;branch&amp;gt;&lt;/code> 这样的命令时，Git 实际上会运行 &lt;code>git update-ref&lt;/code> 命令，例如，运行 &lt;code>git branch zs&lt;/code>，就等效于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git update-ref refs/heads/zs &amp;lt;commit-id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 &lt;code>commit-id&lt;/code> 就是当前提交的 &lt;code>commit-id&lt;/code> ，那他是如何获得的呢？&lt;/p>
&lt;p>使用过 Git 的人一定知道，Git 中存在一个名叫 &lt;code>HEAD&lt;/code> 的引用，它可能是引用，也可能是引用的引用。即它很多时候是指向某一个引用，如指向分支 &lt;code>master&lt;/code> 这个引用。不过，它也可以与引用分离，称为&lt;code>游离的HEAD&lt;/code>，即不指向某个引用，而指向单独的一个 &lt;code>commit&lt;/code> 。&lt;/p>
&lt;p>可以通过 &lt;code>git commit commit-id&lt;/code> 来实现，不过，我们一般&lt;strong>不推荐这种操作&lt;/strong>。下面的讨论，我们都是基于 &lt;code>HEAD&lt;/code> 是指向某一分支的。&lt;/p>
&lt;p>下面是关于一个引用的小例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">~/test master*
base ❯ git branch zs
~/test master*
base ❯ cat .git/refs/heads/zs
9da52a0e4800547ca46bd6bb919d1105cea43f1e
~/test master*
base ❯ git update-ref refs/heads/test 9da52a
~/test master*
base ❯ cat .git/HEAD
ref: refs/heads/master
~/test master*
base ❯ cat .git/refs/heads/master
9da52a0e4800547ca46bd6bb919d1105cea43f1e
~/test master*
base ❯ cat .git/refs/heads/test
9da52a0e4800547ca46bd6bb919d1105cea43f1e
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，例子中 HEAD 指向 master ，master,zs,test 同时都指向 id 为 &lt;code>9da52a&lt;/code> 的提交。&lt;/p>
&lt;h1 id="撤销更改">
撤销更改
&lt;a class="heading-link" href="#%e6%92%a4%e9%94%80%e6%9b%b4%e6%94%b9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="撤销本地更改">
撤销本地更改
&lt;a class="heading-link" href="#%e6%92%a4%e9%94%80%e6%9c%ac%e5%9c%b0%e6%9b%b4%e6%94%b9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>通过&lt;strong>版本库&lt;/strong>撤销&lt;strong>暂存区&lt;/strong>更改，&lt;strong>工作区&lt;/strong>不改&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git reset HEAD^ &lt;span style="color:#75715e">#撤销一次更改&lt;/span>
$ git reset HEAD~nums &lt;span style="color:#75715e">#撤销HEAD往前nums次更改&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>直接通过&lt;strong>版本库&lt;/strong>撤销&lt;strong>工作区&lt;/strong>的更改&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git reset HEAD^ --hard &lt;span style="color:#75715e">#撤销一次更改&lt;/span>
$ git reset HEAD~nums --hard &lt;span style="color:#75715e">#撤销HEAD往前nums次更改&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现只要加了 &lt;code>--hard&lt;/code> ，就可以直接也把工作区改掉，不过建议三思而后行！&lt;/p>
&lt;h2 id="撤销远程更改">
撤销远程更改
&lt;a class="heading-link" href="#%e6%92%a4%e9%94%80%e8%bf%9c%e7%a8%8b%e6%9b%b4%e6%94%b9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>上面说的是你本地的&lt;strong>工作区&lt;/strong> or &lt;strong>暂存区&lt;/strong>的撤销&lt;/p>
&lt;p>如果你已经把更改推送到了远端仓库，那么你想要去掉那次改动怎么办？&lt;/p>
&lt;p>可能你会想，直接通过 &lt;code>git reset&lt;/code> 切换到上面的某个需要的节点，然后再改？But，很容易想到这样会产生严重的冲突。&lt;strong>一旦commit已经被push到远程仓库，那么是坚决不允许去reset它的。&lt;/strong>&lt;/p>
&lt;p>还好，Git 给我们提供了一个更好的选择，你可以通过 &lt;code>git revert&lt;/code> 产生一个类似于补丁的东西来消除掉更改，很容易理解，这样没有改变树的结构，相对于 &lt;code>git reset&lt;/code> 他会往前走而不是回溯，这不会对之前的历史产生重要的影响。&lt;/p>
&lt;p>需要注意的是， &lt;code>git revert &lt;/code> 的用法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git revert HEAD &lt;span style="color:#75715e">#撤销掉HEAD这次更改，回到HEAD的上次版本&lt;/span>
$ git revert &amp;lt;commit_id&amp;gt; &lt;span style="color:#75715e">#撤销掉这次cmmit的修改&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="两种合并方式">
两种合并方式
&lt;a class="heading-link" href="#%e4%b8%a4%e7%a7%8d%e5%90%88%e5%b9%b6%e6%96%b9%e5%bc%8f">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>我们知道，Git 中存在两种合并分支的方式，分别为 &lt;code>git merge&lt;/code> 和 &lt;code>git rebase&lt;/code> 。&lt;/p>
&lt;p>两种方式各有优劣，简单说，&lt;code>rabase&lt;/code> 是把两条分支的提交记录整理到某一主分支上，它有着历史的完整记录。而 &lt;code>merge&lt;/code> 虽然也是整理了提交，但是某一分支的中间提交更改的过程合并后并不会体现在主分支上，中间过程可以说是在主分支上不可见的。&lt;/p>
&lt;p>很容易发现，&lt;code>rebase&lt;/code> 产生的主分支提交记录会更加的详细，它记录了每一步小的改动。而 &lt;code>merge&lt;/code> 产生的更简洁，有点类似于封装的意味，只是告诉你我这个提交完成了这个任务的开发，内部的实现细节却不会告诉你。&lt;/p>
&lt;p>而 &lt;code>rebase&lt;/code> 相比与 &lt;code>merge&lt;/code> 也会更加繁琐一些，你也可以通过 &lt;code>git rebase -i&lt;/code> 来通过可视化界面（可视化文本列表）的方式，来对记录做取舍与改动，不过还是没有 &lt;code>merge&lt;/code> 方便，远程仓库的合并操作一般都是使用 &lt;code>merge&lt;/code> 。&lt;/p>
&lt;p>需要注意的是，两种方法的使用习惯很不一样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git merge &amp;lt;branch&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代表的是将 &lt;code>&amp;lt;branch&amp;gt;&lt;/code> 分支合并到当前 &lt;code>HEAD&lt;/code> 所在的分支。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git rebase &amp;lt;branch1&amp;gt; &amp;lt;branch2&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代表的是将 &lt;code>branch2&lt;/code> 合并到 &lt;code>&amp;lt;branch1&amp;gt;&lt;/code> 的位置。如果省略 &lt;code>&amp;lt;branch2&amp;gt;&lt;/code> ，那么就是合并 &lt;code>HEAD&lt;/code> 所在分支到 &lt;code>&amp;lt;branch1&amp;gt;&lt;/code> 分支。&lt;/p>
&lt;p>可以发现 &lt;code>merge&lt;/code> 体现的是一种， &lt;code>merge xx&lt;/code> 到当前位置。而 &lt;code>rebase&lt;/code> 体现的是将自己合并到 &lt;code>xx&lt;/code> 那里去。一个是别人过来，一个是自己过去。建议两个命令改成 &lt;code>merge from&lt;/code> ，&lt;code>rebase into&lt;/code>，哈哈。&lt;/p>
&lt;p>顺便提一下， &lt;code>merge&lt;/code> 会导致一个节点有多个父节点，通过上文我们知道可以通过 &lt;code>~&lt;/code> 在一条线上移动，在这里，我们可以通过 &lt;code>^&lt;/code> 来指定第几个父节点，如 &lt;code>HEAD^3&lt;/code> 就是指 &lt;code>HEAD&lt;/code> 所在节点的第三个父节点。&lt;/p>
&lt;h1 id="整理提交记录">
整理提交记录
&lt;a class="heading-link" href="#%e6%95%b4%e7%90%86%e6%8f%90%e4%ba%a4%e8%ae%b0%e5%bd%95">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>我们有时会需要把另一个分支的部分更改放到主分支上来，即整理我们所有的提交记录，拿到我们所需要的来组成一个完整功能。&lt;/p>
&lt;p>为了完成这件事，我们想到，这有点像合并分支，不过可能不需要某一个分支上的全部更改，只需要其中的一部分就可以了。&lt;/p>
&lt;p>上面提到，通过 &lt;code>git rebase -i&lt;/code> 可以进行交互式的 &lt;code>rebase&lt;/code> ，可以对提交记录进行取舍，因此这样就可以满足我们的需求，只不过可能合并的时候需要想明白是从哪里变到哪里，有一些烧脑。&lt;/p>
&lt;p>幸运的是，Git 还给我们提供了另一个更加简洁的方式——&lt;code>git cherry-pick&lt;/code> ，语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git cherry-pick &amp;lt;commid-id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以通过这种方式，将树上的任意一个节点的提交添加到当前 &lt;code>HEAD&lt;/code> 所在分支的下方，这真是功能强大的命令！你也可以通过空格间隔，来顺序摘取多个提交。&lt;/p>
&lt;h1 id="两条万能指令">
两条万能指令
&lt;a class="heading-link" href="#%e4%b8%a4%e6%9d%a1%e4%b8%87%e8%83%bd%e6%8c%87%e4%bb%a4">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>除了上面我觉得值得说道的问题，我还想推荐两条我认为非常有用的指令，掌握了他们，你就可以在分支树上随心所欲的移动！&lt;/p>
&lt;ul>
&lt;li>移动分支&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git branch -f &amp;lt;branch&amp;gt; &amp;lt;commit-id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过这条指令，你可以将 &lt;code>&amp;lt;branch&amp;gt;&lt;/code> 的引用指向 &lt;code>commit-id&lt;/code> ，如果你读懂了上面的内容，你会发现它只是通过 &lt;code>update-ref&lt;/code> 更新了对应的引用。&lt;/p>
&lt;ul>
&lt;li>移动 HEAD&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git checkout &amp;lt;branch&amp;gt;
$ git checkout &amp;lt;commit-id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过这条指令，你可以自由的移动 &lt;code>HEAD&lt;/code> 引用，前者让他指向了 &lt;code>&amp;lt;branch&amp;gt;&lt;/code> 分支，后者让他指向了SHA-1为 &lt;code>&amp;lt;commit-id&amp;gt;&lt;/code> 的提交。&lt;/p>
&lt;h1 id="推荐的资料">
推荐的资料
&lt;a class="heading-link" href="#%e6%8e%a8%e8%8d%90%e7%9a%84%e8%b5%84%e6%96%99">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>在学习的过程中，看了很多资料，一并推荐给大家！&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/pcottle/learnGitBranching">learnGitBranching&lt;/a>：有趣的闯关游戏，但也干货满满。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://events.jianshu.io/p/9b3d7b6fe738">Git三大分区概念&lt;/a>：讲解了关于分区的概念，还有直观清晰的图片！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%BC%95%E7%94%A8">Git的引用&lt;/a>：来自 Git 官方的讲解，十分硬核。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>利用树莓派为HP LaserJet 1020配置无线打印功能</title><link>https://zzsqwq.github.io/posts/198/</link><pubDate>Sun, 18 Jul 2021 16:03:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/198/</guid><description>&lt;h2 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>    最近基地的打印机突然又好起来了。&lt;/p>
&lt;p>    因为基地的打印机型号比较老——HP LaserJet 1020，没有无线打印的功能。所以之前一位学长&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 用树莓派配置了打印机的无线打印功能，但是后来发现有一些问题，有时候发送打印请求树莓派无法接收，而且不知道为何，学长之前用的是树莓派自己创建WiFi，连接对应WiFi才能打印，但是这个显然不是最优的解决办法。&lt;/p>
&lt;p>    考虑到之间已经配置好基地WiFi，我决定重新配置一下打印功能，使其连接基地WiFi即可实现局域网打印。&lt;/p>
&lt;hr>
&lt;h2 id="配置过程">
配置过程
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae%e8%bf%87%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;h3 id="查看树莓派内容">
查看树莓派内容
&lt;a class="heading-link" href="#%e6%9f%a5%e7%9c%8b%e6%a0%91%e8%8e%93%e6%b4%be%e5%86%85%e5%ae%b9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>    通过ssh连接树莓派，发现里面除了Github上的一个开源项目&lt;a href="https://github.com/oblique/create_ap">create_ap&lt;/a> ，就没有什么其他的内容了，连接屏幕后发现没有任何图像信号，无从下手，因此考虑重新刷机。&lt;/p>
&lt;hr>
&lt;h3 id="对树莓派进行刷机">
对树莓派进行刷机
&lt;a class="heading-link" href="#%e5%af%b9%e6%a0%91%e8%8e%93%e6%b4%be%e8%bf%9b%e8%a1%8c%e5%88%b7%e6%9c%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>    把数据备份了一下，看了一下树莓派版本是2015年生产的 &lt;code>Raspberry Pi 3 model B V1.2&lt;/code> ，是老古董了。&lt;/p>
&lt;p>    去官网看了一下，因为我对Ubuntu比较熟悉，我计划安装一个 Ubuntu20.04版本的，考虑到版本比较老，就装了&lt;strong>server&lt;/strong>版本的，相比与desktop版本负担更小一些。&lt;/p>
&lt;p>    其实就是下一个官方的软件，&lt;code>Raspberry Pi Imager&lt;/code> ，直接用读卡器对树莓派的存储卡刷机即可。&lt;/p>
&lt;p>    这里是对应的镜像以及教程： &lt;a href="https://ubuntu.com/download/raspberry-pi">镜像下载&lt;/a> &lt;a href="https://ubuntu.com/tutorials/how-to-install-ubuntu-desktop-on-raspberry-pi-4#1-overview">安装教程&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="配置网络相关">
配置网络相关
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae%e7%bd%91%e7%bb%9c%e7%9b%b8%e5%85%b3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>    Ubuntu的server版本有个比较蛋疼的问题就是上网比较困难，如果是用的学校网线，必须要PPPOE拨号才能上网，但是server版本居然没有 &lt;code>net-tools&lt;/code> 和 &lt;code>network-manager&lt;/code> ，连接WiFi啥的试了很多办法但还是没有什么作用。&lt;/p>
&lt;p>    &lt;strong>解决办法：用网线直接连接树莓派和有网的路由器，安装 &lt;code>net-tools&lt;/code> 和 &lt;code>network-manager&lt;/code> ，执行&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo nmtui
&lt;/code>&lt;/pre>&lt;/div>&lt;p>    选择 &lt;code>Activate a connect &lt;/code> 连接无线的WiFi，执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo ifconfig
&lt;/code>&lt;/pre>&lt;/div>&lt;p>    查看WiFi对应的IP，至此，树莓派可以摆脱屏幕，我们可以使用电脑进行使用 &lt;code>ssh&lt;/code> 连接。&lt;/p>
&lt;p>    这里也可以使用网线进行连接，具体操作如下&lt;/p>
&lt;p>    1. 用网线连接树莓派和自己的电脑。&lt;/p>
&lt;p>    2. 在树莓派的利用 &lt;code>nmtui&lt;/code> 选择 &lt;code>Edit a connection &lt;/code> ，Add一个Ethernet connect，对IPv4 CONFIGURATION进行设置，首先讲 &lt;code>Automatic&lt;/code> 设置为 &lt;code>Manual&lt;/code>，设置 &lt;code>Address&lt;/code> 为 &lt;strong>静态IP&lt;/strong> 如 &lt;code>192.168.3.2&lt;/code> ，&lt;code>Gateway&lt;/code> 设置为 &lt;code>192.168.3.1&lt;/code> 。&lt;/p>
&lt;p>    3. 在自己电脑利用 &lt;code>nmtui&lt;/code> 同上不过设置 &lt;code>Address&lt;/code> 为 &lt;code>192.168.3.3&lt;/code> ，只要是位于同一网段即可。&lt;/p>
&lt;p>    4. 这时候就可以通过网线进行 &lt;code>ssh&lt;/code> 连接了。&lt;/p>
&lt;hr>
&lt;h3 id="配置cups">
配置cups
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%aecups">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>    以下大多参考：&lt;a href="https://sspai.com/post/40997">如何正确地用树莓派共享打印机&lt;/a>&lt;/p>
&lt;p>    大佬言：&lt;/p>
&lt;blockquote>
&lt;p>其实，这一步的工作量非常少，因为软件包 CUPS 就是为共享打印机而生。我们要做的只是将打印机用 USB 线缆连接树莓派，然后安装并配置 CUPS。&lt;/p>
&lt;/blockquote>
&lt;p>    然而，事实并非如此。&lt;/p>
&lt;h4 id="换源">
换源
&lt;a class="heading-link" href="#%e6%8d%a2%e6%ba%90">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>    在安装之前需要换源，如果不换源的话，安装会十分缓慢，具体的流程可以看上面的blog，因为我们基地的WiFi自带代理，因此这一步我没有做。&lt;/p>
&lt;h4 id="安装驱动及打印程序">
安装驱动及打印程序
&lt;a class="heading-link" href="#%e5%ae%89%e8%a3%85%e9%a9%b1%e5%8a%a8%e5%8f%8a%e6%89%93%e5%8d%b0%e7%a8%8b%e5%ba%8f">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>首先更新源并安装Hp的打印机驱动 &lt;code>hplip&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo apt update
$ sudo apt install hplip
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>然后安装Apple开源的远程打印工具 &lt;code>cups&lt;/code>，并配置相应权限&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo apt install cups &lt;span style="color:#75715e"># Install cups package&lt;/span>
$ sudo usermod -aG lpadmin pi &lt;span style="color:#75715e"># Add user to lpadmin group,pi is your user name&lt;/span>
$ sudo cupsctl --remote-any &lt;span style="color:#75715e"># open remote access &lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>然后使用在同一局域网的电脑，访问 &lt;code>https://树莓派IP:631&lt;/code>，可以进入如下界面，按照下图设置右侧的&lt;code>Server Settings&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/07/2334607761.png" alt="cups管理页面">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>连接打印机和树莓派&lt;/strong>，点击Add Printer添加打印机，在弹出的窗口中输入对应的用户信息，使用在上一步中用户组中添加的用户&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/07/3556322742.png" alt="cups登录界面">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后按着一步步的指引，选择HP LaserJet 1020打印机，然后按照提示，选择和名称对应的驱动，我们会发现 &lt;strong>LaserJet 1020&lt;/strong> 对应驱动会提示：HP laserjet requires proprietary plugin，也就是我们不仅需要这个通用的驱动，而且需要一些额外的插件，打印机才能正常工作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查阅资料发现：HP官方已经给出了&lt;a href="https://developers.hp.com/hp-linux-imaging-and-printing/binary_plugin.html">说明&lt;/a>，我们需要查看hplip版本，然后安装对应的驱动插件。&lt;/p>
&lt;ul>
&lt;li>首先我们查看一下版本，发现是3.20.3版本&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo apt show hplip
Package: hplip
Version: 3.20.3+dfsg0-2
Priority: optional
Section: utils
Origin: Ubuntu
Maintainer: Ubuntu Developers &amp;lt;ubuntu-devel-discuss@lists.ubuntu.com&amp;gt;
Original-Maintainer: Debian Printing Team &amp;lt;debian-printing@lists.debian.org&amp;gt;
Bugs: https://bugs.launchpad.net/ubuntu/+filebug
Installed-Size: &lt;span style="color:#ae81ff">518&lt;/span> kB
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>然后在 &lt;a href="https://developers.hp.com/hp-linux-imaging-and-printing/plugins">插件列表&lt;/a> 中找到 3.20.3 对应的&lt;code>hplip-3.20.3-plugin.run&lt;/code>和&lt;code>hplip-3.20.3-plugin.run.asc&lt;/code>，使用wget下载到树莓派本地。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行 &lt;code>hp-setup -i&lt;/code> 使用命令行进行安装，按照提示命令，进行插件的安装。&lt;/p>
&lt;p>[scode type=&amp;ldquo;yellow&amp;rdquo;]这里建议提前下好安装，而不是直接联网下载，速度较快，指定路径需要为绝对路径[/scode]&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>至此，我们可以尝试使用手机或者电脑搜索打印机来进行打印测试，没有其他意外的话，可以发现打印成功！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="结语">
结语
&lt;a class="heading-link" href="#%e7%bb%93%e8%af%ad">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>    其实这个配置过程远没有这么简单，期间还有很多小问题，但是大致的流程大概就是如上述所示，全写出来可能太啰嗦，大家如果配置过程中遇到更多的疑问，可以在下方评论一起探讨~&lt;/p>
&lt;h2 id="参考链接">
参考链接
&lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://developers.hp.com/hp-linux-imaging-and-printing/binary_plugin.html">What is the HPLIP Binary Plug-In and How Do I Install It?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developers.hp.com/hp-linux-imaging-and-printing/plugins">Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.openprinting.org/download/printdriver/auxfiles/HP/plugins/">Other Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/apple/cups">cups&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/d3752c584e01">使用树莓派搭建无线打印机&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sspai.com/post/40997">如何正确地用树莓派共享打印机&lt;/a>&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>学长的博客在这里: &lt;a href="https://tec.blog.ykai.top/">dykai&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>deepin-wine-qq-9.1.8版本无法正常启动的解决方案</title><link>https://zzsqwq.github.io/posts/195/</link><pubDate>Wed, 16 Jun 2021 01:38:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/195/</guid><description>&lt;h3 id="问题描述">
问题描述
&lt;a class="heading-link" href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    Ubuntu下想要使用QQ有一个比较好的解决方案就是deepin-wine的版本，deepin-wine版本的QQ一共有两个版本，分别是 8.9.1 和 9.1.8 ，前者安装后发现无法登陆，登录时会提示版本过低的问题，于是我换到9.1.8版本后，启动初始化后就无任何信息了，于是开始排查问题&lt;/p>
&lt;h3 id="解决方案">
解决方案
&lt;a class="heading-link" href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    首先我们根据上文的启示，因为每一个应用程序对应了一个 &lt;code>xxx.desktop&lt;/code> 文件，因此在应用库中的QQ一定也有一个对应的 &lt;code>desktop&lt;/code> 文件&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/06/75817321.png" alt="QQ的启动方式">&lt;/p>
&lt;p>​    我们进入到 &lt;code>/usr/share/applications&lt;/code> ，运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ ls | grep -i qq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    可以发现其中有一个名为 &lt;code>deepin.com.qq.im.desktop&lt;/code> 的文件，我们打开后发现内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e">#!/usr/bin/env xdg-open
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>Desktop Entry&lt;span style="color:#f92672">]&lt;/span>
Encoding&lt;span style="color:#f92672">=&lt;/span>UTF-8
Type&lt;span style="color:#f92672">=&lt;/span>Application
X-Created-By&lt;span style="color:#f92672">=&lt;/span>Deepin WINE Team
Categories&lt;span style="color:#f92672">=&lt;/span>chat;
Icon&lt;span style="color:#f92672">=&lt;/span>deepin.com.qq.im
Exec&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/opt/deepinwine/apps/Deepin-QQ/run.sh&amp;#34;&lt;/span> -u %u
Name&lt;span style="color:#f92672">=&lt;/span>QQ
Name&lt;span style="color:#f92672">[&lt;/span>zh_CN&lt;span style="color:#f92672">]=&lt;/span>QQ
Comment&lt;span style="color:#f92672">=&lt;/span>Tencent QQ Client on Deepin Wine
StartupWMClass&lt;span style="color:#f92672">=&lt;/span>QQ.exe
MimeType&lt;span style="color:#f92672">=&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    可以看到Exec那一栏为 &lt;code>Exec=&amp;quot;/opt/deepinwine/apps/Deepin-QQ/run.sh&amp;quot; -u %u&lt;/code> ，发现他是运行目录下的一个 &lt;code>run.sh&lt;/code> 脚本来启动的。&lt;/p>
&lt;p>​    我们进入目录下直接运行该脚本，查看log信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">base ❯ ./run.sh
Run Deepin-QQ 9.1.8deepin0 c:/Program Files/Tencent/QQ/Bin/QQ.exe
run Deepin-QQ progress pid
Gtk-Message: 01:16:58.069: GtkDialog mapped without a transient parent. This is discouraged.
total &lt;span style="color:#ae81ff">0&lt;/span>
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">16&lt;/span> 01:16 c: -&amp;gt; ../drive_c
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com1 -&amp;gt; /dev/ttyS0
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com10 -&amp;gt; /dev/ttyS9
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com11 -&amp;gt; /dev/ttyS10
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com12 -&amp;gt; /dev/ttyS11
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com13 -&amp;gt; /dev/ttyS12
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com14 -&amp;gt; /dev/ttyS13
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com15 -&amp;gt; /dev/ttyS14
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com16 -&amp;gt; /dev/ttyS15
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com17 -&amp;gt; /dev/ttyS16
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com18 -&amp;gt; /dev/ttyS17
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com19 -&amp;gt; /dev/ttyS18
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com2 -&amp;gt; /dev/ttyS1
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com20 -&amp;gt; /dev/ttyS19
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com21 -&amp;gt; /dev/ttyS20
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com22 -&amp;gt; /dev/ttyS21
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com23 -&amp;gt; /dev/ttyS22
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com24 -&amp;gt; /dev/ttyS23
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com25 -&amp;gt; /dev/ttyS24
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com26 -&amp;gt; /dev/ttyS25
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com27 -&amp;gt; /dev/ttyS26
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com28 -&amp;gt; /dev/ttyS27
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com29 -&amp;gt; /dev/ttyS28
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com3 -&amp;gt; /dev/ttyS2
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com30 -&amp;gt; /dev/ttyS29
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com31 -&amp;gt; /dev/ttyS30
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com32 -&amp;gt; /dev/ttyS31
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com4 -&amp;gt; /dev/ttyS3
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com5 -&amp;gt; /dev/ttyS4
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com6 -&amp;gt; /dev/ttyS5
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com7 -&amp;gt; /dev/ttyS6
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com8 -&amp;gt; /dev/ttyS7
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com9 -&amp;gt; /dev/ttyS8
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">8&lt;/span> 6月 &lt;span style="color:#ae81ff">16&lt;/span> 01:16 y: -&amp;gt; /home/zs
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">1&lt;/span> 6月 &lt;span style="color:#ae81ff">16&lt;/span> 01:16 z: -&amp;gt; /
CallApp Deepin-QQ c:/Program Files/Tencent/QQ/Bin/QQ.exe
2021年 06月 16日 星期三 01:16:58 CST:kill QQ.exe block
2021年 06月 16日 星期三 01:16:58 CST:No wine process found
/home/zs/.deepinwine/Deepin-QQ/drive_c/Program Files/Tencent/QQ/Bin
Starting process c:/Program Files/Tencent/QQ/Bin/QQ.exe ...
/opt/deepinwine/apps/Deepin-QQ
base ❯ wine: cannot find L&lt;span style="color:#e6db74">&amp;#34;C:\\windows\\system32\\winemenubuilder.exe&amp;#34;&lt;/span>
wine version: 2.18
libGL error: No matching fbConfigs or visuals found
libGL error: failed to load driver: swrast
X Error of failed request: GLXBadContext
Major opcode of failed request: &lt;span style="color:#ae81ff">152&lt;/span> &lt;span style="color:#f92672">(&lt;/span>GLX&lt;span style="color:#f92672">)&lt;/span>
Minor opcode of failed request: &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#f92672">(&lt;/span>X_GLXIsDirect&lt;span style="color:#f92672">)&lt;/span>
Serial number of failed request: &lt;span style="color:#ae81ff">207&lt;/span>
Current serial number in output stream: &lt;span style="color:#ae81ff">206&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    可以发现最下面的log信息有一些异常，首先第一行是因为我们是Ubuntu系统，可以暂且不关注&lt;/p>
&lt;p>​    接下来可以看到有一个LibGL的错误，我们通过Google搜索&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">libGL error: No matching fbConfigs or visuals found
libGL error: failed to load driver: swrast
X Error of failed request: GLXBadContext
Major opcode of failed request: &lt;span style="color:#ae81ff">152&lt;/span> &lt;span style="color:#f92672">(&lt;/span>GLX&lt;span style="color:#f92672">)&lt;/span>
Minor opcode of failed request: &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#f92672">(&lt;/span>X_GLXIsDirect&lt;span style="color:#f92672">)&lt;/span>
Serial number of failed request: &lt;span style="color:#ae81ff">207&lt;/span>
Current serial number in output stream: &lt;span style="color:#ae81ff">206&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    发现类似的错误及解决方案如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=255385">SOLVED] LibGL errors with osu! and wine&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://askubuntu.com/questions/834254/steam-libgl-error-no-matching-fbconfigs-or-visuals-found-libgl-error-failed-t">Steam: libGL error: No matching fbConfigs or visuals found libGL error: failed to load driver: swrast&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​    从搜索结果来看，这个问题还是非常常见的，用steam也会遇到，一般都是因为电脑安装了64位的NVIDIA显卡驱动，但是因为应用是32位的导致不能兼容，因此无法启动&lt;/p>
&lt;p>​    最终解决方案有两个&lt;/p>
&lt;ul>
&lt;li>如果是不常用NVIDIA驱动的人，普通的办公一下，可以搜索网上教程关闭独显，只启用集显，可以发现QQ可以正常启动，&lt;/li>
&lt;li>重新安装32位的NVIDIA驱动&lt;/li>
&lt;/ul>
&lt;h3 id="最后">
最后
&lt;a class="heading-link" href="#%e6%9c%80%e5%90%8e">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    虽然已经知道了解决方案，但是最终我还是选择卸载掉QQ，安装了wine版本的TIM，感觉和QQ没什么区别，而且更加简洁，而且可以流畅运行，没有N卡兼容问题！大家可以考虑一下~&lt;/p>
&lt;p>​    而且QQ和TIM某些情况下会出现bug，字体全部变为方块，在 deepin-wine-ubuntu 的 &lt;a href="https://github.com/wszqkzqk/deepin-wine-ubuntu/issues">Issues&lt;/a> 中找到了解决方案 &lt;a href="https://github.com/wszqkzqk/deepin-wine-ubuntu/issues/253">Ubuntu 安装QQ后中文方块解决方法&lt;/a> ，大家有同样困扰的也可以看一下~&lt;/p></description></item><item><title>Ubuntu如何利用AppImage创建Qv2ray快捷方式</title><link>https://zzsqwq.github.io/posts/193/</link><pubDate>Wed, 16 Jun 2021 00:54:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/193/</guid><description>&lt;h3 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    最近因为之前的Ubuntu系统有一些环境和神奇的问题，把Ubuntu重装了，在配置Qv2ray的时候，之前一直是把AppImage放到桌面上直接使用，这样的话一直用起来不仅难找而且操作有点困难，因此考虑将他放到命令行启动并且可以在快捷方式中找到。效果如下图所示：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/06/2642879187.png" alt="快捷方式效果图">&lt;/p>
&lt;h3 id="原理">
原理
&lt;a class="heading-link" href="#%e5%8e%9f%e7%90%86">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    首先需要明白的是这个里面的每个快捷方式，其实都是解析一个文件得到的，这些文件都存在于 &lt;code>\usr\share\applications&lt;/code> 中，文件名为 &lt;code>**.desktop&lt;/code> ，随便打开里面的一个文件看一下，Typora的启动文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#f92672">[&lt;/span>Desktop Entry&lt;span style="color:#f92672">]&lt;/span>
Name&lt;span style="color:#f92672">=&lt;/span>Typora
Comment&lt;span style="color:#f92672">=&lt;/span>a minimal Markdown reading &amp;amp; writing app. Change Log: &lt;span style="color:#f92672">(&lt;/span>https://typora.io/windows/dev_release.html&lt;span style="color:#f92672">)&lt;/span>
GenericName&lt;span style="color:#f92672">=&lt;/span>Markdown Editor
Exec&lt;span style="color:#f92672">=&lt;/span>typora %U
Icon&lt;span style="color:#f92672">=&lt;/span>typora
Type&lt;span style="color:#f92672">=&lt;/span>Application
StartupNotify&lt;span style="color:#f92672">=&lt;/span>true
Categories&lt;span style="color:#f92672">=&lt;/span>Office;WordProcessor;
MimeType&lt;span style="color:#f92672">=&lt;/span>text/markdown;text/x-markdown;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    可以看到里面的内容写的非常清晰，其中比较重要的有以下几个&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键词&lt;/th>
&lt;th>意义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>[Desktop Entry]&lt;/td>
&lt;td>文件头&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Name&lt;/td>
&lt;td>应用名称&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Comment&lt;/td>
&lt;td>描述&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exec&lt;/td>
&lt;td>执行的命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Icon&lt;/td>
&lt;td>图标路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Type&lt;/td>
&lt;td>启动器类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Categories&lt;/td>
&lt;td>应用的类型（内容相关）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StartupNotify&lt;/td>
&lt;td>启动时是否打印输出信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Terminal&lt;/td>
&lt;td>是否在终端中运行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="快捷方式的创建">
快捷方式的创建
&lt;a class="heading-link" href="#%e5%bf%ab%e6%8d%b7%e6%96%b9%e5%bc%8f%e7%9a%84%e5%88%9b%e5%bb%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    明白以上原理，我们只需要创建一个 &lt;code>qv2ray.desktop&lt;/code> ，文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#f92672">[&lt;/span>Desktop Entry&lt;span style="color:#f92672">]&lt;/span>
Name&lt;span style="color:#f92672">=&lt;/span>qv2ray
Exec&lt;span style="color:#f92672">=&lt;/span>/home/zs/proxy/v2ray/Qv2ray.v2.6.3.linux-x64.AppImage
Icon&lt;span style="color:#f92672">=&lt;/span>/home/zs/proxy/v2ray/qv2ray.512.png
Type&lt;span style="color:#f92672">=&lt;/span>Application
StartupNotify&lt;span style="color:#f92672">=&lt;/span>true
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    其中Exec为你AppImage的绝对路径，Icon为图标的绝对路径。&lt;/p>
&lt;p>​    其中各个大小的Qv2ray的icons可以在它的Github中找到，链接为：&lt;a href="https://github.com/Qv2ray/Qv2ray/tree/master/assets/icons">Qv2ray/icons&lt;/a>&lt;/p>
&lt;p>​    创建完后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo chmod +x qv2ray.desktop
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    为文件添加可执行权限，然后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo cp qv2ray.desktop /usr/share/applications
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    将其加入到目录中，接下来我们就可以在应用库中找到对应的qv2ray了~&lt;/p>
&lt;h3 id="命令行快捷方式的创建">
命令行快捷方式的创建
&lt;a class="heading-link" href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%bf%ab%e6%8d%b7%e6%96%b9%e5%bc%8f%e7%9a%84%e5%88%9b%e5%bb%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    我们直接将AppImage加入到 &lt;code>/usr/bin&lt;/code> 中即可，即执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo cp xxx.AppImage /usr/bin/qv2ray
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    接下来我们在终端中输入 &lt;code>qv2ray&lt;/code> ，发现已经可以成功打开qv2ray，大功告成！~&lt;/p></description></item><item><title>关于Anaconda中pip路径指向问题</title><link>https://zzsqwq.github.io/posts/169/</link><pubDate>Sat, 06 Mar 2021 20:51:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/169/</guid><description>&lt;h3 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    最近使用Anaconda的时候遇到了一个很奇怪的问题，如当我新建环境 &lt;strong>condatest&lt;/strong> 后，使用 &lt;code>pip -V&lt;/code> 查看pip的路径指向，会发现pip指向的是另一个环境 &lt;strong>CenterNet&lt;/strong> 的路径。搜索了很久得到一个有一些用的解决方法&lt;/p>
&lt;h3 id="解决方案">
解决方案
&lt;a class="heading-link" href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    设有问题的环境为 &lt;strong>condatest&lt;/strong> ，python版本为 &lt;strong>3.6&lt;/strong>&lt;/p>
&lt;p>​    然后进入 &lt;code>~/anaconda3/envs/condatest/lib/python3.6&lt;/code>&lt;/p>
&lt;p>​    编辑目录下的 &lt;code>site.py&lt;/code> 文件，将其中的 &lt;code>USER_SITE&lt;/code> 的值修改为 &lt;code>/home/zs/anaconda3/envs/condatest&lt;/code> ，注意这里路径里面的 &lt;code>zs&lt;/code> 是你的当前用户名， &lt;code>USER_BASE&lt;/code> 的值修改为 &lt;code>/home/zs/anaconda3/envs/condatest/lib/python3.6/site.py&lt;/code>，然后问题应该就解决了。&lt;/p>
&lt;p>​    因为如果环境问题的话，上面两个字符串都为空，猜测的原因是因为有同python版本的环境导致默认指向错误，此方式为修改conda中pip的指向。&lt;/p>
&lt;h3 id="参考链接">
参考链接
&lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.pythonf.cn/read/51713">更改conda环境中的pip包安装的默认路径&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>如何使用CenterNet做3D目标检测测试</title><link>https://zzsqwq.github.io/posts/164/</link><pubDate>Wed, 27 Jan 2021 11:50:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/164/</guid><description>&lt;h2 id="centernetobjects-as-points介绍">
CenterNet—Objects as Points介绍
&lt;a class="heading-link" href="#centernetobjects-as-points%e4%bb%8b%e7%bb%8d">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>​ &lt;a href="https://github.com/xingyizhou/CenterNet">CenterNet&lt;/a>是一个anchor-free的目标检测网络，与YOLOv3相比，精度有所提升，此外他不仅能够用于2D目标检测，也能够用于人体姿态识别，3D目标检测等···&lt;/p>
&lt;h3 id="安装centernet">
安装CenterNet
&lt;a class="heading-link" href="#%e5%ae%89%e8%a3%85centernet">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​ 其实安装&lt;a href="https://github.com/xingyizhou/CenterNet">CenterNet&lt;/a>的过程就是一个配置环境的问题，直接跟着官方给出的这里&lt;a href="https://github.com/xingyizhou/CenterNet/blob/master/readme/INSTALL.md">Install.md&lt;/a>配置一下即可，十分推荐使用Conda来管理环境，这里给出我的环境给大家参考一下：&lt;/p>
&lt;blockquote>
&lt;p>Ubuntu = 18.04 LTS&lt;/p>
&lt;p>pytorch = 1.2.0&lt;/p>
&lt;p>python = 3.6.12&lt;/p>
&lt;p>torchvision = 0.4.0&lt;/p>
&lt;p>cuda = 10.2&lt;/p>
&lt;/blockquote>
&lt;p>​ 需要注意的是：&lt;/p>
&lt;ul>
&lt;li>官方给出的教程里面使用的是 &lt;code>pytorch 0.4.1&lt;/code>，但是我个人在实测过程中遇到了一些问题，遂安装网上的教程更改为 &lt;code>pytorch 1.2.0&lt;/code>，并且需要把 &lt;code>${CenterNet_Root}/src/lib/models/networks/DCNv2&lt;/code> 中的这个&lt;a href="https://github.com/CharlesShang/DCNv2">DCNv2&lt;/a>网络更改为官方的最新版。&lt;/li>
&lt;li>这里使用的cuda版本最好和你的显卡匹配，之前因为显卡驱动的一些问题导致重装了电脑，根据我们学长学姐的建议，最好直接去cuda官网那边去下载deb包直接安装。&lt;/li>
&lt;li>遇到环境配置问题可以先去Google一下，一般作者都在CenterNet&amp;rsquo;s Issues中给出了回复，如果没有，可以发邮件给作者询问，当然也可以发消息/邮箱给我，大家一起探讨一下~&lt;/li>
&lt;/ul>
&lt;h3 id="运行centernet的demo">
运行CenterNet的demo
&lt;a class="heading-link" href="#%e8%bf%90%e8%a1%8ccenternet%e7%9a%84demo">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​ 想要运行demo，首先要去 &lt;a href="https://github.com/xingyizhou/CenterNet/blob/master/readme/MODEL_ZOO.md">Model zoo&lt;/a> 中下载一下我们需要使用的model，2D目标检测使用的是 &lt;a href="https://drive.google.com/open?id=1pl_-ael8wERdUREEnaIfqOV_VF2bEVRT">ctdet_coco_dla_2x.pth&lt;/a> ，人体姿态评估使用的是 &lt;a href="https://drive.google.com/open?id=1PO1Ax_GDtjiemEmDVD7oPWwqQkUu28PI">multi_pose_dla_3x.pth&lt;/a> ，下载后统一将他们放在CenterNet根目录中的model文件夹中。&lt;/p>
&lt;p>​ 然后使用conda切换到CenterNet的环境，在终端中运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">python demo.py ctdet --demo &lt;span style="color:#e6db74">${&lt;/span>CenterNet_Root&lt;span style="color:#e6db74">}&lt;/span>/images/17790319373_bd19b24cfc_k.jpg --load_model ../models/ctdet_coco_dla_2x.pth
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​ 这里需要注意的是 &lt;code>--demo&lt;/code> 后面的 &lt;code>${CenterNet_Root}/images/17790319373_bd19b24cfc_k.jpg&lt;/code> ，这里我使用的是官方给出的实例图片，它位于CenterNet根目录的images文件夹中，前面的 &lt;code>${CenterNet_Root} &lt;/code> 代表的是 CenterNet根目录，好比我的就位于 &lt;code>/home/zs/CenterNet&lt;/code> 。&lt;/p>
&lt;p>​ 如果不出意外的话效果应该如下图所示：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/01/2469782097.jpg" alt="2D目标检测效果">&lt;/p>
&lt;h3 id="运行centernet的3d目标检测">
运行CenterNet的3D目标检测
&lt;a class="heading-link" href="#%e8%bf%90%e8%a1%8ccenternet%e7%9a%843d%e7%9b%ae%e6%a0%87%e6%a3%80%e6%b5%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="配置数据集和模型">
配置数据集和模型
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae%e6%95%b0%e6%8d%ae%e9%9b%86%e5%92%8c%e6%a8%a1%e5%9e%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​ 我们可以直接参考官方的 &lt;code>DATA.md&lt;/code> 来配置我们的数据集。&lt;/p>
&lt;p>​ 然后到 &lt;a href="https://github.com/xingyizhou/CenterNet/blob/master/readme/MODEL_ZOO.md">Model zoo&lt;/a> 下载3D检测使用的模型 &lt;a href="https://drive.google.com/open?id=1znsM6E-aVTkATreDuUVxoU0ajL1az8rz">ddd_3dop.pth&lt;/a> 。&lt;/p>
&lt;p>​ 这里说一下遇到的几个坑：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先是配置数据集的过程中，我们需要配置的目录结构如图所示（官方给出的结构树有点模糊不清的感觉）&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── ImageSets_3dop
│   ├── test.txt
│   ├── train.txt
│   ├── trainval.txt
│   └── val.txt
├── ImageSets_subcnn
│   ├── test.txt
│   ├── train.txt
│   ├── trainval.txt
│   └── val.txt
└── training
├── calib
├── image_2
└── label_2
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>然后去到 &lt;code>${CenterNet_ROOT}/src/tools&lt;/code>目录下，运行 &lt;code>python convert_kitti_to_coco.py &lt;/code> 将 &lt;strong>kitti&lt;/strong> 数据集转换为 &lt;strong>coco&lt;/strong> 数据集的格式，不出意外应该会报错如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/01/3420056939.png" alt="转换时报错">&lt;/p>
&lt;p>这里的解决方案参考CenterNet中的一个Issue , &lt;a href="https://github.com/xingyizhou/CenterNet/issues/54">How to generate the image dir in kitti?&lt;/a> ，我们需要回到 &lt;code>data/kitti&lt;/code> 目录下手动创建一个 &lt;code>annotations&lt;/code> 文件夹，然后再回去运行转换程序。转换后目录结构如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── annotations
│   ├── kitti_3dop_train.json
│   ├── kitti_3dop_val.json
│   ├── kitti_subcnn_train.json
│   └── kitti_subcnn_val.json
├── ImageSets_3dop
│   ├── test.txt
│   ├── train.txt
│   ├── trainval.txt
│   └── val.txt
├── ImageSets_subcnn
│   ├── test.txt
│   ├── train.txt
│   ├── trainval.txt
│   └── val.txt
└── training
├── calib
├── image_2
└── label_2
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>然后根据官方的教程，我们需要创建一个images文件夹，然后将其 &lt;code>training/image_2&lt;/code> 链接到 &lt;code>images/trainval&lt;/code>，我在实际的测试中，发现此方法并不可行。参考CenterNet中的一个Issue: &lt;a href="https://github.com/xingyizhou/CenterNet/issues/575#">Evaluate kitti&amp;ndash;AttributeError: &amp;lsquo;NoneType&amp;rsquo; object has no attribute &amp;lsquo;shape&amp;rsquo;&lt;/a> ，其中 juanmed给出了解决方案：&lt;/p>
&lt;blockquote>
&lt;p>I had the same problem. For some reason the simlinks that are created during the data preparation process described in DATA.md are not working. So instead of creating simlinks I simply copied the actual data into the directories indicated in DATA.md. In other words the folders &lt;code>data/kitti/images/test&lt;/code> and &lt;code>data/kitti/images/trainval&lt;/code> do contain the actual images.&lt;/p>
&lt;/blockquote>
&lt;p>意思就是说，我们在 &lt;strong>images&lt;/strong> 中的图片必须都是真实的照片，而不能只是软链接过去。&lt;/p>
&lt;p>解决方案很显然，只需要在 &lt;strong>images&lt;/strong> 文件夹中建立一个 &lt;strong>trainval&lt;/strong> 文件夹，将 &lt;code>training/image_2&lt;/code> 中的所有图像都移入其中即可。如果有test的照片，那么也照规在 &lt;strong>images&lt;/strong> 新建一个 &lt;strong>test&lt;/strong> 文件夹，把测试的照片移入其中即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="运行测试程序">
运行测试程序
&lt;a class="heading-link" href="#%e8%bf%90%e8%a1%8c%e6%b5%8b%e8%af%95%e7%a8%8b%e5%ba%8f">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​ 接下来我们就可以根据官方给出的 &lt;a href="https://github.com/xingyizhou/CenterNet/blob/master/readme/GETTING_STARTED.md">GETTING_STARTED.md&lt;/a> 来进行我们的检测了。&lt;/p>
&lt;p>​ 即先编译一下评估工具，然后运行测试程序，但其实还是有一点点小问题。&lt;/p>
&lt;p>​ 具体问题可以参考 Issus: &lt;a href="https://github.com/xingyizhou/CenterNet/issues/55">kitti test: Couldn&amp;rsquo;t read: 006042.txt of ground truth.&lt;/a>&lt;/p>
&lt;p>​ Issue下 &lt;strong>lhyfst&lt;/strong> 已经给出了解决方案 ：&lt;/p>
&lt;blockquote>
&lt;p>The solution is quite simple.
&lt;code>cd data/kitti&lt;/code>
&lt;code>mv label_2 label_val&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>​ 更改后，运行成功~&lt;/p>
&lt;p>​ 我们应该可以在 &lt;code>${CenterNet_ROOT}/exp/ddd/3dop/results&lt;/code> 看到我们得到的结果，只不过运行得到的是点的坐标，而不是图像，如果需要图像的话可能还需要自己绘制一下。&lt;/p></description></item><item><title>Ubuntu18.04优化教程</title><link>https://zzsqwq.github.io/posts/141/</link><pubDate>Fri, 04 Dec 2020 01:39:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/141/</guid><description>&lt;h3 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    因为最近Ubuntu用的比较频繁，所以前一阵把Ubuntu16.04换成Ubuntu18.04了，并且囿于机械硬盘那启动速度，我忍痛割爱把我80G的固态硬盘分给了Ubuntu。&lt;/p>
&lt;p>​    后来，用着用着就觉得这个Ubuntu的原始界面确实不是特别的好看，&lt;del>配色偏基佬紫的感觉&lt;/del>。“工欲善其事，必先利其器“，我们只有将自己的工作环境布置的舒心一些才能有做下去的动力！所以我想给Ubuntu换一个看起来舒服点的界面，然后上网找教程乱七八糟的倒腾了一会，感觉换完以后完全不一样了，这个界面真的好看！！用起来也特别的舒心，感觉自己马上就要告别Windows投奔Linux的怀抱了。后续还有一些其他的优化，例如装QQ、微信、配置终端等，一并写在这里吧。&lt;/p>
&lt;h3 id="ubuntu界面的优化">
Ubuntu界面的优化
&lt;a class="heading-link" href="#ubuntu%e7%95%8c%e9%9d%a2%e7%9a%84%e4%bc%98%e5%8c%96">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="具体效果">
具体效果
&lt;a class="heading-link" href="#%e5%85%b7%e4%bd%93%e6%95%88%e6%9e%9c">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    先放几张效果图上来，是我改后的界面。大概就是这样(自我感觉挺好看的)，当然也有其他的主题可供选择。&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2020/12/171170690.png" alt="桌面风格">&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2020/12/3724154221.png" alt="文件夹风格">&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2020/12/3559388649.png" alt="效果图">&lt;/p>
&lt;h4 id="1安装gnome桌面环境主题配置工具">
1.安装GNOME桌面环境主题配置工具
&lt;a class="heading-link" href="#1%e5%ae%89%e8%a3%85gnome%e6%a1%8c%e9%9d%a2%e7%8e%af%e5%a2%83%e4%b8%bb%e9%a2%98%e9%85%8d%e7%bd%ae%e5%b7%a5%e5%85%b7">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    如果要改主题，那么首先要有一个利器，这里我用的&lt;code>Ubuntu18.04&lt;/code>，桌面环境为 &lt;code>GNOME 3.28.2&lt;/code> ，因为我目前接触的只有GNOME桌面环境的，Ubuntu18.04本来的桌面环境就是GNOME，但是Ubuntu16.04好像没有自带，但是可以安装，这里大家可以自行百度了解。&lt;/p>
&lt;p>​    然后我们已经有了GNOME桌面环境后，安装主题配置工具 &lt;code>GNOME Tweaks &lt;/code> ，在终端中输入如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo apt-get update
sudo apt-get install gnome-tweak-tool
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    我们先更新软件源，然后安装后直接打开他就行，在系统软件中中文大概叫 &lt;strong>优化&lt;/strong> 。&lt;/p>
&lt;h4 id="2拓展上述工具">
2.拓展上述工具
&lt;a class="heading-link" href="#2%e6%8b%93%e5%b1%95%e4%b8%8a%e8%bf%b0%e5%b7%a5%e5%85%b7">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    安装完上述工具后，我们可能发现了一个问题，就是外观那一栏目的Shell有一个感叹号，无法更改，这是因为我们没有安装拓展导致的。我们在终端中运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo apt-get install gnome-shell-extensions
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    然后重启一下电脑。再打开软件找到左侧的拓展，把 &lt;code>User themes&lt;/code> 那一栏目打开。切换回去就可以发现Shell那边的感叹号无了。&lt;/p>
&lt;h4 id="3寻找自己喜欢的主题">
3.寻找自己喜欢的主题
&lt;a class="heading-link" href="#3%e5%af%bb%e6%89%be%e8%87%aa%e5%b7%b1%e5%96%9c%e6%ac%a2%e7%9a%84%e4%b8%bb%e9%a2%98">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    这里我大家可以去这个网址去找自己喜欢的 &lt;a href="https://www.gnome-look.org">GNOME-LOOK.ORG&lt;/a>&lt;/p>
&lt;p>​    这里面包含了图标，主题这些，下面介绍一下如何安装。&lt;/p>
&lt;p>​    好比我们找到一个自己喜欢的主题，然后我们点击下面的 &lt;strong>Files&lt;/strong> ，可能会有很多文件，但是多是同一个主题的不同风格，好比暗风格和亮风格这样的，还有不同的版本的，我多是安装那个下载量最多的，我们下载那个对应的文件(多是tar.xz安装包)。&lt;/p>
&lt;p>​    对于主题的安装，我们只需要把解压出来的文件，移动或复制到 &lt;code>/usr/share/themes/&lt;/code> 目录下，如果是光标\图标的安装，那么就把文件夹移动到 &lt;code>/usr/share/icons&lt;/code> 目录下。&lt;/p>
&lt;p>​    然后我们回到 &lt;code>GNOME Tweaks&lt;/code> 软件中就可以发现，我们已经可以在主题\图标\光标\Shell清单中找到我们移动到文件夹中的文件了，然后选择就可以切换了。这里需要注意的，很多主题都是自带Shell的，你下了一个主题，那么你可以在Shell和主题这两个栏目中都找到他们，是一个配套的。&lt;/p>
&lt;h4 id="4一些后续的调整">
4.一些后续的调整
&lt;a class="heading-link" href="#4%e4%b8%80%e4%ba%9b%e5%90%8e%e7%bb%ad%e7%9a%84%e8%b0%83%e6%95%b4">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    我们后续可以改变左边收藏夹的位置，我觉得放在左边有一丢丢的丑，所以我选择把它放在的下面。&lt;/p>
&lt;p>​    我们去Ubuntu软件中搜索 Dash to dock，然后安装这个拓展，然后打开 &lt;code>GNOME Tweaks&lt;/code> 软件在拓展中找到他就可以随心所欲的调我们的收藏夹的位置了。&lt;/p>
&lt;h4 id="5我自己的配置">
5.我自己的配置
&lt;a class="heading-link" href="#5%e6%88%91%e8%87%aa%e5%b7%b1%e7%9a%84%e9%85%8d%e7%bd%ae">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;pre tabindex="0">&lt;code>theme&amp;amp;shell Canta-light-compact
icons 01-McMojave-circle
&lt;/code>&lt;/pre>&lt;h4 id="6界面修改的参考链接">
6.界面修改的参考链接
&lt;a class="heading-link" href="#6%e7%95%8c%e9%9d%a2%e4%bf%ae%e6%94%b9%e7%9a%84%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://blog.csdn.net/lishanleilixin/article/details/80453565">Ubuntu18.04美化主题(mac主题)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/qq_42527676/article/details/91356154">Ubuntu18.04美化主题(完整版)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gnome-look.org">GNOME-LOOK.ORG&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/4fb5e4657695">30个非常不错的Ubuntu主题供你选择&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/maodexuedinge_/article/details/106652323">ubuntu18.04更换鼠标游标主题&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="配置终端">
配置终端
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae%e7%bb%88%e7%ab%af">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="前言-1">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80-1">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    唔，终端本来用起来感觉也还行，感觉终端就是linux的灵魂，啥都能干。&lt;/p>
&lt;p>​    但是听说有更好用的终端，现在ubuntu普遍用的好像都是bash，但是好像还有zsh，fish这样的，他们可以有一些代码补全，功能更强，可拓展性也高，大家都zsh和fish哪个好用一直争执不停，但是我发现ROS对 &lt;code>zsh&lt;/code> 支持的很好，但是对 &lt;code>fish&lt;/code> 的支持有点拉胯，考虑到以后可能ros会用的比较多，因此我选择使用zsh。效果图如下&lt;/p>
&lt;p>​ &lt;img src="https://www.zzsqwq.cn/usr/uploads/2020/12/3375893306.png" alt="终端效果图">&lt;/p>
&lt;h4 id="1下载zsh">
1.下载zsh
&lt;a class="heading-link" href="#1%e4%b8%8b%e8%bd%bdzsh">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    直接在终端执行下列语句&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo apt-get update
sudo apt-get install zsh
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2安装oh-my-zsh">
2.安装oh my zsh
&lt;a class="heading-link" href="#2%e5%ae%89%e8%a3%85oh-my-zsh">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    zsh其实配置起来很麻烦，这一点相比与fish不太行，fish下载下来就已经具备了常用的功能，例如代码补全等。&lt;/p>
&lt;p>​    但是我们有先人铺路，在Github上有一个开源的项目 &lt;a href="https://github.com/ohmyzsh/ohmyzsh">oh my zsh&lt;/a>，就是专门用来导入这个zsh的配置的，&lt;/p>
&lt;p>​    我们直接运行如下代码，就可以直接安装了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">wget sh -c &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    然后我们可以通过在终端中输入zsh来切换到zsh，也可以通过输入bash切换回去&lt;/p>
&lt;p>​    我们也可以通过如下命令来切换默认的终端系统，首先查找一下zsh的目录，然后切换过去。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">whereis zsh
chsh -s zsh路径
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3配置插件">
3.配置插件
&lt;a class="heading-link" href="#3%e9%85%8d%e7%bd%ae%e6%8f%92%e4%bb%b6">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    在zsh里面有许多好用的插件，在这里推荐两个&lt;/p>
&lt;ul>
&lt;li>自动补全 &lt;a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions&lt;/a>&lt;/li>
&lt;li>语法高亮 &lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>​    关于下载的方法，在这两个项目里面都说了，我们只需要把下载的文件放到 &lt;code>~/.oh-my-zsh/plugins&lt;/code> 目录中，然后编辑 &lt;code>~/.zshrc&lt;/code> 在 &lt;code>plugin = (插件1 插件2)&lt;/code> 写上你所要启用的插件名称即可。&lt;/p>
&lt;p>​    然后在终端中 &lt;code>source ~/.zshrc&lt;/code> 更新一下配置即可。&lt;/p>
&lt;h4 id="4配置主题">
4.配置主题
&lt;a class="heading-link" href="#4%e9%85%8d%e7%bd%ae%e4%b8%bb%e9%a2%98">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    zsh有许多可用的主题选择，我自己最喜欢的一个叫 &lt;a href="https://github.com/sindresorhus/pure">pure&lt;/a>&lt;/p>
&lt;p>​    我觉得害挺好看的，效果就跟上图一样吧。&lt;/p>
&lt;p>​    安装方法就是先把pure下载到一个路径，然后编辑 &lt;code>~/.zshrc&lt;/code>&lt;/p>
&lt;p>​    在下面加入&lt;/p>
&lt;pre tabindex="0">&lt;code>fpath+=安装路径
autoload -U promptinit; promptinit
prompt pure
&lt;/code>&lt;/pre>&lt;p>​    然后我们&lt;code>source&lt;/code>一下&lt;code>.zshrc&lt;/code> 就可以使用了。&lt;/p>
&lt;p>​    但是如果是使用zsh本来自带的一些主题，和这个有些差别，只需要下载好主题然后放到 &lt;code>~/.oh-my-zsh/themes&lt;/code> ，然后在 &lt;code>.zshrc &lt;/code>中启用即可。&lt;/p>
&lt;h4 id="5参考链接">
5.参考链接
&lt;a class="heading-link" href="#5%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/rainy0426/articles/13163167.html">linux终端shell:zsh配置和使用&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/shengzhu1/article/details/55272234/">zsh和oh-my-zsh的一些好用的主题和插件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/yuqiongran/article/details/52280522">linux安装oh my zsh终端及简单使用方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/497b4af1334d">配置oh-my-zsh主题&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/a94e2c59f244">Zsh 常用插件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://linux.cn/article-11426-1.html">给Zsh添加主题和插件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/61447507">常用的oh-my-zsh插件&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>还有一些其他的配置有时间再写吧……咕咕咕&lt;/p></description></item></channel></rss>