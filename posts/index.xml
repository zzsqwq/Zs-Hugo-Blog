<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Zs's Blog</title><link>https://zzsqwq.github.io/posts/</link><description>Recent content in Posts on Zs's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 01 Dec 2021 20:12:00 +0000</lastBuildDate><atom:link href="https://zzsqwq.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Markdown 编辑器推荐</title><link>https://zzsqwq.github.io/posts/220/</link><pubDate>Wed, 01 Dec 2021 20:12:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/220/</guid><description>&lt;h1 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>近期著名 Markdown 编辑器 &lt;a href="https://typora.io/">Typora&lt;/a> 宣布收费了，起初感觉很难受，后来感慨之余也觉得算是合理，毕竟 Typora 用起来感觉是真的很良心，也在考虑是否买一份支持一下。&lt;/p>
&lt;p>虽说左右分屏的设计可能更符合 Markdown 的初衷，但是像 Typora 这种所见即所得（WYSIWYG） 的书写体验确实是感觉习惯了就回不去了。&lt;/p>
&lt;p>因此近期也搜集了 Markdown 编辑器作为 Typora 的替代品，在这里给大家分享一下。&lt;/p>
&lt;p>&lt;strong>特别声明，下面的分享多是我日常体验中的一些感受，可能不够客观，比较片面，大家可以自己使用体验一下！&lt;/strong>&lt;/p>
&lt;h1 id="一obsidian">
一、Obsidian
&lt;a class="heading-link" href="#%e4%b8%80obsidian">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="界面预览">
界面预览
&lt;a class="heading-link" href="#%e7%95%8c%e9%9d%a2%e9%a2%84%e8%a7%88">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/12/1150718291.png" alt="Obsidian">&lt;/p>
&lt;h2 id="特点">
特点
&lt;a class="heading-link" href="#%e7%89%b9%e7%82%b9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>具有文档的双向链接&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持行级和块级公式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>官网可以购买 &lt;a href="https://obsidian.md/sync">sync&lt;/a> 套餐保持各个客户端同步&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以购买 &lt;a href="https://obsidian.md/publish">publish&lt;/a> 服务将 markdown 发布为排版美观的界面&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>有丰富的插件&lt;/strong>，例如日历、待办清单、Git同步等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有Linux，Windows，&lt;strong>iPad&lt;/strong>等多平台支持。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用体验">
使用体验
&lt;a class="heading-link" href="#%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://obsidian.md/">Obsidian&lt;/a> 中文为黑曜石。我觉得它的图标很好看。&lt;/p>
&lt;p>在我使用的一段时间内，他给我的感觉是，功能十分丰富的一个 Markdown 文件管理工具。如果你购买了他的同步服务，那你可以很轻松的在各平台同步你的 Markdown 文件夹，并且基于他强大的插件，可以很完成很多 Markdown 文件份外的事，例如待办清单、日历等等。&lt;/p>
&lt;p>他虽没有所见即所得的模式，但是依靠其一款第三方插件，可以达成类似的效果，不过还是用起来不如 Typora 这种顺手。同时，&lt;strong>它的各端同步如果不开启官方的服务，用起来还是挺麻烦的&lt;/strong>，经过我的一阵倒腾，我总结了如下几个方案：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用第三方Git管理插件，可以定时推送文件夹中的内容到仓库，这样可以完成 linux 与 Windwos 平台的同步，只需要在某一方推送某一方拉取即可。而 Windows 平台与 iPad 平台的同步，可以借助 Apple 的 iCloud，Windows上有对应的客户端，这也是 Obsidian 官方支持的。不过在我使用的过程中我发现，这样异常的麻烦，使用 Git 来管理很可能会产生冲突，导致需要手动处理冲突，久而久之就会觉得很烦。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用自建云盘如 &lt;strong>NextCloud + Obsidian&lt;/strong>，或者 Seafile + Obsidian。 这个是我觉得目前非常可行的一个方案，最近我也有在尝试 NextCloud，它的多端同步做的非常不错，依靠此可以在各个平台同步文件夹，加上 Obsidian 强悍的能力，是不错的组合！&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="二mark-text">
二、Mark Text
&lt;a class="heading-link" href="#%e4%ba%8cmark-text">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="界面预览-1">
界面预览
&lt;a class="heading-link" href="#%e7%95%8c%e9%9d%a2%e9%a2%84%e8%a7%88-1">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/12/3145024348.png" alt="Mark Text">&lt;/p>
&lt;h2 id="特点-1">
特点
&lt;a class="heading-link" href="#%e7%89%b9%e7%82%b9-1">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>开源！！&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所见即所得（WYSIWYG）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持行级和块级公式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>界面简洁且美观&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Windows，Linux 等多平台支持，不支持 iPad&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：&lt;strong>目前仍不支持中文&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用体验-1">
使用体验
&lt;a class="heading-link" href="#%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c-1">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://marktext.app/">Mark Text&lt;/a> 是 Github 上一个开源的&lt;a href="https://github.com/marktext/marktext">项目&lt;/a>&lt;/p>
&lt;p>个人认为他是在对标 Typora 的一个软件，有着和 Typora 非常相近的写作手感，并且界面简洁美观，我个人真的是非常喜欢，也是我目前在用的一款编辑器，本篇文章就是使用此编辑器书写。&lt;/p>
&lt;p>它的可配置程度虽然没有 Typora 那么高，但是平常的使用已经足够。不过值得说道的是，他不支持导出 Word 文档，而且对用公式的补全做的不够完美。&lt;/p>
&lt;p>可能还是有一些 bug 的，软件的最后一次 release 还是在 2020 年了（&lt;del>说明非常的稳定啊哈哈&lt;/del>）。不过贵在他是个开源的软件，有很多大佬愿意为之奉献，期待后续的更新！&lt;/p>
&lt;h1 id="三zettlr">
三、Zettlr
&lt;a class="heading-link" href="#%e4%b8%89zettlr">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="界面预览-2">
界面预览
&lt;a class="heading-link" href="#%e7%95%8c%e9%9d%a2%e9%a2%84%e8%a7%88-2">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/12/3408881163.png" alt="Zettlr">&lt;/p>
&lt;h2 id="特点-2">
特点
&lt;a class="heading-link" href="#%e7%89%b9%e7%82%b9-2">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>开源！！&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可导出的格式非常的多，如 Latex、Word 等都可以。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以说是所见即所得，不过和 Typora 的理念略有不同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持 Windows、Linux 等平台。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持语言的种类要比 Mark Text 多很多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缺点&lt;/strong>：自认为界面没有 Mark Text 和 Typora 这种好看。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用体验-2">
使用体验
&lt;a class="heading-link" href="#%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c-2">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>上面的有个特点我描述的是 &lt;strong>“可以说是所见即所得，不过和 Typora 的理念略有不同”&lt;/strong>&lt;/p>
&lt;p>我感觉&lt;strong>它的所见即所得不是纯正的所见即所得&lt;/strong>，还是会保留部分源代码的元素在上面。不过他支持导出的格式要比 Mark Text 多不少。&lt;/p>
&lt;p>同时他也支持任务清单这种小功能，但是我认为它没有 Mark Text 美观和好用。使用的也不算太多，就不过多的评价了~&lt;/p>
&lt;h1 id="四vscode--插件">
四、VSCode + 插件
&lt;a class="heading-link" href="#%e5%9b%9bvscode--%e6%8f%92%e4%bb%b6">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="界面预览-3">
界面预览
&lt;a class="heading-link" href="#%e7%95%8c%e9%9d%a2%e9%a2%84%e8%a7%88-3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/12/1511072141.png" alt="其中一个插件（vscode all markdown）">&lt;/p>
&lt;h2 id="特点-3">
特点
&lt;a class="heading-link" href="#%e7%89%b9%e7%82%b9-3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>基于 VSCode 这个&lt;del>宇宙第一编辑器&lt;/del>，不需要装别的软件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可选的插件很多，不差这个一个&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多是基于 &lt;a href="https://github.com/Vanessa219/vditor">vditor&lt;/a>，对 vditor 有钟爱的同学不要错过！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所见即所得&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用体验-3">
使用体验
&lt;a class="heading-link" href="#%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c-3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>因为我自己没有深度体验这个东西，但是我认为功能还是很强大的~&lt;/p>
&lt;p>虽然说，他可能没有一个单独的软件配置项那么多，但是贵在他只是一个集成于 VSCode 的插件，不要安装一个那么大体量的软件。&lt;/p>
&lt;p>同时可以很快的在代码与文档之间切换，这应该也算是一个优势了。&lt;/p>
&lt;h1 id="后记">
后记
&lt;a class="heading-link" href="#%e5%90%8e%e8%ae%b0">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>本来想把这个博文做成一个各类软件推荐文的，但是写着写着发现光是 Markdown 类的已经可以写很多了，为了防止篇幅过长，就单做一个 Markdown 编辑器的推荐文吧~&lt;/p>
&lt;p>如果大家有更好的 Markdown 编辑器推荐，欢迎在下面留言！&lt;/p></description></item><item><title>2021版小新Pro14 Ubuntu 20.04 配置指南</title><link>https://zzsqwq.github.io/posts/215/</link><pubDate>Tue, 02 Nov 2021 01:16:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/215/</guid><description>&lt;h1 id="2021版小新pro14-ubuntu-2004-配置指南">
2021版小新Pro14 Ubuntu 20.04 配置指南
&lt;a class="heading-link" href="#2021%e7%89%88%e5%b0%8f%e6%96%b0pro14-ubuntu-2004-%e9%85%8d%e7%bd%ae%e6%8c%87%e5%8d%97">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>苦于沉重游戏本的迫害，新买了一台小新Pro14 2021款，上手感觉还挺不错的。如下是配置：&lt;/p>
&lt;ul>
&lt;li>CPU：酷睿 i5-11300H&lt;/li>
&lt;li>显卡：集成显卡 Intel 锐炬Iris Xe&lt;/li>
&lt;li>内存：16G&lt;/li>
&lt;li>外存：512 SSD&lt;/li>
&lt;li>屏幕：分辨率 2880x1800、400nits、100%sRGB&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/11/3138090261.png" alt="电脑配置信息">&lt;/p>
&lt;p>这里需要注意的是，不同时间出的小新Pro14配置是不太一样的，所以我这里列了一下配置。主要区别在于有一部分是2.2K分辨率+MX450显卡，而我这个是2.8K分辨率+锐炬Iris Xe显卡。&lt;/p>
&lt;p>为了工作的需要，要装一个Ubuntu，先是装了之前用过的 Ubuntu 18.04，安装后发现触摸板无法使用，一系列探索后无果，在朋友的推荐下，还是决定安装 Ubuntu 20.04 试一下，踩了一些坑，在这里记录一下。&lt;/p>
&lt;h2 id="问题列表">
问题列表
&lt;a class="heading-link" href="#%e9%97%ae%e9%a2%98%e5%88%97%e8%a1%a8">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>如果你遇到了以下问题，那么这篇文章的方法可能会对你有益处：&lt;/p>
&lt;h3 id="ubuntu-1804-相关">
Ubuntu 18.04 相关
&lt;a class="heading-link" href="#ubuntu-1804-%e7%9b%b8%e5%85%b3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Ubuntu 18.04 无法使用触摸板&lt;/li>
&lt;li>Ubuntu 18.04 无法使用内置键盘&lt;/li>
&lt;li>Ubuntu 18.04 无法调节亮&lt;/li>
&lt;li>Ubuntu 18.04 查看GPU发现是llvm，而不是Iris Xe&lt;/li>
&lt;/ol>
&lt;h3 id="ubuntu-2004-相关">
Ubuntu 20.04 相关
&lt;a class="heading-link" href="#ubuntu-2004-%e7%9b%b8%e5%85%b3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Ubuntu 20.04 进入后屏幕花屏、黑屏&lt;/li>
&lt;li>Ubuntu 20.04 查看GPU发现是llvm，而不是Iris Xe&lt;/li>
&lt;/ol>
&lt;h2 id="现在达成的效果">
现在达成的效果
&lt;a class="heading-link" href="#%e7%8e%b0%e5%9c%a8%e8%be%be%e6%88%90%e7%9a%84%e6%95%88%e6%9e%9c">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Ubuntu 20.04 能够正常使用，触摸板以及外界屏幕，亮度调节均无问题。&lt;/p>
&lt;p>开机时也能够使用键盘。&lt;/p>
&lt;p>但是开机登录界面还是存在花屏、闪屏的问题，我通过自动登录解决。BIOS界面仍旧会闪屏。&lt;/p>
&lt;h2 id="安装-ubuntu-1804-的问题">
安装 Ubuntu 18.04 的问题
&lt;a class="heading-link" href="#%e5%ae%89%e8%a3%85-ubuntu-1804-%e7%9a%84%e9%97%ae%e9%a2%98">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>首先安装Ubuntu 18.04 还是比较顺利，没有什么坑。&lt;/p>
&lt;p>安装的话就是按流程来一遍——压缩卷、进入BIOS关闭安全启动模式&lt;code>(这里网上有部分同学说也需要关闭 Intel Platform Trust Technology 、但是我不关闭也是可以的)&lt;/code>、然后Try Ubuntu看一下效果&lt;code>（这里Try Ubuntu我没法使用鼠标，不过安装的时候可以）&lt;/code>、开始安装。&lt;/p>
&lt;p>安装过程一般没啥问题，进入系统后我们就会发现一些问题，首先是你的**触摸板用不了，然后键盘也用不了。**再就是屏幕没法调节亮度（这个是小问题我觉得，好像也可以通过安装插件解决，大家可以自行搜索。）&lt;/p>
&lt;p>经过查询资料，这里有同学已经提出很好的解决方案：https://zhuanlan.zhihu.com/p/322377515&lt;/p>
&lt;p>简而言之，键盘用不了需要在 grub 启动项中加入 i8042.dumbkbd 参数，然后运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo update-grub2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可在每次启动后保证键盘可用。&lt;/p>
&lt;p>关于没法使用触摸板和调节亮度，办法就是升级内核，据说是内核升级到5.9.8以上可用，Ubuntu 18.04内置版本是5.4.0.84好像是，但是我在更新后会花屏、黑屏等来回鬼畜，试了好多四五个内核依旧不管用，我猜想是因为我是2.8K的屏幕而网上的教程多是基于2.2K屏幕的，锐炬显卡对于高分辨率的屏幕支持并没有那么优秀。&lt;/p>
&lt;p>于是一直被这个问题折磨，搜了很多的教程也没有解决办法，最后决定换Ubuntu 20.04 尝试一下，之前一直觉得系统版本是个不可逾越的鸿沟，但是随着实践的越来越多，发现很多版本不兼容的问题都是有可解决办法的，因此也下定决心尝试一下未曾试过的 20.04。&lt;/p>
&lt;h2 id="安装ubuntu-2004-的问题">
安装Ubuntu 20.04 的问题
&lt;a class="heading-link" href="#%e5%ae%89%e8%a3%85ubuntu-2004-%e7%9a%84%e9%97%ae%e9%a2%98">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>首先是关于安装的问题&lt;/p>
&lt;p>在安装Ubuntu 18.04 的时候只有四个选项，应该是一个 Try Ubuntu、一个直接安装，一个高级模式，一个进BIOS&lt;/p>
&lt;p>而安装Ubuntu 20.04 的时候却有五个选项，分别是Ubuntu、Ubuntu&lt;code>(safe graphics)&lt;/code>、OEM install&lt;code>(for manufacturers)&lt;/code>、还有就是一个是高级模式、一个是进BIOS&lt;/p>
&lt;p>说一下三个安装方式的区别&lt;/p>
&lt;p>第一个模式与第二个模式的区别就是，第二个模式对于grub启动项目中添加了一个 &lt;code>nomodeset&lt;/code> 选项，那么这个选项是做什么的？以下是他的解释：&lt;/p>
&lt;blockquote>
&lt;p>The newest kernels have moved the video mode setting into the kernel. So all the programming of the hardware specific clock rates and registers on the video card happen in the kernel rather than in the X driver when the X server starts.. This makes it possible to have high resolution nice looking splash (boot) screens and flicker free transitions from boot splash to login screen. Unfortunately, on some cards this doesn’t work properly and you end up with a black screen. Adding the nomodeset parameter instructs the kernel to not load video drivers and use BIOS modes instead until X is loaded.&lt;/p>
&lt;/blockquote>
&lt;p>大概意思是在最新的内核中，已经能够在BIOS引导阶段启用显卡，这样做的目的是很好的适应高分辨率屏，但是很遗憾的是某些显卡并不能很好的适配，通过 &lt;code>nomodeset&lt;/code> 参数可以防止以不支持的显卡驱动视频流。&lt;/p>
&lt;p>很遗憾，锐炬显卡刚好没有被适配，所以选第一个选项&lt;code>(Ubuntu)&lt;/code>来安装也会屏幕一闪一闪的，因此我们安装选择Ubuntu&lt;code>(safe graphics)&lt;/code>选项来进行安装然后流程是一样的，蛮顺利。&lt;/p>
&lt;p>这里装完就没有触摸板的问题，屏幕亮度调节也没有问题。不过键盘依旧有问题，可以根据上面描述进行更改。&lt;/p>
&lt;p>然后更鬼畜的问题来了，只要这么一搞，从BIOS引导阶段开始，就会一直闪屏，尤其是输入密码进行登录的时候，会卡个好长时间，几乎无法使用，不过很有意思的是，只要外接屏幕，外接的屏幕显示不会有问题。&lt;/p>
&lt;p>因此求助于搜索引擎，因为怀疑是显卡的问题，所以搜索了关键词 &lt;code>Ubuntu Iris Xe&lt;/code>，找到了以下两个比较有用的答案：&lt;/p>
&lt;p>StackOverflow：&lt;a href="https://askubuntu.com/questions/1299067/ubuntu-20-04-no-driver-loaded-for-intel-iris-xe-graphics">Ubuntu 20.04 no driver loaded for Intel Iris Xe Graphics&lt;/a>&lt;/p>
&lt;p>Intel：&lt;a href="https://dgpu-docs.intel.com/devices/iris-xe-max-graphics/index.html">Intel Iris Xe MAX Graphics with Linux&lt;/a>&lt;/p>
&lt;p>这两个帖子都说了一个问题吧，就是如何在 Ubuntu 20.04 上更好的使用锐炬显卡&lt;/p>
&lt;p>这个问题实质解决的是没有在Ubuntu 20.04 上启动起来显卡，所以你会在你的 Ubuntu-&amp;gt;Settings-&amp;gt;About 页面看到的是 llvm 有关的字眼，而不是上面我截图所示的 &lt;code>Mesa Intel® Xe Graphics (TGL GT2)&lt;/code>。&lt;/p>
&lt;p>解决这个问题比较关键的步骤是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo apt update
sudo apt install linux-oem-20.04
sudo reboot
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样开机再启动应该就会正常启动显卡了，这个方式在Ubuntu18.04是否奏效我没有实验过，可能可以安装对应的 &lt;code>linux-oem-18.04&lt;/code> 包。&lt;/p>
&lt;p>在 Intel 官方的教程中，还添加了 grub 启动项等，我并没有发现他们的实际作用，在他后续的测试中我也没有达到期待的效果，因此没有继续尝试，如果有同学跟着文档做成功了，可以一起来讨论一下。&lt;/p>
&lt;p>&lt;strong>但是！！！&lt;/strong>&lt;/p>
&lt;p>安装完成后，我还是会花屏和黑屏，问题依旧没有解决。我突发奇想，考虑到我外接屏幕没有问题，而自带的屏幕有问题，**因为外接屏是 1920x1080 而内置屏幕是 2880x1800，我联想到会不会是高分辨率屏幕的问题，所以尝试着把外接屏的显示比例调成了 150%&lt;code>(需要开启 Fractional Scaling)&lt;/code>，没想到歪打正着，居然好了，看起来也更加的顺眼，比例也更加协调。**具体的内部原因还不是很清楚。&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/11/3113030601.png" alt="比例配置信息">&lt;/p>
&lt;p>但是还是有一个小瑕疵，就是在BIOS引导阶段与输入密码登录的界面，我仍旧是会花屏、闪屏，我考虑到这是还没有初始化屏幕设置的问题，尝试搜索了修改BIOS比例、提前初始化login界面的分辨率，依旧没有找到比较好的解决办法，&lt;/p>
&lt;p>因此最后只好启动自动登录来跳过登录界面，这样就&lt;strong>看上去算是一个完好的系统&lt;/strong>了QAQ。。&lt;/p>
&lt;p>这里给出一些可能有价值的资料，大家可以自行查阅&lt;/p>
&lt;p>&lt;a href="https://askubuntu.com/questions/1041677/how-to-change-the-login-screen-resolution-in-ubuntu-18-04">How to change the login screen resolution in Ubuntu 18.04&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://askubuntu.com/questions/1252172/custom-resolution-ubuntu-20-04">Custom Resolution Ubuntu 20.04&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://askubuntu.com/questions/1091778/how-can-i-change-the-resolution-of-the-grub-menu">How can I change the resolution of the GRUB menu?&lt;/a>&lt;/p>
&lt;p>根据上述第三个教程，我修改了 GRUB 的显示分辨率为 1920x1080，还是会闪屏。&lt;/p>
&lt;p>如果有大佬有想法或者解决了，欢迎留言一起探讨。&lt;/p>
&lt;h2 id="后记与感想">
后记与感想
&lt;a class="heading-link" href="#%e5%90%8e%e8%ae%b0%e4%b8%8e%e6%84%9f%e6%83%b3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>折腾了一下午加一晚上，终于把系统整的能用了，不过又要重新配置各种软件，还是挺麻烦的。&lt;/p>
&lt;p>不过尝试新鲜事物、好比Windows11、最新款的电脑，还是挺高血压的，需要应付各种Bug，这可能也是一种平衡？hhhh，想要尝试新的事物、走在前沿、就必须要有付出。&lt;/p>
&lt;p>此外，发现查英文的资料要比中文靠谱的多，尤其是这种比较新的问题、要多去StackOverflow和AskUbuntu等论坛和官网查看，有奇效。&lt;/p>
&lt;h2 id="参考资料">
参考资料
&lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/322377515">联想小新pro14安装Ubuntu20.04&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/1299067/ubuntu-20-04-no-driver-loaded-for-intel-iris-xe-graphics">Ubuntu 20.04 no driver loaded for Intel Iris Xe Graphics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dgpu-docs.intel.com/devices/iris-xe-max-graphics/index.html">Intel Iris Xe MAX Graphics with Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/1041677/how-to-change-the-login-screen-resolution-in-ubuntu-18-04">How to change the login screen resolution in Ubuntu 18.04&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/1252172/custom-resolution-ubuntu-20-04">Custom Resolution Ubuntu 20.04&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/1091778/how-can-i-change-the-resolution-of-the-grub-menu">How can I change the resolution of the GRUB menu?&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>纯终端环境代理配置教程</title><link>https://zzsqwq.github.io/posts/212/</link><pubDate>Mon, 13 Sep 2021 18:15:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/212/</guid><description>&lt;h1 id="纯终端环境代理配置教程">
纯终端环境代理配置教程
&lt;a class="heading-link" href="#%e7%ba%af%e7%bb%88%e7%ab%af%e7%8e%af%e5%a2%83%e4%bb%a3%e7%90%86%e9%85%8d%e7%bd%ae%e6%95%99%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>我们在很多情况下，可能会在云服务器或是其他纯终端环境（例如树莓派服务器等），或者一些没有屏幕的情况下，只能 &lt;strong>ssh&lt;/strong> 链接到服务器上进行一些操作。&lt;/p>
&lt;p>这些时候，如果我们想要克隆一个 Github 的仓库，或者下载一些镜像源中没有的文件，简直是难如登天，100kb/s 的速度都很罕见，因此在这种环境下配一个代理还是十分必要的！&lt;/p>
&lt;p>我们常在 Linux 上使用的 GUI 代理软件如 &lt;strong>Qv2ray、Clash&lt;/strong> 这些就没法用了。因此需要考虑如何在纯终端环境中配置代理的问题，这篇教程就是为解决此问题而写的。&lt;/p>
&lt;h2 id="教程">
教程
&lt;a class="heading-link" href="#%e6%95%99%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>此教程搭配的是常用的 &lt;strong>v2ray-core + v2rayA&lt;/strong> ，这里的 &lt;strong>v2rayA&lt;/strong> 是一个网页端的代理管理工具，其中支持 &lt;strong>v2ray、Xray、SS、SSR、Trojan&lt;/strong> 等多种协议。&lt;/p>
&lt;h3 id="一安装-v2ray-core">
一、安装 v2ray-core
&lt;a class="heading-link" href="#%e4%b8%80%e5%ae%89%e8%a3%85-v2ray-core">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>首先是需要安装 &lt;strong>v2ray-core&lt;/strong> ，这里我们使用开源的项目 &lt;a href="https://github.com/v2fly/fhs-install-v2ray">v2fly/fhs-install-v2ray&lt;/a> 进行安装，它是一个脚本，可以直接运行完成 &lt;strong>v2ray&lt;/strong> 的安装，安装的文件组织结构符合 &lt;a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">Filesystem Hierarchy Standard&lt;/a> ，十分方便简洁，很赞！&lt;/p>
&lt;p>具体步骤如下：&lt;/p>
&lt;h4 id="下载-fhs-install-v2ray-源码">
下载 fhs-install-v2ray 源码
&lt;a class="heading-link" href="#%e4%b8%8b%e8%bd%bd-fhs-install-v2ray-%e6%ba%90%e7%a0%81">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>首先我们因为 Github 克隆很慢，可以先在自己的主机上克隆或者以 &lt;strong>zip&lt;/strong> 包形式下载源码&lt;/p>
&lt;h4 id="将源码上传到远端">
将源码上传到远端
&lt;a class="heading-link" href="#%e5%b0%86%e6%ba%90%e7%a0%81%e4%b8%8a%e4%bc%a0%e5%88%b0%e8%bf%9c%e7%ab%af">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>键入下列代码，通过 &lt;code>scp&lt;/code> 将解压后的代码文件夹目录上传到远端服务器的根目录（如果是树莓派的话可以连接同一局域网进行），注意这里的 &lt;strong>path/to/fhs-install-v2ray&lt;/strong> 指的是本地文件夹的路径&lt;/p>
&lt;p>&lt;code>scp -r path/to/fhs-install-v2ray username@hostname:~&lt;/code>&lt;/p>
&lt;h4 id="下载-v2ray-core-源码">
下载 v2ray-core 源码
&lt;a class="heading-link" href="#%e4%b8%8b%e8%bd%bd-v2ray-core-%e6%ba%90%e7%a0%81">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>此脚本可以全自动安装，即自动检测本机类型是 Ubuntu 还是其他的版本，然后从远端仓库下载最新的 &lt;strong>v2ray&lt;/strong> 进行安装，不过因为没有代理，这一步还是十分缓慢，因此我们可以进行本地安装。&lt;/p>
&lt;p>首先，我们去到 &lt;strong>v2ray-core&lt;/strong> 的官方仓库的发布站 -&amp;gt; &lt;a href="https://github.com/v2fly/v2ray-core/releases">Releases · v2fly/v2ray-core &lt;/a>，在这里可以下载最新版本的的 &lt;strong>v2ray-core&lt;/strong>，不过需要注意的是，需要自己辨别版本，如使用的是 &lt;strong>arm&lt;/strong> 还是 &lt;strong>x64_86&lt;/strong> 等，下载后是一个 &lt;strong>zip&lt;/strong> 压缩包，我们直接通过 &lt;code>scp&lt;/code> 上传到远端服务器根目录&lt;/p>
&lt;p>&lt;code>scp path/to/v2ray-linux-64.zip username@hostname:~&lt;/code>&lt;/p>
&lt;h4 id="连接远程服务器">
连接远程服务器
&lt;a class="heading-link" href="#%e8%bf%9e%e6%8e%a5%e8%bf%9c%e7%a8%8b%e6%9c%8d%e5%8a%a1%e5%99%a8">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>接下来我们通过 &lt;strong>ssh&lt;/strong> 连接到远程服务器&lt;/p>
&lt;p>&lt;code>ssh username@hostname&lt;/code>&lt;/p>
&lt;h4 id="完成安装">
完成安装
&lt;a class="heading-link" href="#%e5%ae%8c%e6%88%90%e5%ae%89%e8%a3%85">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>然后进入根目录后，进入 &lt;code>fhs-install-v2ray&lt;/code> 文件夹，会发现里面有两个脚本，一个是 &lt;code>install-dat-release.sh&lt;/code> 另一个是 &lt;code>install-release.sh&lt;/code> ，前者是带有路由规则的，后者是不带有路由规则的。我试用后发现 &lt;code>install-dat-release.sh&lt;/code> 没有办法本地安装，而后者可以，同时因为 &lt;strong>v2rayA&lt;/strong> 中会自带路由规则，因此完全没有必要用前者，我们可以直接使用 &lt;code>install-release.sh&lt;/code> 进行安装。&lt;/p>
&lt;p>执行 &lt;code>sudo chmod +x install-release.sh&lt;/code> ，添加执行权限&lt;/p>
&lt;p>执行 &lt;code>sudo ./install-release.sh --local ../v2ray-linux-64.zip&lt;/code>&lt;/p>
&lt;p>这里的 local 参数代表是本地安装，解析后面的文件，&lt;strong>注意这里是直接 zip 包&lt;/strong>，不需要解压。同时，这里的路径也是需要和你的下载的文件地址对应。&lt;/p>
&lt;p>不出意外的话，瞬间就可以安装完成。截止到这里，&lt;strong>v2ray-core&lt;/strong> 已经安装成功。需要注意的是，这里不需要执行 &lt;code>sudo systemctl enable v2ray&lt;/code> ，因为后续的 &lt;strong>v2rayA&lt;/strong> 不依赖此服务。&lt;/p>
&lt;p>安装的文件路径如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">installed: /usr/local/bin/v2ray &lt;span style="color:#75715e">#v2ray 主程序地址&lt;/span>
installed: /usr/local/bin/v2ctl &lt;span style="color:#75715e">#v2ray 控制程序&lt;/span>
installed: /usr/local/share/v2ray/geoip.dat &lt;span style="color:#75715e"># 可选，路由信息&lt;/span>
installed: /usr/local/share/v2ray/geosite.dat &lt;span style="color:#75715e">#可选，路由信息&lt;/span>
installed: /usr/local/etc/v2ray/config.json &lt;span style="color:#75715e">#代理配置文件&lt;/span>
installed: /var/log/v2ray/ &lt;span style="color:#75715e">#下面三个都是log文件&lt;/span>
installed: /var/log/v2ray/access.log
installed: /var/log/v2ray/error.log
installed: /etc/systemd/system/v2ray.service &lt;span style="color:#75715e">#v2ray 服务配置信息&lt;/span>
installed: /etc/systemd/system/v2ray@.service
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果有报错的话，可以看对应的 &lt;code>error&lt;/code> 报错去 &lt;a href="https://github.com/v2fly/fhs-install-v2ray">v2fly/fhs-install-v2ray&lt;/a> 官方仓库 Issue 处查看。&lt;/p>
&lt;h3 id="二安装-v2raya">
二、安装 v2rayA
&lt;a class="heading-link" href="#%e4%ba%8c%e5%ae%89%e8%a3%85-v2raya">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>首先，同样的是，为了防止 Github 下载太慢，我们也可以去到官方仓库的发布站 -&amp;gt; &lt;a href="https://github.com/v2rayA/v2rayA/releases">Releases · v2rayA/v2rayA &lt;/a> ，下载对应系统版本的安装包，然后通过 &lt;code>scp&lt;/code> 上传到远端。&lt;/p>
&lt;p>这里以 &lt;strong>x64_86 版本的 Ubuntu 18.04.5 LTS&lt;/strong> 举例，我们直接下载 &lt;code>installer_debian_x64_v1.5.2.deb&lt;/code> 到本地，然后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">scp path/to/installer_debian_x64_v1.5.2.deb username@hostname:~
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将文件上传到远端。&lt;/p>
&lt;p>然后 &lt;strong>ssh&lt;/strong> 到服务器执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo dpkg -i installer_debian_x64_v1.5.2.deb
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装成功后依次执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e"># 启动 v2raya&lt;/span>
sudo systemctl start v2raya
&lt;span style="color:#75715e"># 开机自启 v2raya&lt;/span>
sudo systemctl enable v2raya
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就成功开启了 &lt;code>v2rayA&lt;/code>，我们访问 &lt;code>ip:2017&lt;/code> ，前面是你云服务器的公网 &lt;code>ip&lt;/code> 或者是自建服务器的局域网 &lt;code>ip&lt;/code> ，我们就可以访问到对应的服务，界面大致如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/09/2395630589.png" alt="v2rayA界面">&lt;/p>
&lt;p>首次进入时会让你设置账号和密码，用于后续的管理。还会引导你导入链接，在导入链接后，就可以点击上方的第三栏，进行连接、查看或分享对应的代理了！&lt;/p>
&lt;p>说一下我现在用的设置，点击右上角设置，&lt;strong>透明代理和规则端口的分流模式&lt;/strong>设置为&lt;strong>大陆白名单&lt;/strong>，然后实现方式我用的是 &lt;strong>redirect&lt;/strong>，每隔 24h 更新依次代理，左下角设置的地址与端口我用的是默认的，如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/09/2537498828.png" alt="地址与端口设置">&lt;/p>
&lt;p>这样我们就可以愉快的上网了！！可以 &lt;strong>ssh&lt;/strong> 到服务器试一下 &lt;code>wget google.com&lt;/code>，正常结果如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>❯ wget google.com
--2021-09-13 18:11:04-- http://google.com/
Resolving google.com (google.com)... 93.46.8.90
Connecting to google.com (google.com)|93.46.8.90|:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
Location: http://www.google.com/ [following]
--2021-09-13 18:11:05-- http://www.google.com/
Resolving www.google.com (www.google.com)... 108.160.165.141, 2001::453f:b213
Connecting to www.google.com (www.google.com)|108.160.165.141|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: ‘index.html’
index.html [ &amp;lt;=&amp;gt; ] 13.42K 59.8KB/s in 0.2s
2021-09-13 18:11:06 (59.8 KB/s) - ‘index.html’ saved [13740]
&lt;/code>&lt;/pre>&lt;p>这代表着，我们下载到了 &lt;strong>google.com&lt;/strong> 页面的源码，即可以连通 &lt;strong>Google&lt;/strong> 服务。&lt;/p>
&lt;h3 id="一些存在的小问题">
一些存在的小问题
&lt;a class="heading-link" href="#%e4%b8%80%e4%ba%9b%e5%ad%98%e5%9c%a8%e7%9a%84%e5%b0%8f%e9%97%ae%e9%a2%98">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>我现在还没有搞清楚透明代理的作用，如果不开的话，我通过 &lt;code>proxychains&lt;/code> 配置对应的端口，发现并不能上网，但是如果我直接开了透明代理，不需要 &lt;code>proxychains&lt;/code> 也可以直接在终端使用代理，感觉是全局代理，不过不影响使用。&lt;/p>
&lt;p>具体的一些细节还没有搞清楚，后续学习了再回来补更。&lt;/p></description></item><item><title>Redmi AC2100刷写OpenWrt教程</title><link>https://zzsqwq.github.io/posts/209/</link><pubDate>Sun, 01 Aug 2021 21:48:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/209/</guid><description>&lt;h1 id="redmi-ac2100刷写openwrt教程">
Redmi AC2100刷写Openwrt教程
&lt;a class="heading-link" href="#redmi-ac2100%e5%88%b7%e5%86%99openwrt%e6%95%99%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>此教程的书写基于 Redmi AC2100 路由器，并不保证其他路由器可用。&lt;/p>
&lt;p>推荐使用的 Host 主机为 Windows 10/11 系统，当然，Linux 也可以，不过某些地方用的软件有差异，但是用 Linux 的人肯定不简单，就不用我多做说明了。&lt;/p>
&lt;p>理论上对其他型号路由器也通用，不过需要改一下固件的型号。本教程参考了多位前辈的文档与教程，其实虽说是教程，更像是一个整合，文章最后会给出过程中的参考链接，在此对他们一并感谢！&lt;/p>
&lt;h2 id="教程">
教程
&lt;a class="heading-link" href="#%e6%95%99%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;h3 id="一刷写官方固件">
一、刷写官方固件
&lt;a class="heading-link" href="#%e4%b8%80%e5%88%b7%e5%86%99%e5%ae%98%e6%96%b9%e5%9b%ba%e4%bb%b6">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="从官方固件刷入其他版本的官方固件">
从官方固件刷入其他版本的官方固件
&lt;a class="heading-link" href="#%e4%bb%8e%e5%ae%98%e6%96%b9%e5%9b%ba%e4%bb%b6%e5%88%b7%e5%85%a5%e5%85%b6%e4%bb%96%e7%89%88%e6%9c%ac%e7%9a%84%e5%ae%98%e6%96%b9%e5%9b%ba%e4%bb%b6">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>你可能会疑问，既然已经是官方固件了，为什么还需要刷写官方固件？&lt;/p>
&lt;p>对于此教程，这一步可能非必要。但是如果你是基于 &lt;strong>telnet&lt;/strong> 来对固件进行刷写，那么可能需要重刷官方固件，截止目前这个节点 &lt;strong>2021.8.1&lt;/strong> 官方最新的固件会出现在开启 &lt;strong>telnet&lt;/strong> 时卡 &lt;strong>shell&lt;/strong> 的情况。&lt;/p>
&lt;p>具体表现为无法在弹出的窗口中粘贴文本，并且不会有后续的反应。 这时候可以刷回官方原固件，常见比较稳定的有 &lt;code>2.0.7&lt;/code>， &lt;code>2.0.376&lt;/code>， &lt;code>1.0.14&lt;/code> 啥的，这个大家可以自己尝试一下~ 不过，此教程不是基于 &lt;strong>telnet&lt;/strong> 的，对于 &lt;strong>Redmi AC2100&lt;/strong> 我也不推荐使用 &lt;strong>telnet&lt;/strong> 这个方法，因为经过我的尝试发现，他的成功率比较低，而且异常繁琐！&lt;/p>
&lt;p>&lt;strong>官方固件的刷写过程如下：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>首先在 &lt;a href="http://openwrt.ink:8666/%E5%AE%98%E6%96%B9%E5%B7%A5%E5%85%B7%E5%8C%85/">此处&lt;/a> 下载修复工具包与ROM包&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后接通路由器电源，用网线将路由器的 &lt;code>LAN&lt;/code> 口与电脑连接。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开小米路由器修复工具，上传本地对应的刷机包。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择与路由器 &lt;code>LAN&lt;/code> 口相连的网卡（这里如果不清楚选哪一个，建议在网络设置中把其他的网卡都禁用掉）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后断开路由器电源，用牙签或者其他的按住 reset 键后，接通电源，直到路由器橙灯闪烁时松开 reset 键。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>等待到蓝灯闪烁时，即可访问网关或者 &lt;code>miwifi.com&lt;/code> 来设置路由器，固件刷写成功。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="从breed刷写官方固件">
从Breed刷写官方固件
&lt;a class="heading-link" href="#%e4%bb%8ebreed%e5%88%b7%e5%86%99%e5%ae%98%e6%96%b9%e5%9b%ba%e4%bb%b6">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>&lt;strong>Breed&lt;/strong> 是一个由 &lt;a href="https://www.right.com.cn/forum/space-uid-200302.html">hackpascal&lt;/a> 大神自写的与 &lt;strong>U-Boot&lt;/strong> 同级的 Bootloader。&lt;/p>
&lt;p>每次我们刷写固件不会刷写此部分，我们通过 &lt;code>Reset&lt;/code> 键重置后，此部分不会被重置。像下面（这里因为我已经刷好了固件，不想 Reset 掉，因此用的其他大佬的截图，因此这里的型号不是 &lt;strong>Redmi AC2100&lt;/strong>）：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/08/3364003385.png" alt="Breed的首页">&lt;/p>
&lt;p>可以看到上图有一个固件更新部分，点开后详细信息如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/08/402582447.png" alt="固件更新部分图示">&lt;/p>
&lt;p>可以看到上图有包含三个部分的刷写，Bootloader、固件、EEPROM这三个部分，我们如果想要刷会官方的这两部分都要刷。&lt;/p>
&lt;p>平时我们说的 openwrt，padavan 等都是固件部分，breed 是 Bootloader 部分。我们如果要完全刷回官方的部件，需要在这里的 Bootloader 部分刷写官方的 Bootloader，然后按照上述官方的方法来刷写整体后面的固件！**我测试时如果 Bootloader 部分是 breed，那么无法直接通过上面的方法进行重置。**官方的 Bootloader 可以在下方链接找到：&lt;/p>
&lt;p>&lt;a href="http://openwrt.ink:88/upload/2020/12/bootloader-redmi-ac2100-928443369e734b72b9611377b94598bb.bin">红米 AC2100 官方 Bootloader&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://openwrt.ink:88/upload/2020/12/bootloader-xiaomi-ac2100-2ad34eb9357e4760948f797999b7e294.bin">小米 AC2100 官方 Bootloader&lt;/a>&lt;/p>
&lt;h3 id="二从官方部件刷写-breed">
二、从官方部件刷写 Breed
&lt;a class="heading-link" href="#%e4%ba%8c%e4%bb%8e%e5%ae%98%e6%96%b9%e9%83%a8%e4%bb%b6%e5%88%b7%e5%86%99-breed">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="为什么需要刷-breed">
为什么需要刷 Breed？
&lt;a class="heading-link" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e5%88%b7-breed">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>我们注意到在 &lt;strong>Breed&lt;/strong> 过程中，&lt;strong>固件更新&lt;/strong> 部分也可以刷写固件，根据以往大家的经验来说，固件最好从 &lt;strong>Breed&lt;/strong> 部分刷写还是最保险的。&lt;/p>
&lt;p>此外，&lt;strong>Breed&lt;/strong> 可以使你方便的更换其他的固件，因为 &lt;strong>Reset&lt;/strong> 不会重置 &lt;strong>Breed&lt;/strong> 而会重置固件，因此如果你想把 &lt;strong>Openwrt&lt;/strong> 换成 &lt;strong>Padavan&lt;/strong>，那么只需要 &lt;strong>Reset&lt;/strong> 一下，在 &lt;strong>Breed&lt;/strong> 重刷一下固件就可以了！&lt;/p>
&lt;h4 id="刷写流程">
刷写流程
&lt;a class="heading-link" href="#%e5%88%b7%e5%86%99%e6%b5%81%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;h5 id="打开路由器-ssh">
打开路由器 ssh
&lt;a class="heading-link" href="#%e6%89%93%e5%bc%80%e8%b7%af%e7%94%b1%e5%99%a8-ssh">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>首先我们用网线将路由器 &lt;code>LAN&lt;/code> 口与电脑连接&lt;/p>
&lt;p>在 &lt;strong>Linux&lt;/strong> 用 &lt;code>ifconfig&lt;/code> 或者在 &lt;strong>Windows&lt;/strong> 中使用 &lt;code>ipconfig&lt;/code> 来查看路由器分发的 &lt;code>ip&lt;/code> 。&lt;/p>
&lt;p>好比如果是 &lt;code>192.168.31.x &lt;/code> 那么我们就访问 &lt;code>192.168.31.1&lt;/code> ，或者可以尝试直接访问 &lt;code>miwifi.com&lt;/code> ，会进入到设置路由器的管理页面，我们填写一系列配置，然后登录。&lt;/p>
&lt;p>登录后，查看地址栏，一般地址如下，这里需要注意，我地址中的 &lt;code>192.168.31.1 &lt;/code> 是我访问的地址为此，如果你那里 &lt;code>ip&lt;/code> 不是这样，那么将下面所有的 &lt;code>192.168.31.1&lt;/code> 替换成你当中对应的 &lt;code>ip&lt;/code>：&lt;/p>
&lt;pre tabindex="0">&lt;code>http://192.168.31.1/cgi-bin/luci/;stok=075a9192918557c27cdbcae2175281d9/web/home#router
&lt;/code>&lt;/pre>&lt;p>这里我们注意 &lt;code>stok= &lt;/code> 到 &lt;code>/web&lt;/code> 这一段中间的码值，好比设其为 &lt;code>KEY&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>KEY = 075a9192918557c27cdbcae2175281d9
&lt;/code>&lt;/pre>&lt;p>然后我们在地址栏输入如下地址并回车，地址中 &lt;code>${KEY}&lt;/code> 的意思是这里就填入上面 &lt;code>KEY&lt;/code> 对应的数值：&lt;/p>
&lt;pre tabindex="0">&lt;code>http://192.168.31.1/cgi-bin/luci/;stok=${KEY}/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;amp;user_id=longdike&amp;amp;ssid=-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20's%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg'%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B
&lt;/code>&lt;/pre>&lt;p>这样就打开了路由器的 &lt;strong>ssh&lt;/strong> ，我们接下来在地址栏打开：&lt;/p>
&lt;pre tabindex="0">&lt;code>http://192.168.31.1/cgi-bin/luci/;stok=${KEY}/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;amp;user_id=longdike&amp;amp;ssid=-h%3B%20echo%20-e%20'admin%5Cnadmin'%20%7C%20passwd%20root%3B
&lt;/code>&lt;/pre>&lt;p>这就将路由器的 &lt;strong>ssh&lt;/strong> 密码设置为 &lt;code>admin&lt;/code> 。&lt;/p>
&lt;h5 id="刷写-breed">
刷写 breed
&lt;a class="heading-link" href="#%e5%88%b7%e5%86%99-breed">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>首先我们下载一下适用于 &lt;strong>Redmi AC2100&lt;/strong> 的 &lt;strong>Breed&lt;/strong>，&lt;a href="https://breed.hackpascal.net/breed-mt7621-xiaomi-r3g.bin">点此下载&lt;/a>&lt;/p>
&lt;p>我们在 &lt;strong>Windows&lt;/strong> 左下侧搜索框中搜索 &lt;code>cmd&lt;/code> 然后打开。&lt;/p>
&lt;p>输入&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ssh root@192.168.31.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后输入 &lt;code>admin&lt;/code> ，回车。&lt;/p>
&lt;p>不出意外的话，我们就成功使用 &lt;code>ssh&lt;/code> 登录了路由器中的系统。&lt;/p>
&lt;p>然后我们按 &lt;code>Ctrl + D&lt;/code> 退出登录&lt;/p>
&lt;p>输入&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">scp /path-to-breed root@192.168.31.1:/tmp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 &lt;code>/path-to-breed&lt;/code> 代表的是上面下载的 &lt;strong>Breed&lt;/strong> 的路径，例如 &lt;code>D:\Downloads\breed-mt7621-xiaomi-r3g.bin&lt;/code> ，这条命令即将下载的 &lt;strong>Breed&lt;/strong> 传输到了路由器的 &lt;code>/tmp&lt;/code> 目录中。&lt;/p>
&lt;p>接下来我们按上述过程重新登录路由器后，输入&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">cd /tmp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>进入路由器中的 &lt;code>/tmp&lt;/code> 目录，接下来运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">mtd -r write breed-mt7621-xiaomi-r3g.bin Bootloader
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样我们就成功将 &lt;strong>Breed&lt;/strong> 刷写到了路由器中！&lt;/p>
&lt;p>我们断掉路由器电源，重启一下，访问 &lt;code>192.168.1.1&lt;/code> 即可打开 &lt;strong>Breed&lt;/strong> 控制台。&lt;/p>
&lt;h3 id="三从-breed-刷写固件">
三、从 breed 刷写固件
&lt;a class="heading-link" href="#%e4%b8%89%e4%bb%8e-breed-%e5%88%b7%e5%86%99%e5%9b%ba%e4%bb%b6">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>首先是下载我们需要的固件，在后面我会给出一系列现阶段尝试过的固件，并给出说明，大家可以自己选择合适自己的固件。&lt;/p>
&lt;p>这部分很简单，我们只需要下载我们想要刷写的固件，进入 breed 控制台，点击固件更新，在固件那部分点击后面的 &lt;strong>浏览&lt;/strong> ，上传我们想要刷写的固件，点击 &lt;strong>上传&lt;/strong> ，验证后会弹出新的窗口，点击 &lt;strong>刷写&lt;/strong> 即可！&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/08/402582447.png" alt="在固件部分点击浏览选择固件后上传">&lt;/p>
&lt;h3 id="四配置-openwrt-固件">
四、配置 Openwrt 固件
&lt;a class="heading-link" href="#%e5%9b%9b%e9%85%8d%e7%bd%ae-openwrt-%e5%9b%ba%e4%bb%b6">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>因为我自己在用 Openwrt ，所以这里只讲一下配置 Openwrt 的过程。&lt;/p>
&lt;p>说明一下，这里我使用的是 &lt;code>small_5&lt;/code> 大佬的 Openwrt 固件，其他的固件可能界面有些差别，但是其实大同小异，可以类比着来做。&lt;/p>
&lt;p>我用的固件网关为 &lt;code>10.0.0.1&lt;/code> ，这个一般都是固件作者自己设定的，比较简单地方式是将路由器 &lt;code>LAN&lt;/code> 口与电脑连接，查看自己的 &lt;code>ip&lt;/code> 地址，如果是 &lt;code>10.0.0.x&lt;/code> 的话就是 &lt;code>10.0.0.1&lt;/code> ，这里涉及到一个网关的概念，大家有兴趣的可以自行查找资料查看。&lt;/p>
&lt;h4 id="配置-ipv4-网络">
配置 IPv4 网络
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae-ipv4-%e7%bd%91%e7%bb%9c">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>首先将网线与路由器的 &lt;code>WAN&lt;/code> 口连接。&lt;/p>
&lt;p>现在网络无论是学校还是家里一般都是用的 &lt;code>PPPOE&lt;/code> 拨号上网。&lt;/p>
&lt;p>我们打开 &lt;strong>网络&lt;/strong> 中的 &lt;strong>接口&lt;/strong> ，然后编辑 &lt;code>WAN&lt;/code> 口信息，将协议切换为 &lt;code>PPPoE&lt;/code> ，填写用户名和密码，其他一般不用管，直接保存即可。&lt;/p>
&lt;p>可选：这里可以选择编辑 &lt;code>LAN&lt;/code> 口信息，这里涉及的是局域网的信息。&lt;/p>
&lt;p>好比你现在 &lt;code>ip&lt;/code> 是 &lt;code>10.0.0.x&lt;/code> ，可以注意到协议为静态地址，然后 &lt;code>IPv4&lt;/code> 地址为 &lt;code>10.0.0.1/24&lt;/code> 这样的，我们如果是改成 &lt;code>192.168.1.1&lt;/code> ，那么后续我们的地址一般就是形如 &lt;code>192.168.1.x&lt;/code> 了。&lt;/p>
&lt;p>因为局域网地址一般都是这样，我就也这么改了，不过这里改不改都行。&lt;strong>但是需要注意的是！我们如果改掉了，我们后续访问管理界面就不是 &lt;code>10.0.0.1&lt;/code> 了，而是 &lt;code>192.168.1.1&lt;/code> ！&lt;/strong>&lt;/p>
&lt;h4 id="配置科学上网">
配置科学上网
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae%e7%a7%91%e5%ad%a6%e4%b8%8a%e7%bd%91">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>说实话，我学习刷机就是为了这个，估计大多数人也是。&lt;/p>
&lt;p>不过现在 &lt;strong>Openwrt&lt;/strong> 中科学上网插件的种类繁多，如 &lt;code>Passwall&lt;/code> 、&lt;code>SSR+&lt;/code> 、&lt;code>Overwall&lt;/code> 等。这三个我都用过，用起来都差别不大，界面也是差不多的。此固件自带的 &lt;code>Overwall&lt;/code> 如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/08/3556294066.png" alt="服务器节点订阅与管理部分">&lt;/p>
&lt;p>我们只需要在 &lt;strong>订阅URL&lt;/strong> 部分填入我们的订阅链接，然后依次点击 &lt;strong>更新订阅设置&lt;/strong> 以及 &lt;strong>更新所有订阅服务器节点&lt;/strong> ，然后可以发现下方出现了我们的节点，点击 &lt;strong>使用&lt;/strong> ，然后 &lt;strong>保存及应用&lt;/strong> ，就完成了。&lt;/p>
&lt;p>这里可以在页面调节一下设置，好比可以设置 &lt;strong>仅常用端口走代理&lt;/strong> 等。&lt;/p>
&lt;h4 id="配置ddns">
配置DDNS
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%aeddns">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;h5 id="什么是ddns">
什么是DDNS?
&lt;a class="heading-link" href="#%e4%bb%80%e4%b9%88%e6%98%afddns">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>首先说一下什么是动态DNS，又叫 DDNS。下面是来自维基百科的解释：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>动态DNS&lt;/strong>（英语：&lt;strong>Dynamic DNS&lt;/strong>，简称&lt;strong>DDNS&lt;/strong>）是&lt;a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">域名系统&lt;/a>（DNS）中的一种自动更新&lt;a href="https://zh.wikipedia.org/wiki/%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">名称服务器&lt;/a>（Name server）内容的技术。根据互联网的域名订立规则，域名必须跟从固定的IP地址。但动态DNS系统为动态网域提供一个固定的&lt;a href="https://zh.wikipedia.org/wiki/%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">名称服务器&lt;/a>（Name server），透过即时更新，使外界用户能够连上动态用户的网址。&lt;/p>
&lt;p>这个术语被用来描述两种不同的概念。在&lt;a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF">互联网&lt;/a>的管理层面来说，动态DNS更新是指创建一个DNS系统，能够自动更新传统的DNS记录，而不需要手动编辑。这个机制在RFC 2136中被解释，利用&lt;a href="https://zh.wikipedia.org/w/index.php?title=TSIG&amp;amp;action=edit&amp;amp;redlink=1">TSIG&lt;/a>机制来提供安全性。&lt;/p>
&lt;p>在客户端来说，动态DNS提供了一个轻量化机制，让本地DNS数据库可以即时的更新。它能把&lt;a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%AF%E7%B6%B2">互联网&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D">域名&lt;/a>指往一个可能经常改变的&lt;a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80">IP地址&lt;/a>，让经常改变位置及配置的设备，能够持续性的更新IP地址。令互联网上的外界用户可以透过一个大家知道的域名，连接到一个可能经常动态改变&lt;a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80">IP地址&lt;/a>的机器。其中一个常用的用途是在使用动态IP地址连线（例如在每次接通连线就会被分配一个新的IP地址的拨号连线，或是偶尔会被ISP变更IP地址的DSL连线等）的电脑上运行&lt;a href="https://zh.wikipedia.org/wiki/%E4%BC%BA%E6%9C%8D%E5%99%A8">服务器&lt;/a>软件。&lt;/p>
&lt;p>若要实现动态DNS，就需要将网域的“最大缓存时间”设置在一个非常短的时间（一般为数分钟）。此举可避免外界用户在缓存中保留了旧的IP地址，并且使每个新连线被创建时都会经过Name Server获取该机器的新地址。&lt;/p>
&lt;p>各种机构都有大规模地提供动态DNS的服务。他们会利用&lt;a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93">数据库&lt;/a>存储用户当前的IP地址，并会对用户提供更新当前IP地址的方法。当一些&amp;quot;客户&amp;quot;程序被安装了之后，会在后台运行并每隔数分钟检查电脑的IP地址。当发现其IP地址有所变更，程序便会提交一个更新IP地址的请求至动态DNS的服务器。有很多&lt;a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器&lt;/a>和其他网络设备也在其&lt;a href="https://zh.wikipedia.org/wiki/%E9%9F%8C%E9%AB%94">固件&lt;/a>中包含了上述的功能。&lt;/p>
&lt;/blockquote>
&lt;p>举个例子：&lt;/p>
&lt;p>好比我们一个公网 &lt;code>ip&lt;/code> 对于外网可见，我们想要在公司设置一下路由器，但是我们不知道路由器的准确 &lt;code>ip&lt;/code> 。那么我们可以通过一个域名解析为这个 &lt;code>ip&lt;/code> ，好比域名为 &lt;code>ddns.zzsqwq.cn&lt;/code> ，我们只需要访问 &lt;code>ddns.zzsqwq.cn&lt;/code> 即可访问管理页面或者 &lt;code>ssh&lt;/code> 过去对路由器更改。&lt;/p>
&lt;p>但是这个公网 &lt;code>ip&lt;/code> 可能随时是变的，我们不能绑定死，那么即可利用动态 DNS 来监视 &lt;code>ip&lt;/code> 的变化，如果此 &lt;code>ip&lt;/code> 变化了，我们即向供应商发送更新 &lt;code>ip&lt;/code> 的请求，以保证我们每次访问 &lt;code>ddns.zzsqwq.cn&lt;/code> 都可以解析到正确的 &lt;code>ip&lt;/code> 。&lt;/p>
&lt;h5 id="如何设置ddns">
如何设置DDNS?
&lt;a class="heading-link" href="#%e5%a6%82%e4%bd%95%e8%ae%be%e7%bd%aeddns">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>简单讲一下如何配置我所用固件的 &lt;strong>ddns&lt;/strong>，可能对其他固件并不通用，仅供参考！&lt;/p>
&lt;p>大多数的 &lt;strong>Openwrt&lt;/strong> 固件中都带了 &lt;strong>ddns&lt;/strong>，我这里用的固件里面 &lt;strong>ddns&lt;/strong> 做了一个集成，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/08/2555058433.png" alt="DDNS首页图示">&lt;/p>
&lt;p>我们首先需要注册一个域名，大家如果有做博客或者搭建服务器啥的，应该都有域名。&lt;/p>
&lt;p>没有的话可以尝试去阿里云或者腾讯云买一个，我这里是在腾讯云买的，因此使用的是腾讯的 &lt;code>dndpod&lt;/code> 的解析服务，首先在 &lt;code>dnspod&lt;/code> 中注册一个帐号，点击右上角头像，选择 &lt;code>API密钥&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/08/3424062604.png" alt="选择API密钥">&lt;/p>
&lt;p>选择 &lt;code>DNSPod Token&lt;/code> ，点击 &lt;strong>创建密钥&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/08/2622435560.png" alt="创建密钥">&lt;/p>
&lt;p>然后记下密钥的 &lt;code>ID&lt;/code> 与 &lt;code>Token&lt;/code> ，在 ddns 设置页面选择编辑对应的 ddns 服务，或者新建一个。&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/08/996774304.png" alt="IPv4 DDNS设置图示">&lt;/p>
&lt;p>如上图所示，首先选择 DDNS 服务商，如 &lt;code>aliyun&lt;/code> 、&lt;code>dnspod&lt;/code> 等，然后查询主机名与域名如上图所示填写，注意域名那里要用 &lt;code>@&lt;/code> ，这可能是这个插件的特性，用其他固件的插件可能是 &lt;code>.&lt;/code> 。&lt;/p>
&lt;p>然后用户名与密码处填写刚才生成密钥的 &lt;code>ID&lt;/code> 与 &lt;code>Token&lt;/code> ，保存即可。&lt;/p>
&lt;p>设置 &lt;strong>IPv6&lt;/strong> 的 &lt;strong>ddns&lt;/strong> 同理，设置完成后重启一下 &lt;strong>ddns&lt;/strong> 才会生效。&lt;/p>
&lt;h4 id="解析内网ip">
解析内网IP
&lt;a class="heading-link" href="#%e8%a7%a3%e6%9e%90%e5%86%85%e7%bd%91ip">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>之前配置完路由器，总是无法访问我们基地主机的服务。&lt;/p>
&lt;p>后来查询了一下，才发现因为基地主机是内网 &lt;code>ip&lt;/code> ，Openwrt 一般用的 &lt;strong>dns&lt;/strong> 解析服务为 &lt;code>dnsmasq&lt;/code> ，他会有一个 &lt;code>重绑定保护&lt;/code> ，这个是为了防止 &lt;a href="https://zh.wikipedia.org/wiki/DNS%E9%87%8D%E6%96%B0%E7%BB%91%E5%AE%9A%E6%94%BB%E5%87%BB">DNS重绑定攻击&lt;/a> 而开启的，大家有兴趣的可以自行搜索。会自动屏蔽解析出的内网 &lt;code>ip&lt;/code> ，因此我们只要将其关掉，即可解析内网 &lt;code>ip&lt;/code> 。&lt;/p>
&lt;p>当然，更保险的方法是通过 &lt;code>hosts&lt;/code> 或者其他方式指定。&lt;/p>
&lt;p>这里附上 &lt;code>DNS重绑定攻击&lt;/code> 的维基百科解释：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>DNS重新绑定&lt;/strong>是&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8">计算机攻击&lt;/a>的一种形式。 在这种攻击中，恶意&lt;a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5">网页&lt;/a>会导致访问者运行&lt;a href="https://zh.wikipedia.org/wiki/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81">客户端脚本&lt;/a>，攻击网络上其他地方的计算机。 从理论上讲，&lt;a href="https://zh.wikipedia.org/wiki/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5">同源策略&lt;/a>可防止发生这种情况：客户端脚本只能访问为脚本提供服务的同一主机上的内容。 比较&lt;a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D">域名&lt;/a>是实施此策略的重要部分，因此DNS重新绑定通过滥用域名系统（DNS）来绕过这种保护。&lt;/p>
&lt;p>这种攻击可以通过让受害者的网络浏览器访问专用IP地址的机器并将结果返回给攻击者来破坏专用网络。 它也可以用于使用受害者机器发送垃圾邮件，分布式拒绝服务攻击或其他恶意活动。&lt;/p>
&lt;/blockquote>
&lt;h2 id="总结">
总结
&lt;a class="heading-link" href="#%e6%80%bb%e7%bb%93">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>本教程主要涉及了刷写原固件，breed，openwrt 的方案。&lt;/p>
&lt;p>还介绍了一下关于 网络接口、科学上网、动态dns 等方面的设置方式。&lt;/p>
&lt;p>容易注意到本教程未涉及 &lt;code>IPv6&lt;/code> 的设置，可能是因为学校网络的原因，我设置 &lt;code>IPv6&lt;/code> 久久没有成功，试了很多方法与固件，都没有成功。后来咨询了一下固件作者，猜测可能是因为学校网络的策略问题。分发 &lt;code>IPv6-PD&lt;/code> 有问题，这个还没有查证，后续有时间可以再试一试。&lt;/p>
&lt;p>教程说的比较罗嗦，可能也比较详细。大家如果还有什么地方不懂，欢迎留言询问！记得留下您的邮箱，这样可以及时的收到回复提示。&lt;/p>
&lt;p>特别鸣谢各位制作固件与插件的 &lt;a href="https://www.right.com.cn/forum/space-uid-530002.html">hfy&lt;/a>，&lt;a href="https://www.right.com.cn/forum/space-uid-357532.html">small_5&lt;/a>，&lt;a href="https://www.right.com.cn/forum/space-uid-200302.html">hackpascal&lt;/a>，&lt;a href="https://github.com/hanwckf">hanwckf&lt;/a> 等大佬！&lt;/p>
&lt;p>下面给出一些现阶段比较好用的固件，都是我搜索筛选过的，评价看起来都不错~&lt;/p>
&lt;h2 id="固件总览">
固件总览
&lt;a class="heading-link" href="#%e5%9b%ba%e4%bb%b6%e6%80%bb%e8%a7%88">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;h3 id="openwrt">
Openwrt
&lt;a class="heading-link" href="#openwrt">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>small_5发布的固件，功能基本是最完备的版本，比较稳定，插件都自己加工过，并且 &lt;code>Overwall&lt;/code> 是独家的科学上网插件，不过基本没有什么教程，可以去群里问群主，人比较活跃（但是脾气有点暴躁）：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>恩山发布地址：https://www.right.com.cn/forum/thread-4751462-1-1.html&lt;/p>
&lt;/li>
&lt;li>
&lt;p>固件下载链接：https://drive.google.com/drive/folders/1evev5nZet17WGozpvHg08SnIjuc-8Lq_&lt;/p>
&lt;p>一些插件链接：https://drive.google.com/drive/folders/1MPQrvubdGDwpIyyA4ZfO-aCXqIQLkFkb&lt;/p>
&lt;/li>
&lt;li>
&lt;p>公告 tg 群：https://t.me/Firmware_Openwrt&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>基于 Github Action 的自编译插件，不过近期不怎么维护了，用起来还不错，之前因为用不了 IPv6 换掉了，现在感觉是自己的问题，插件应该没啥问题&lt;/p>
&lt;ul>
&lt;li>恩山发布地址：https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;amp;tid=4048412&amp;amp;extra=page%3D2%26filter%3Dtypeid%26typeid%3D43&lt;/li>
&lt;li>固件下载连接：https://down.cloudorz.com/Router/LEDE/XiaoMi/XiaoMi-AC2100/&lt;/li>
&lt;li>Github仓库地址：https://github.com/1orz/My-action&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>功能很全的一个固件，但是其实我没用过，下面的评价看起来很不错：&lt;/p>
&lt;ul>
&lt;li>恩山发布地址：https://www.right.com.cn/FORUM/thread-4070200-1-1.html&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>恩山上评价不错的一个插件，具有常用功能，但是没有什么教程：&lt;/p>
&lt;ul>
&lt;li>恩山发布地址：https://www.right.com.cn/forum/thread-4107734-1-1.html&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>之前计划使用的插件，作者 hfy 做了很多的工作，好比制作网盘放各种固件、插件，写了很多教程，可是现在好像已经淡出了，固件无法使用，仅供参考&lt;/p>
&lt;ul>
&lt;li>恩山发布地址：https://www.right.com.cn/forum/thread-4027477-1-1.html&lt;/li>
&lt;li>发布地址：http://openwrt.ink:88/archives/openwrt-ac2100&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="padavan">
Padavan
&lt;a class="heading-link" href="#padavan">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>稳定而简洁的 Padavan，大家看起来评价都不错！
&lt;ul>
&lt;li>恩山发布地址：https://www.right.com.cn/forum/thread-4532281-1-1.html&lt;/li>
&lt;li>下载地址：https://pan.baidu.com/s/1gyL54MDYtm7gOEUwY1fdrQ 提取码：pad2&lt;/li>
&lt;li>交流群：324762006&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用的最多的 Padavan 发布，更新的比较多，同步最新源码，功能齐全！
&lt;ul>
&lt;li>发布地址：https://t.me/s/pdcn1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="bootloader">
Bootloader
&lt;a class="heading-link" href="#bootloader">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://breed.hackpascal.net/breed-mt7621-xiaomi-r3g.bin">通用的breed&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:88/upload/2020/12/bootloader-redmi-ac2100-928443369e734b72b9611377b94598bb.bin">红米官方的 Bootloader&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:88/upload/2020/12/bootloader-xiaomi-ac2100-2ad34eb9357e4760948f797999b7e294.bin">小米官方的 Bootloader&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:8666/%E5%AE%98%E6%96%B9%E5%B7%A5%E5%85%B7%E5%8C%85/">刷机软件包等&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.right.com.cn/forum/thread-161906-1-1.html">breed源&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:88/upload/2020/12/miwifi_rm2100_firmware_d6234_2.0.7-f693369307724965af27d3eda2458ad7.bin">官方2.0.7全固件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:8666/%E5%AE%98%E6%96%B9%E5%B7%A5%E5%85%B7%E5%8C%85/%E5%B0%8F%E7%B1%B3AC2100/%E5%AE%98%E6%96%B9%E5%9B%BA%E4%BB%B6/miwifi_r2100_firmware_64288_2.0.376.bin">官方2.0.376全固件&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="source-code">
Source Code
&lt;a class="heading-link" href="#source-code">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/coolsnowwolf/lede">lede&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/openwrt/openwrt">openwrt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hanwckf/rt-n56u/">handwckf/rt-n56u&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="参考链接">
参考链接
&lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.right.com.cn/forum/">恩山无线论坛&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:88/archives/mirouter-xiufu">【教程】红米&amp;amp;小米AC2100刷回官方固件方法及相关工具&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:88/archives/rm2100-shuaji">【教程】红米AC2100官方固件/OpenWrt/Padavan间互刷&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:88/archives/s-breed">【Breed】红米AC2100&amp;amp;小米AC2100一键SSH刷Breed和任意固件教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:88/archives/openwrt-ac2100">【0310更新】红米&amp;amp;小米AC2100多功能|精简|AP版下载&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.right.com.cn/forum/thread-4023907-1-1.html">红米/小米AC2100刷入r3g breed以及恢复官方boot详细教程（更新查坏块方法、pb-boot） - 小米无线路由器以及小米无线相关的设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://post.smzdm.com/p/aoo85457/">红米AC2100刷机Padavan固件全图解，超超超详细_路由器_什么值得买 (smzdm.com)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.right.com.cn/forum/thread-4023403-1-2.html">小米AC2100和红米AC2100可以刷的breed。另附小米和红米官方的bootloader - 小米无线路由器以及小米无线相关的设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openwrt.ink:88/archives/s-breed">【Breed】红米AC2100&amp;amp;小米AC2100一键SSH刷Breed和任意固件教程 - 寒枫叶 (openwrt.ink)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cyp0633.icu/archives/53">HNU校园网IPv6免流折腾实录 - cyp0633&amp;rsquo;s blog&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;amp;tid=4066963&amp;amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D43">小米 红米【AC2100】一键刷BREED【30秒刷完】小白脑残专用 无需工具TELNET + 检查坏块 - 小米无线路由器以及小米无线相关的设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;amp;tid=4054150&amp;amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D43">红米(小米)AC2100无需Telnet刷入Breed和Padavan固件教程 - 小米无线路由器以及小米无线相关的设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;amp;tid=4025861&amp;amp;extra=page%3D7%26filter%3Dtypeid%26typeid%3D43">2020-08-29更新] 教程：小米和红米AC2100用breed刷openwrt - 小米无线路由器以及小米无线相关的设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://p3terx.com/archives/openwrt-cloudflare-ddns.html">OpenWrt 配置 Cloudflare DDNS - P3TERX ZONE&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://biji.io/2017/4963.html">小米路由器青春版刷华硕固件&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>关于Git的一些理解</title><link>https://zzsqwq.github.io/posts/201/</link><pubDate>Fri, 23 Jul 2021 14:17:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/201/</guid><description>&lt;h1 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>前段时间在 Github 学完了关于 git 的小游戏 &lt;a href="https://github.com/pcottle/learnGitBranching">learnGitBranching&lt;/a> ，受益匪浅。&lt;/p>
&lt;p>它通过可视化的方式将分支的关系，每条命令的作用等都明明白白的体现出来，可以很直观的感受到你每条命令对整个分支树，每一个 ref 的作用。&lt;/p>
&lt;p>通过这种学习感觉自己对 Git 的理解更加深入一步，能够理解其中的原理，而不是浅尝辄止，照猫画虎。&lt;/p>
&lt;p>学习中记了一些零零散散的思路，想要写一篇笔记记录出来，之前已经写过一个简单的 Git 教程，这篇教程将会更加深入，希望可以帮助大家更好的掌握 Git。&lt;/p>
&lt;p>窃认为，想要学好 Git ，必须要理解清楚其中的分区以及引用，学会了这两个，各种基本操作就很容易理解了。接下来的笔记也基本以此思路展开。&lt;/p>
&lt;h1 id="git中的分区">
Git中的分区
&lt;a class="heading-link" href="#git%e4%b8%ad%e7%9a%84%e5%88%86%e5%8c%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/07/612956951.jpg" alt="Git中的三大分区，图片来源自掘金GabrielPanda">&lt;/p>
&lt;p>首先，Git中存在三大分区，分别是&lt;strong>工作区、暂存区、版本库&lt;/strong>。其中，&lt;/p>
&lt;p>&lt;strong>工作区&lt;/strong>即我们工作的目录，&lt;strong>暂存区&lt;/strong>是我们执行 &lt;code>git add&lt;/code> 后文件存在的区域。&lt;/p>
&lt;p>我们可以通过 &lt;code>git status&lt;/code> 对两种状态进行查看，例如：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-sheel" data-lang="sheel">~/test master*
base ❯ git status
On branch master
Changes to be committed:
(use &amp;quot;git restore --staged &amp;lt;file&amp;gt;...&amp;quot; to unstage)
modified: test
Changes not staged for commit:
(use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
(use &amp;quot;git restore &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
modified: test
&lt;/code>&lt;/pre>&lt;p>上图中存在两部分， 分别为 &lt;code>Changes to be committed&lt;/code> 这里是表示的版本库与暂存区的区别，还有&lt;code>Changes not staged for commit&lt;/code> ，它表示的是工作区与暂存区的区别。&lt;/p>
&lt;p>&lt;strong>版本库&lt;/strong>是我们执行 &lt;code>git commit -m &amp;quot;xxx&amp;quot;&lt;/code> 后，文件存在的区域。在上述过程中，Git 记录暂存区与版本库的差异，生成版本号，记录下来。我们可以通过 &lt;code>git log&lt;/code> 来查看我们产生的更改，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">commit 9da52a0e4800547ca46bd6bb919d1105cea43f1e &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span>
Author: zs &amp;lt;2459958352@qq.com&amp;gt;
Date: Thu Jul &lt;span style="color:#ae81ff">22&lt;/span> 22:09:45 &lt;span style="color:#ae81ff">2021&lt;/span> +0800
test commit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中包含了版本号、当前节点上的 ref 记录、作者、邮箱、日期以及此次提交的注释。&lt;/p>
&lt;h1 id="git中的引用">
Git中的引用
&lt;a class="heading-link" href="#git%e4%b8%ad%e7%9a%84%e5%bc%95%e7%94%a8">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>在 Git 中，引用到处可见，引用类似于给某一个 &lt;code>commit-id&lt;/code> 即某一次提交的 &lt;code>SHA-1&lt;/code> 值起一个简单的名字，如 &lt;code>branch&lt;/code> ，&lt;code>tag&lt;/code> 这些都是引用。&lt;/p>
&lt;p>Git 中存在一个命令， &lt;code>git update-ref&lt;/code> ，你可能几乎没见过，但可能天天在用。&lt;/p>
&lt;p>当运行类似于 &lt;code>git branch &amp;lt;branch&amp;gt;&lt;/code> 这样的命令时，Git 实际上会运行 &lt;code>git update-ref&lt;/code> 命令，例如，运行 &lt;code>git branch zs&lt;/code>，就等效于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git update-ref refs/heads/zs &amp;lt;commit-id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 &lt;code>commit-id&lt;/code> 就是当前提交的 &lt;code>commit-id&lt;/code> ，那他是如何获得的呢？&lt;/p>
&lt;p>使用过 Git 的人一定知道，Git 中存在一个名叫 &lt;code>HEAD&lt;/code> 的引用，它可能是引用，也可能是引用的引用。即它很多时候是指向某一个引用，如指向分支 &lt;code>master&lt;/code> 这个引用。不过，它也可以与引用分离，称为&lt;code>游离的HEAD&lt;/code>，即不指向某个引用，而指向单独的一个 &lt;code>commit&lt;/code> 。&lt;/p>
&lt;p>可以通过 &lt;code>git commit commit-id&lt;/code> 来实现，不过，我们一般&lt;strong>不推荐这种操作&lt;/strong>。下面的讨论，我们都是基于 &lt;code>HEAD&lt;/code> 是指向某一分支的。&lt;/p>
&lt;p>下面是关于一个引用的小例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">~/test master*
base ❯ git branch zs
~/test master*
base ❯ cat .git/refs/heads/zs
9da52a0e4800547ca46bd6bb919d1105cea43f1e
~/test master*
base ❯ git update-ref refs/heads/test 9da52a
~/test master*
base ❯ cat .git/HEAD
ref: refs/heads/master
~/test master*
base ❯ cat .git/refs/heads/master
9da52a0e4800547ca46bd6bb919d1105cea43f1e
~/test master*
base ❯ cat .git/refs/heads/test
9da52a0e4800547ca46bd6bb919d1105cea43f1e
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，例子中 HEAD 指向 master ，master,zs,test 同时都指向 id 为 &lt;code>9da52a&lt;/code> 的提交。&lt;/p>
&lt;h1 id="撤销更改">
撤销更改
&lt;a class="heading-link" href="#%e6%92%a4%e9%94%80%e6%9b%b4%e6%94%b9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h2 id="撤销本地更改">
撤销本地更改
&lt;a class="heading-link" href="#%e6%92%a4%e9%94%80%e6%9c%ac%e5%9c%b0%e6%9b%b4%e6%94%b9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>通过&lt;strong>版本库&lt;/strong>撤销&lt;strong>暂存区&lt;/strong>更改，&lt;strong>工作区&lt;/strong>不改&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git reset HEAD^ &lt;span style="color:#75715e">#撤销一次更改&lt;/span>
$ git reset HEAD~nums &lt;span style="color:#75715e">#撤销HEAD往前nums次更改&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>直接通过&lt;strong>版本库&lt;/strong>撤销&lt;strong>工作区&lt;/strong>的更改&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git reset HEAD^ --hard &lt;span style="color:#75715e">#撤销一次更改&lt;/span>
$ git reset HEAD~nums --hard &lt;span style="color:#75715e">#撤销HEAD往前nums次更改&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现只要加了 &lt;code>--hard&lt;/code> ，就可以直接也把工作区改掉，不过建议三思而后行！&lt;/p>
&lt;h2 id="撤销远程更改">
撤销远程更改
&lt;a class="heading-link" href="#%e6%92%a4%e9%94%80%e8%bf%9c%e7%a8%8b%e6%9b%b4%e6%94%b9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>上面说的是你本地的&lt;strong>工作区&lt;/strong> or &lt;strong>暂存区&lt;/strong>的撤销&lt;/p>
&lt;p>如果你已经把更改推送到了远端仓库，那么你想要去掉那次改动怎么办？&lt;/p>
&lt;p>可能你会想，直接通过 &lt;code>git reset&lt;/code> 切换到上面的某个需要的节点，然后再改？But，很容易想到这样会产生严重的冲突。&lt;strong>一旦commit已经被push到远程仓库，那么是坚决不允许去reset它的。&lt;/strong>&lt;/p>
&lt;p>还好，Git 给我们提供了一个更好的选择，你可以通过 &lt;code>git revert&lt;/code> 产生一个类似于补丁的东西来消除掉更改，很容易理解，这样没有改变树的结构，相对于 &lt;code>git reset&lt;/code> 他会往前走而不是回溯，这不会对之前的历史产生重要的影响。&lt;/p>
&lt;p>需要注意的是， &lt;code>git revert &lt;/code> 的用法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git revert HEAD &lt;span style="color:#75715e">#撤销掉HEAD这次更改，回到HEAD的上次版本&lt;/span>
$ git revert &amp;lt;commit_id&amp;gt; &lt;span style="color:#75715e">#撤销掉这次cmmit的修改&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="两种合并方式">
两种合并方式
&lt;a class="heading-link" href="#%e4%b8%a4%e7%a7%8d%e5%90%88%e5%b9%b6%e6%96%b9%e5%bc%8f">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>我们知道，Git 中存在两种合并分支的方式，分别为 &lt;code>git merge&lt;/code> 和 &lt;code>git rebase&lt;/code> 。&lt;/p>
&lt;p>两种方式各有优劣，简单说，&lt;code>rabase&lt;/code> 是把两条分支的提交记录整理到某一主分支上，它有着历史的完整记录。而 &lt;code>merge&lt;/code> 虽然也是整理了提交，但是某一分支的中间提交更改的过程合并后并不会体现在主分支上，中间过程可以说是在主分支上不可见的。&lt;/p>
&lt;p>很容易发现，&lt;code>rebase&lt;/code> 产生的主分支提交记录会更加的详细，它记录了每一步小的改动。而 &lt;code>merge&lt;/code> 产生的更简洁，有点类似于封装的意味，只是告诉你我这个提交完成了这个任务的开发，内部的实现细节却不会告诉你。&lt;/p>
&lt;p>而 &lt;code>rebase&lt;/code> 相比与 &lt;code>merge&lt;/code> 也会更加繁琐一些，你也可以通过 &lt;code>git rebase -i&lt;/code> 来通过可视化界面（可视化文本列表）的方式，来对记录做取舍与改动，不过还是没有 &lt;code>merge&lt;/code> 方便，远程仓库的合并操作一般都是使用 &lt;code>merge&lt;/code> 。&lt;/p>
&lt;p>需要注意的是，两种方法的使用习惯很不一样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git merge &amp;lt;branch&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代表的是将 &lt;code>&amp;lt;branch&amp;gt;&lt;/code> 分支合并到当前 &lt;code>HEAD&lt;/code> 所在的分支。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git rebase &amp;lt;branch1&amp;gt; &amp;lt;branch2&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代表的是将 &lt;code>branch2&lt;/code> 合并到 &lt;code>&amp;lt;branch1&amp;gt;&lt;/code> 的位置。如果省略 &lt;code>&amp;lt;branch2&amp;gt;&lt;/code> ，那么就是合并 &lt;code>HEAD&lt;/code> 所在分支到 &lt;code>&amp;lt;branch1&amp;gt;&lt;/code> 分支。&lt;/p>
&lt;p>可以发现 &lt;code>merge&lt;/code> 体现的是一种， &lt;code>merge xx&lt;/code> 到当前位置。而 &lt;code>rebase&lt;/code> 体现的是将自己合并到 &lt;code>xx&lt;/code> 那里去。一个是别人过来，一个是自己过去。建议两个命令改成 &lt;code>merge from&lt;/code> ，&lt;code>rebase into&lt;/code>，哈哈。&lt;/p>
&lt;p>顺便提一下， &lt;code>merge&lt;/code> 会导致一个节点有多个父节点，通过上文我们知道可以通过 &lt;code>~&lt;/code> 在一条线上移动，在这里，我们可以通过 &lt;code>^&lt;/code> 来指定第几个父节点，如 &lt;code>HEAD^3&lt;/code> 就是指 &lt;code>HEAD&lt;/code> 所在节点的第三个父节点。&lt;/p>
&lt;h1 id="整理提交记录">
整理提交记录
&lt;a class="heading-link" href="#%e6%95%b4%e7%90%86%e6%8f%90%e4%ba%a4%e8%ae%b0%e5%bd%95">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>我们有时会需要把另一个分支的部分更改放到主分支上来，即整理我们所有的提交记录，拿到我们所需要的来组成一个完整功能。&lt;/p>
&lt;p>为了完成这件事，我们想到，这有点像合并分支，不过可能不需要某一个分支上的全部更改，只需要其中的一部分就可以了。&lt;/p>
&lt;p>上面提到，通过 &lt;code>git rebase -i&lt;/code> 可以进行交互式的 &lt;code>rebase&lt;/code> ，可以对提交记录进行取舍，因此这样就可以满足我们的需求，只不过可能合并的时候需要想明白是从哪里变到哪里，有一些烧脑。&lt;/p>
&lt;p>幸运的是，Git 还给我们提供了另一个更加简洁的方式——&lt;code>git cherry-pick&lt;/code> ，语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git cherry-pick &amp;lt;commid-id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以通过这种方式，将树上的任意一个节点的提交添加到当前 &lt;code>HEAD&lt;/code> 所在分支的下方，这真是功能强大的命令！你也可以通过空格间隔，来顺序摘取多个提交。&lt;/p>
&lt;h1 id="两条万能指令">
两条万能指令
&lt;a class="heading-link" href="#%e4%b8%a4%e6%9d%a1%e4%b8%87%e8%83%bd%e6%8c%87%e4%bb%a4">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>除了上面我觉得值得说道的问题，我还想推荐两条我认为非常有用的指令，掌握了他们，你就可以在分支树上随心所欲的移动！&lt;/p>
&lt;ul>
&lt;li>移动分支&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git branch -f &amp;lt;branch&amp;gt; &amp;lt;commit-id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过这条指令，你可以将 &lt;code>&amp;lt;branch&amp;gt;&lt;/code> 的引用指向 &lt;code>commit-id&lt;/code> ，如果你读懂了上面的内容，你会发现它只是通过 &lt;code>update-ref&lt;/code> 更新了对应的引用。&lt;/p>
&lt;ul>
&lt;li>移动 HEAD&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git checkout &amp;lt;branch&amp;gt;
$ git checkout &amp;lt;commit-id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过这条指令，你可以自由的移动 &lt;code>HEAD&lt;/code> 引用，前者让他指向了 &lt;code>&amp;lt;branch&amp;gt;&lt;/code> 分支，后者让他指向了SHA-1为 &lt;code>&amp;lt;commit-id&amp;gt;&lt;/code> 的提交。&lt;/p>
&lt;h1 id="推荐的资料">
推荐的资料
&lt;a class="heading-link" href="#%e6%8e%a8%e8%8d%90%e7%9a%84%e8%b5%84%e6%96%99">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>在学习的过程中，看了很多资料，一并推荐给大家！&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/pcottle/learnGitBranching">learnGitBranching&lt;/a>：有趣的闯关游戏，但也干货满满。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://events.jianshu.io/p/9b3d7b6fe738">Git三大分区概念&lt;/a>：讲解了关于分区的概念，还有直观清晰的图片！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%BC%95%E7%94%A8">Git的引用&lt;/a>：来自 Git 官方的讲解，十分硬核。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>利用树莓派为HP LaserJet 1020配置无线打印功能</title><link>https://zzsqwq.github.io/posts/198/</link><pubDate>Sun, 18 Jul 2021 16:03:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/198/</guid><description>&lt;h2 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>    最近基地的打印机突然又好起来了。&lt;/p>
&lt;p>    因为基地的打印机型号比较老——HP LaserJet 1020，没有无线打印的功能。所以之前一位学长&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 用树莓派配置了打印机的无线打印功能，但是后来发现有一些问题，有时候发送打印请求树莓派无法接收，而且不知道为何，学长之前用的是树莓派自己创建WiFi，连接对应WiFi才能打印，但是这个显然不是最优的解决办法。&lt;/p>
&lt;p>    考虑到之间已经配置好基地WiFi，我决定重新配置一下打印功能，使其连接基地WiFi即可实现局域网打印。&lt;/p>
&lt;hr>
&lt;h2 id="配置过程">
配置过程
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae%e8%bf%87%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;h3 id="查看树莓派内容">
查看树莓派内容
&lt;a class="heading-link" href="#%e6%9f%a5%e7%9c%8b%e6%a0%91%e8%8e%93%e6%b4%be%e5%86%85%e5%ae%b9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>    通过ssh连接树莓派，发现里面除了Github上的一个开源项目&lt;a href="https://github.com/oblique/create_ap">create_ap&lt;/a> ，就没有什么其他的内容了，连接屏幕后发现没有任何图像信号，无从下手，因此考虑重新刷机。&lt;/p>
&lt;hr>
&lt;h3 id="对树莓派进行刷机">
对树莓派进行刷机
&lt;a class="heading-link" href="#%e5%af%b9%e6%a0%91%e8%8e%93%e6%b4%be%e8%bf%9b%e8%a1%8c%e5%88%b7%e6%9c%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>    把数据备份了一下，看了一下树莓派版本是2015年生产的 &lt;code>Raspberry Pi 3 model B V1.2&lt;/code> ，是老古董了。&lt;/p>
&lt;p>    去官网看了一下，因为我对Ubuntu比较熟悉，我计划安装一个 Ubuntu20.04版本的，考虑到版本比较老，就装了&lt;strong>server&lt;/strong>版本的，相比与desktop版本负担更小一些。&lt;/p>
&lt;p>    其实就是下一个官方的软件，&lt;code>Raspberry Pi Imager&lt;/code> ，直接用读卡器对树莓派的存储卡刷机即可。&lt;/p>
&lt;p>    这里是对应的镜像以及教程： &lt;a href="https://ubuntu.com/download/raspberry-pi">镜像下载&lt;/a> &lt;a href="https://ubuntu.com/tutorials/how-to-install-ubuntu-desktop-on-raspberry-pi-4#1-overview">安装教程&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="配置网络相关">
配置网络相关
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae%e7%bd%91%e7%bb%9c%e7%9b%b8%e5%85%b3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>    Ubuntu的server版本有个比较蛋疼的问题就是上网比较困难，如果是用的学校网线，必须要PPPOE拨号才能上网，但是server版本居然没有 &lt;code>net-tools&lt;/code> 和 &lt;code>network-manager&lt;/code> ，连接WiFi啥的试了很多办法但还是没有什么作用。&lt;/p>
&lt;p>    &lt;strong>解决办法：用网线直接连接树莓派和有网的路由器，安装 &lt;code>net-tools&lt;/code> 和 &lt;code>network-manager&lt;/code> ，执行&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo nmtui
&lt;/code>&lt;/pre>&lt;/div>&lt;p>    选择 &lt;code>Activate a connect &lt;/code> 连接无线的WiFi，执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo ifconfig
&lt;/code>&lt;/pre>&lt;/div>&lt;p>    查看WiFi对应的IP，至此，树莓派可以摆脱屏幕，我们可以使用电脑进行使用 &lt;code>ssh&lt;/code> 连接。&lt;/p>
&lt;p>    这里也可以使用网线进行连接，具体操作如下&lt;/p>
&lt;p>    1. 用网线连接树莓派和自己的电脑。&lt;/p>
&lt;p>    2. 在树莓派的利用 &lt;code>nmtui&lt;/code> 选择 &lt;code>Edit a connection &lt;/code> ，Add一个Ethernet connect，对IPv4 CONFIGURATION进行设置，首先讲 &lt;code>Automatic&lt;/code> 设置为 &lt;code>Manual&lt;/code>，设置 &lt;code>Address&lt;/code> 为 &lt;strong>静态IP&lt;/strong> 如 &lt;code>192.168.3.2&lt;/code> ，&lt;code>Gateway&lt;/code> 设置为 &lt;code>192.168.3.1&lt;/code> 。&lt;/p>
&lt;p>    3. 在自己电脑利用 &lt;code>nmtui&lt;/code> 同上不过设置 &lt;code>Address&lt;/code> 为 &lt;code>192.168.3.3&lt;/code> ，只要是位于同一网段即可。&lt;/p>
&lt;p>    4. 这时候就可以通过网线进行 &lt;code>ssh&lt;/code> 连接了。&lt;/p>
&lt;hr>
&lt;h3 id="配置cups">
配置cups
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%aecups">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>    以下大多参考：&lt;a href="https://sspai.com/post/40997">如何正确地用树莓派共享打印机&lt;/a>&lt;/p>
&lt;p>    大佬言：&lt;/p>
&lt;blockquote>
&lt;p>其实，这一步的工作量非常少，因为软件包 CUPS 就是为共享打印机而生。我们要做的只是将打印机用 USB 线缆连接树莓派，然后安装并配置 CUPS。&lt;/p>
&lt;/blockquote>
&lt;p>    然而，事实并非如此。&lt;/p>
&lt;h4 id="换源">
换源
&lt;a class="heading-link" href="#%e6%8d%a2%e6%ba%90">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>    在安装之前需要换源，如果不换源的话，安装会十分缓慢，具体的流程可以看上面的blog，因为我们基地的WiFi自带代理，因此这一步我没有做。&lt;/p>
&lt;h4 id="安装驱动及打印程序">
安装驱动及打印程序
&lt;a class="heading-link" href="#%e5%ae%89%e8%a3%85%e9%a9%b1%e5%8a%a8%e5%8f%8a%e6%89%93%e5%8d%b0%e7%a8%8b%e5%ba%8f">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>首先更新源并安装Hp的打印机驱动 &lt;code>hplip&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo apt update
$ sudo apt install hplip
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>然后安装Apple开源的远程打印工具 &lt;code>cups&lt;/code>，并配置相应权限&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo apt install cups &lt;span style="color:#75715e"># Install cups package&lt;/span>
$ sudo usermod -aG lpadmin pi &lt;span style="color:#75715e"># Add user to lpadmin group,pi is your user name&lt;/span>
$ sudo cupsctl --remote-any &lt;span style="color:#75715e"># open remote access &lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>然后使用在同一局域网的电脑，访问 &lt;code>https://树莓派IP:631&lt;/code>，可以进入如下界面，按照下图设置右侧的&lt;code>Server Settings&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/07/2334607761.png" alt="cups管理页面">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>连接打印机和树莓派&lt;/strong>，点击Add Printer添加打印机，在弹出的窗口中输入对应的用户信息，使用在上一步中用户组中添加的用户&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/07/3556322742.png" alt="cups登录界面">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后按着一步步的指引，选择HP LaserJet 1020打印机，然后按照提示，选择和名称对应的驱动，我们会发现 &lt;strong>LaserJet 1020&lt;/strong> 对应驱动会提示：HP laserjet requires proprietary plugin，也就是我们不仅需要这个通用的驱动，而且需要一些额外的插件，打印机才能正常工作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查阅资料发现：HP官方已经给出了&lt;a href="https://developers.hp.com/hp-linux-imaging-and-printing/binary_plugin.html">说明&lt;/a>，我们需要查看hplip版本，然后安装对应的驱动插件。&lt;/p>
&lt;ul>
&lt;li>首先我们查看一下版本，发现是3.20.3版本&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo apt show hplip
Package: hplip
Version: 3.20.3+dfsg0-2
Priority: optional
Section: utils
Origin: Ubuntu
Maintainer: Ubuntu Developers &amp;lt;ubuntu-devel-discuss@lists.ubuntu.com&amp;gt;
Original-Maintainer: Debian Printing Team &amp;lt;debian-printing@lists.debian.org&amp;gt;
Bugs: https://bugs.launchpad.net/ubuntu/+filebug
Installed-Size: &lt;span style="color:#ae81ff">518&lt;/span> kB
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>然后在 &lt;a href="https://developers.hp.com/hp-linux-imaging-and-printing/plugins">插件列表&lt;/a> 中找到 3.20.3 对应的&lt;code>hplip-3.20.3-plugin.run&lt;/code>和&lt;code>hplip-3.20.3-plugin.run.asc&lt;/code>，使用wget下载到树莓派本地。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行 &lt;code>hp-setup -i&lt;/code> 使用命令行进行安装，按照提示命令，进行插件的安装。&lt;/p>
&lt;p>[scode type=&amp;ldquo;yellow&amp;rdquo;]这里建议提前下好安装，而不是直接联网下载，速度较快，指定路径需要为绝对路径[/scode]&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>至此，我们可以尝试使用手机或者电脑搜索打印机来进行打印测试，没有其他意外的话，可以发现打印成功！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="结语">
结语
&lt;a class="heading-link" href="#%e7%bb%93%e8%af%ad">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>    其实这个配置过程远没有这么简单，期间还有很多小问题，但是大致的流程大概就是如上述所示，全写出来可能太啰嗦，大家如果配置过程中遇到更多的疑问，可以在下方评论一起探讨~&lt;/p>
&lt;h2 id="参考链接">
参考链接
&lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://developers.hp.com/hp-linux-imaging-and-printing/binary_plugin.html">What is the HPLIP Binary Plug-In and How Do I Install It?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developers.hp.com/hp-linux-imaging-and-printing/plugins">Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.openprinting.org/download/printdriver/auxfiles/HP/plugins/">Other Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/apple/cups">cups&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/d3752c584e01">使用树莓派搭建无线打印机&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sspai.com/post/40997">如何正确地用树莓派共享打印机&lt;/a>&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>学长的博客在这里: &lt;a href="https://tec.blog.ykai.top/">dykai&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>deepin-wine-qq-9.1.8版本无法正常启动的解决方案</title><link>https://zzsqwq.github.io/posts/195/</link><pubDate>Wed, 16 Jun 2021 01:38:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/195/</guid><description>&lt;h3 id="问题描述">
问题描述
&lt;a class="heading-link" href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    Ubuntu下想要使用QQ有一个比较好的解决方案就是deepin-wine的版本，deepin-wine版本的QQ一共有两个版本，分别是 8.9.1 和 9.1.8 ，前者安装后发现无法登陆，登录时会提示版本过低的问题，于是我换到9.1.8版本后，启动初始化后就无任何信息了，于是开始排查问题&lt;/p>
&lt;h3 id="解决方案">
解决方案
&lt;a class="heading-link" href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    首先我们根据上文的启示，因为每一个应用程序对应了一个 &lt;code>xxx.desktop&lt;/code> 文件，因此在应用库中的QQ一定也有一个对应的 &lt;code>desktop&lt;/code> 文件&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/06/75817321.png" alt="QQ的启动方式">&lt;/p>
&lt;p>​    我们进入到 &lt;code>/usr/share/applications&lt;/code> ，运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ ls | grep -i qq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    可以发现其中有一个名为 &lt;code>deepin.com.qq.im.desktop&lt;/code> 的文件，我们打开后发现内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e">#!/usr/bin/env xdg-open
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>Desktop Entry&lt;span style="color:#f92672">]&lt;/span>
Encoding&lt;span style="color:#f92672">=&lt;/span>UTF-8
Type&lt;span style="color:#f92672">=&lt;/span>Application
X-Created-By&lt;span style="color:#f92672">=&lt;/span>Deepin WINE Team
Categories&lt;span style="color:#f92672">=&lt;/span>chat;
Icon&lt;span style="color:#f92672">=&lt;/span>deepin.com.qq.im
Exec&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/opt/deepinwine/apps/Deepin-QQ/run.sh&amp;#34;&lt;/span> -u %u
Name&lt;span style="color:#f92672">=&lt;/span>QQ
Name&lt;span style="color:#f92672">[&lt;/span>zh_CN&lt;span style="color:#f92672">]=&lt;/span>QQ
Comment&lt;span style="color:#f92672">=&lt;/span>Tencent QQ Client on Deepin Wine
StartupWMClass&lt;span style="color:#f92672">=&lt;/span>QQ.exe
MimeType&lt;span style="color:#f92672">=&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    可以看到Exec那一栏为 &lt;code>Exec=&amp;quot;/opt/deepinwine/apps/Deepin-QQ/run.sh&amp;quot; -u %u&lt;/code> ，发现他是运行目录下的一个 &lt;code>run.sh&lt;/code> 脚本来启动的。&lt;/p>
&lt;p>​    我们进入目录下直接运行该脚本，查看log信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">base ❯ ./run.sh
Run Deepin-QQ 9.1.8deepin0 c:/Program Files/Tencent/QQ/Bin/QQ.exe
run Deepin-QQ progress pid
Gtk-Message: 01:16:58.069: GtkDialog mapped without a transient parent. This is discouraged.
total &lt;span style="color:#ae81ff">0&lt;/span>
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">16&lt;/span> 01:16 c: -&amp;gt; ../drive_c
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com1 -&amp;gt; /dev/ttyS0
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com10 -&amp;gt; /dev/ttyS9
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com11 -&amp;gt; /dev/ttyS10
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com12 -&amp;gt; /dev/ttyS11
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com13 -&amp;gt; /dev/ttyS12
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com14 -&amp;gt; /dev/ttyS13
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com15 -&amp;gt; /dev/ttyS14
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com16 -&amp;gt; /dev/ttyS15
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com17 -&amp;gt; /dev/ttyS16
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com18 -&amp;gt; /dev/ttyS17
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com19 -&amp;gt; /dev/ttyS18
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com2 -&amp;gt; /dev/ttyS1
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com20 -&amp;gt; /dev/ttyS19
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com21 -&amp;gt; /dev/ttyS20
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com22 -&amp;gt; /dev/ttyS21
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com23 -&amp;gt; /dev/ttyS22
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com24 -&amp;gt; /dev/ttyS23
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com25 -&amp;gt; /dev/ttyS24
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com26 -&amp;gt; /dev/ttyS25
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com27 -&amp;gt; /dev/ttyS26
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com28 -&amp;gt; /dev/ttyS27
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com29 -&amp;gt; /dev/ttyS28
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com3 -&amp;gt; /dev/ttyS2
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com30 -&amp;gt; /dev/ttyS29
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com31 -&amp;gt; /dev/ttyS30
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">11&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com32 -&amp;gt; /dev/ttyS31
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com4 -&amp;gt; /dev/ttyS3
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com5 -&amp;gt; /dev/ttyS4
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com6 -&amp;gt; /dev/ttyS5
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com7 -&amp;gt; /dev/ttyS6
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com8 -&amp;gt; /dev/ttyS7
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">10&lt;/span> 6月 &lt;span style="color:#ae81ff">15&lt;/span> 23:36 com9 -&amp;gt; /dev/ttyS8
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">8&lt;/span> 6月 &lt;span style="color:#ae81ff">16&lt;/span> 01:16 y: -&amp;gt; /home/zs
lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> zs zs &lt;span style="color:#ae81ff">1&lt;/span> 6月 &lt;span style="color:#ae81ff">16&lt;/span> 01:16 z: -&amp;gt; /
CallApp Deepin-QQ c:/Program Files/Tencent/QQ/Bin/QQ.exe
2021年 06月 16日 星期三 01:16:58 CST:kill QQ.exe block
2021年 06月 16日 星期三 01:16:58 CST:No wine process found
/home/zs/.deepinwine/Deepin-QQ/drive_c/Program Files/Tencent/QQ/Bin
Starting process c:/Program Files/Tencent/QQ/Bin/QQ.exe ...
/opt/deepinwine/apps/Deepin-QQ
base ❯ wine: cannot find L&lt;span style="color:#e6db74">&amp;#34;C:\\windows\\system32\\winemenubuilder.exe&amp;#34;&lt;/span>
wine version: 2.18
libGL error: No matching fbConfigs or visuals found
libGL error: failed to load driver: swrast
X Error of failed request: GLXBadContext
Major opcode of failed request: &lt;span style="color:#ae81ff">152&lt;/span> &lt;span style="color:#f92672">(&lt;/span>GLX&lt;span style="color:#f92672">)&lt;/span>
Minor opcode of failed request: &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#f92672">(&lt;/span>X_GLXIsDirect&lt;span style="color:#f92672">)&lt;/span>
Serial number of failed request: &lt;span style="color:#ae81ff">207&lt;/span>
Current serial number in output stream: &lt;span style="color:#ae81ff">206&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    可以发现最下面的log信息有一些异常，首先第一行是因为我们是Ubuntu系统，可以暂且不关注&lt;/p>
&lt;p>​    接下来可以看到有一个LibGL的错误，我们通过Google搜索&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">libGL error: No matching fbConfigs or visuals found
libGL error: failed to load driver: swrast
X Error of failed request: GLXBadContext
Major opcode of failed request: &lt;span style="color:#ae81ff">152&lt;/span> &lt;span style="color:#f92672">(&lt;/span>GLX&lt;span style="color:#f92672">)&lt;/span>
Minor opcode of failed request: &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#f92672">(&lt;/span>X_GLXIsDirect&lt;span style="color:#f92672">)&lt;/span>
Serial number of failed request: &lt;span style="color:#ae81ff">207&lt;/span>
Current serial number in output stream: &lt;span style="color:#ae81ff">206&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    发现类似的错误及解决方案如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=255385">SOLVED] LibGL errors with osu! and wine&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://askubuntu.com/questions/834254/steam-libgl-error-no-matching-fbconfigs-or-visuals-found-libgl-error-failed-t">Steam: libGL error: No matching fbConfigs or visuals found libGL error: failed to load driver: swrast&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​    从搜索结果来看，这个问题还是非常常见的，用steam也会遇到，一般都是因为电脑安装了64位的NVIDIA显卡驱动，但是因为应用是32位的导致不能兼容，因此无法启动&lt;/p>
&lt;p>​    最终解决方案有两个&lt;/p>
&lt;ul>
&lt;li>如果是不常用NVIDIA驱动的人，普通的办公一下，可以搜索网上教程关闭独显，只启用集显，可以发现QQ可以正常启动，&lt;/li>
&lt;li>重新安装32位的NVIDIA驱动&lt;/li>
&lt;/ul>
&lt;h3 id="最后">
最后
&lt;a class="heading-link" href="#%e6%9c%80%e5%90%8e">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    虽然已经知道了解决方案，但是最终我还是选择卸载掉QQ，安装了wine版本的TIM，感觉和QQ没什么区别，而且更加简洁，而且可以流畅运行，没有N卡兼容问题！大家可以考虑一下~&lt;/p>
&lt;p>​    而且QQ和TIM某些情况下会出现bug，字体全部变为方块，在 deepin-wine-ubuntu 的 &lt;a href="https://github.com/wszqkzqk/deepin-wine-ubuntu/issues">Issues&lt;/a> 中找到了解决方案 &lt;a href="https://github.com/wszqkzqk/deepin-wine-ubuntu/issues/253">Ubuntu 安装QQ后中文方块解决方法&lt;/a> ，大家有同样困扰的也可以看一下~&lt;/p></description></item><item><title>Ubuntu如何利用AppImage创建Qv2ray快捷方式</title><link>https://zzsqwq.github.io/posts/193/</link><pubDate>Wed, 16 Jun 2021 00:54:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/193/</guid><description>&lt;h3 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    最近因为之前的Ubuntu系统有一些环境和神奇的问题，把Ubuntu重装了，在配置Qv2ray的时候，之前一直是把AppImage放到桌面上直接使用，这样的话一直用起来不仅难找而且操作有点困难，因此考虑将他放到命令行启动并且可以在快捷方式中找到。效果如下图所示：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/06/2642879187.png" alt="快捷方式效果图">&lt;/p>
&lt;h3 id="原理">
原理
&lt;a class="heading-link" href="#%e5%8e%9f%e7%90%86">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    首先需要明白的是这个里面的每个快捷方式，其实都是解析一个文件得到的，这些文件都存在于 &lt;code>\usr\share\applications&lt;/code> 中，文件名为 &lt;code>**.desktop&lt;/code> ，随便打开里面的一个文件看一下，Typora的启动文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#f92672">[&lt;/span>Desktop Entry&lt;span style="color:#f92672">]&lt;/span>
Name&lt;span style="color:#f92672">=&lt;/span>Typora
Comment&lt;span style="color:#f92672">=&lt;/span>a minimal Markdown reading &amp;amp; writing app. Change Log: &lt;span style="color:#f92672">(&lt;/span>https://typora.io/windows/dev_release.html&lt;span style="color:#f92672">)&lt;/span>
GenericName&lt;span style="color:#f92672">=&lt;/span>Markdown Editor
Exec&lt;span style="color:#f92672">=&lt;/span>typora %U
Icon&lt;span style="color:#f92672">=&lt;/span>typora
Type&lt;span style="color:#f92672">=&lt;/span>Application
StartupNotify&lt;span style="color:#f92672">=&lt;/span>true
Categories&lt;span style="color:#f92672">=&lt;/span>Office;WordProcessor;
MimeType&lt;span style="color:#f92672">=&lt;/span>text/markdown;text/x-markdown;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    可以看到里面的内容写的非常清晰，其中比较重要的有以下几个&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键词&lt;/th>
&lt;th>意义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>[Desktop Entry]&lt;/td>
&lt;td>文件头&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Name&lt;/td>
&lt;td>应用名称&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Comment&lt;/td>
&lt;td>描述&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exec&lt;/td>
&lt;td>执行的命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Icon&lt;/td>
&lt;td>图标路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Type&lt;/td>
&lt;td>启动器类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Categories&lt;/td>
&lt;td>应用的类型（内容相关）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StartupNotify&lt;/td>
&lt;td>启动时是否打印输出信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Terminal&lt;/td>
&lt;td>是否在终端中运行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="快捷方式的创建">
快捷方式的创建
&lt;a class="heading-link" href="#%e5%bf%ab%e6%8d%b7%e6%96%b9%e5%bc%8f%e7%9a%84%e5%88%9b%e5%bb%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    明白以上原理，我们只需要创建一个 &lt;code>qv2ray.desktop&lt;/code> ，文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#f92672">[&lt;/span>Desktop Entry&lt;span style="color:#f92672">]&lt;/span>
Name&lt;span style="color:#f92672">=&lt;/span>qv2ray
Exec&lt;span style="color:#f92672">=&lt;/span>/home/zs/proxy/v2ray/Qv2ray.v2.6.3.linux-x64.AppImage
Icon&lt;span style="color:#f92672">=&lt;/span>/home/zs/proxy/v2ray/qv2ray.512.png
Type&lt;span style="color:#f92672">=&lt;/span>Application
StartupNotify&lt;span style="color:#f92672">=&lt;/span>true
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    其中Exec为你AppImage的绝对路径，Icon为图标的绝对路径。&lt;/p>
&lt;p>​    其中各个大小的Qv2ray的icons可以在它的Github中找到，链接为：&lt;a href="https://github.com/Qv2ray/Qv2ray/tree/master/assets/icons">Qv2ray/icons&lt;/a>&lt;/p>
&lt;p>​    创建完后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo chmod +x qv2ray.desktop
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    为文件添加可执行权限，然后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo cp qv2ray.desktop /usr/share/applications
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    将其加入到目录中，接下来我们就可以在应用库中找到对应的qv2ray了~&lt;/p>
&lt;h3 id="命令行快捷方式的创建">
命令行快捷方式的创建
&lt;a class="heading-link" href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%bf%ab%e6%8d%b7%e6%96%b9%e5%bc%8f%e7%9a%84%e5%88%9b%e5%bb%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    我们直接将AppImage加入到 &lt;code>/usr/bin&lt;/code> 中即可，即执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sudo cp xxx.AppImage /usr/bin/qv2ray
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​    接下来我们在终端中输入 &lt;code>qv2ray&lt;/code> ，发现已经可以成功打开qv2ray，大功告成！~&lt;/p></description></item><item><title>利用神经网络进行波士顿房价预测</title><link>https://zzsqwq.github.io/posts/182/</link><pubDate>Sun, 16 May 2021 15:19:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/182/</guid><description>&lt;h3 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    前一阵学校有五一数模节校赛，和朋友一起参加做B题，波士顿房价预测，算是第一次自己动手实现一个简单的小网络吧，虽然很简单，但还是想记录一下。&lt;/p>
&lt;h3 id="题目介绍">
题目介绍
&lt;a class="heading-link" href="#%e9%a2%98%e7%9b%ae%e4%bb%8b%e7%bb%8d">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    波士顿住房数据由哈里森和鲁宾菲尔德于1978年Harrison and Rubinfeld&lt;!-- raw HTML omitted -->&lt;a href="https://www.zzsqwq.cn/usr/uploads/2021/05/406125417.png">1&lt;/a>&lt;!-- raw HTML omitted -->收集。它包括了波士顿大区每个调查行政区的506个观察值。1980年Belsley et al.&lt;!-- raw HTML omitted -->&lt;a href="https://www.zzsqwq.cn/usr/uploads/2021/05/3238192089.png">2&lt;/a>&lt;!-- raw HTML omitted -->曾对此数据做过分析。&lt;/p>
&lt;p>​    数据一共14列，每一列的含义分别如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文简称&lt;/th>
&lt;th>详细含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CRIM&lt;/td>
&lt;td>城镇的人均犯罪率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ZN&lt;/td>
&lt;td>大于25,000平方英尺的地块的住宅用地比例。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>INDUS&lt;/td>
&lt;td>每个镇的非零售业务英亩的比例。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CHAS&lt;/td>
&lt;td>查尔斯河虚拟变量（如果环河，则等于1；否则等于0）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NOX&lt;/td>
&lt;td>一氧化氮的浓度（百万分之几）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RM&lt;/td>
&lt;td>每个住宅的平均房间数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AGE&lt;/td>
&lt;td>1940年之前建造的自有住房的比例&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DIS&lt;/td>
&lt;td>到五个波士顿就业中心的加权距离&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RAD&lt;/td>
&lt;td>径向公路通达性的指标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TAX&lt;/td>
&lt;td>每一万美元的全值财产税率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PTRATIO&lt;/td>
&lt;td>各镇的师生比率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>计算方法为 $1000(B_k-0.63)^2$，其中Bk是按城镇划分的非裔美国人的比例&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LSTAT&lt;/td>
&lt;td>底层人口的百分比(%)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>price&lt;/strong>&lt;/td>
&lt;td>自有住房数的中位数，单位（千美元）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>​    基于上述数据，请完成以下问题：&lt;/p>
&lt;p>​    &lt;strong>建立波士顿房价预测模型并对预测结果进行评价。&lt;/strong>&lt;/p>
&lt;h3 id="问题分析">
问题分析
&lt;a class="heading-link" href="#%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    首先这道题目的很明确，数据一共是 $506×14$ 的一个矩阵，有十三维的自变量，通过建立一个模型来拟合回归出最终的因变量 price，即户主拥有住房价值的中位数。这是一个回归问题，综合考虑有以下两个思路&lt;/p>
&lt;ol>
&lt;li>
&lt;p>通过各种回归算法（GradientBoostingRegressor，RandomForestRegressor，ExtraTreesRegressor，LinearRegressor等）结合全部或部分自变量来回归最终的price&lt;/p>
&lt;/li>
&lt;li>
&lt;p>建立前馈神经网络模型，根据通用逼近定理，我们可以拟合此回归模型。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​    我们对上述模型来进行实现并确定评估标准来对他们进行比较，选择最优的模型作为预测模型。&lt;/p>
&lt;h3 id="算法流程">
算法流程
&lt;a class="heading-link" href="#%e7%ae%97%e6%b3%95%e6%b5%81%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="传统的回归算法">
传统的回归算法
&lt;a class="heading-link" href="#%e4%bc%a0%e7%bb%9f%e7%9a%84%e5%9b%9e%e5%bd%92%e7%ae%97%e6%b3%95">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;h5 id="自变量的选择">
自变量的选择
&lt;a class="heading-link" href="#%e8%87%aa%e5%8f%98%e9%87%8f%e7%9a%84%e9%80%89%e6%8b%a9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>​    首先，考虑到数据集中13列自变量其中某一些可能和最终的房价并无强相关性，如果全部使用进行预测可能会对模型引入噪声，因此我们首先计算了房价price与各个自变量之间的相关系数 $r$ ，其中 $r$ 计算公式如下：
$$
r = \frac{\sum(x_i-\bar{x})(y_i-\bar{y})}{\sqrt{\sum(x_i-\bar{x})^2\sum(y_i-\bar{y})^2}}
$$
​    其中 $x_i,y_i$ 为数据的每个分量，$\bar{x}，\bar{y}$ 为数据的均值&lt;/p>
&lt;p>​    该系数反映了两变量之间的相关性，$r$ 的绝对值介于 $[0,1]$ 区间内，$|r|$ 越接近1，表示两数据相关性越高，反之越低。计算后结果如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CRIM&lt;/th>
&lt;th>ZN&lt;/th>
&lt;th>INDUS&lt;/th>
&lt;th>CHAS&lt;/th>
&lt;th>NOX&lt;/th>
&lt;th>RM&lt;/th>
&lt;th>LSTAT&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-0.385832&lt;/td>
&lt;td>0.360445&lt;/td>
&lt;td>-0.483725&lt;/td>
&lt;td>0.175260&lt;/td>
&lt;td>-0.427321&lt;/td>
&lt;td>0.695360&lt;/td>
&lt;td>-0.737663&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>AGE&lt;/strong>&lt;/td>
&lt;td>&lt;strong>DIS&lt;/strong>&lt;/td>
&lt;td>&lt;strong>RAD&lt;/strong>&lt;/td>
&lt;td>&lt;strong>TAX&lt;/strong>&lt;/td>
&lt;td>&lt;strong>PTRATIO&lt;/strong>&lt;/td>
&lt;td>&lt;strong>B&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-0.376955&lt;/td>
&lt;td>0.249929&lt;/td>
&lt;td>-0.381626&lt;/td>
&lt;td>-0.468536&lt;/td>
&lt;td>-0.507787&lt;/td>
&lt;td>0.333461&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>​    观察结果可以发现，在给定的十三个变量中，&lt;strong>LSTAT &lt;strong>与 &lt;strong>price&lt;/strong> 的相关程度最高$(|r|&amp;gt;0.7)$，其次是 &lt;strong>RM&lt;/strong> 与&lt;/strong>PTRATIO&lt;/strong> $(|r|&amp;gt;0.5)$，再者是 &lt;strong>TAX,INDUS,NOX&lt;/strong> $(|r|&amp;gt;0.4)$，除上述之外的七个变量都与 &lt;strong>price&lt;/strong> 无较强的相关性，因此我们考虑使用六个相关性较强变量和十三个变量分别来对房价进行预测，并对他们进行对比，来寻找最优的回归模型。&lt;/p>
&lt;h5 id="模型的构建">
模型的构建
&lt;a class="heading-link" href="#%e6%a8%a1%e5%9e%8b%e7%9a%84%e6%9e%84%e5%bb%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>首先我们使用了sklearn中自带的 boston 数据集，并将整体数据集随机划分为了训练集和测试集两部分，所占比例分别为80%和20%。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后，我们利用Linear,Ridge,Lasso,ElasticNet,DecisionTree,GradientBoosting,RandomForest,ExtraTrees八种模型通过训练集对其进行训练。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接下来，我们利用训练集拟合得到的模型，使用测试集对其进行测试，与 Ground Truth 进行对比，并通过 $R^2$ 来评价该预测结果，其中 $R^2$ 计算公式如下，其是衡量回归模型好坏的常见指标，其值一般处于[0,1]之间，$R^2$ 越接近1，说明模型的性能越好。
$$
R^2 = 1-\frac{\sum(\hat{y_i}-y_i)^2}{\sum(\bar{y}-y_i)^2}
$$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，考虑到模型的训练及预测可能具有偶然性，因此我们对于每一个模型进行20次训练及预测，利用20次的结果对其进行综合评价。利用得到的结果绘制 &lt;strong>箱线图&lt;/strong> 所得结果如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/406125417.png" alt="使用六变量和十三个变量进行拟合的对比">&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​    分析最终结果可以发现，无论是使用六个相关性较强变量还是十三个变量来进行预测，GradientBoost（梯度提升决策树）回归模型都是最好的，此外，我们可以发现，利用十三个变量要比利用六个主要变量来进行预测比有着更好的效果。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="前馈神经网络">
前馈神经网络
&lt;a class="heading-link" href="#%e5%89%8d%e9%a6%88%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;h5 id="模型的构建-1">
模型的构建
&lt;a class="heading-link" href="#%e6%a8%a1%e5%9e%8b%e7%9a%84%e6%9e%84%e5%bb%ba-1">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>​    近年来，神经网络理论不断发展，前馈神经网络（多层感知机、全连接神经网络）越来越多的被利用到数据分析中，因此考虑使用前馈神经网络来解决此问题。&lt;/p>
&lt;p>​    前馈神经网络（全连接神经网络）的网络结构一般由三部分构成，输入层，隐藏层，以及输出层，输入层与输出层一般只有一层，隐藏层可有多层。中间利用非线性函数作为激活函数可以使得网络具有拟合非线性函数的能力&lt;/p>
&lt;p>​    根据通用近似定理:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>通用近似定理&lt;/strong>&lt;/p>
&lt;p>对于具有线性输出层和至少一个使用“挤压”性质的激活函数的隐藏层组成的前馈神经网络，只要其隐藏层神经元的数量足够，它可以以任意精度来近似任何从一个定义在实数空间中的有界闭集函数。&lt;/p>
&lt;/blockquote>
&lt;p>​    只要隐藏层网络维度够高，就可以拟合任意的函数。&lt;/p>
&lt;p>​    考虑到我们的模型有六维or十三维的数据输入，因此我们建立两层前馈神经网络，中间具有一层隐藏层，维度为1000维，激活函数使用Relu，Relu函数有以下优点:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Relu相比于传统的Sigmoid、Tanh，导数更加好求，反向传播就是不断的更新参数的过程，因为其导数不复杂形式简单，可以使得网络训练更快速。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此外，当数值过大或者过小，Sigmoid，Tanh的导数接近于0，Relu为非饱和激活函数则不存在这种现象，可以很好的解决梯度消失的问题&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​    Relu函数及网络结构图如图所示：&lt;/p>
&lt;p>$$
Relu:f(x) = max(0,x)
$$&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/3238192089.png" alt="构建的前馈神经网络结构图">&lt;/p>
&lt;h5 id="具体实现">
具体实现
&lt;a class="heading-link" href="#%e5%85%b7%e4%bd%93%e5%ae%9e%e7%8e%b0">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>​    利用流行的深度学习框架 &lt;strong>Pytorch&lt;/strong> 来对模型进行实现。&lt;/p>
&lt;ul>
&lt;li>首先，将数据集随机划分为训练集和测试集两部分，分别占80%和20%，并将其转化为Pytorch中的张量形式。&lt;/li>
&lt;li>然后，利用MinMaxScaler对输入数据进行归一化，利用下列公式将其统一归一化为 $[0,1]$ 之间，以求模型能够更快的收敛。&lt;/li>
&lt;/ul>
&lt;p>$$
MinMaxScaler:x^{*} = \frac{x-min(x)}{max(x)-min(x)}
$$&lt;/p>
&lt;ul>
&lt;li>接下来，构建网络模型，利用 mseloss 作为损失函数，在训练过程中利用反向传播使其最终收敛为0。&lt;/li>
&lt;/ul>
&lt;p>$$
MseLoss = \frac{1}{2n}\sum||y(x)-a^L(x)||^2
$$&lt;/p>
&lt;ul>
&lt;li>最后，我们设置网络的学习率为0.01，训练10000个epoch，发现其loss最终降低到0.3%左右，我们利用上文提到的 $R^2$ 对结果进行评估并与回归模型进行对比，通过观察图片可以发现，前馈神经网络相比于传统的回归模型有着更好的拟合效果， 20次预测得到的$R^2$平均值达到了0.95，此外中位数，最大值，最小值也要比回归模型更加优秀，因此我们采用前馈神经网络模型来对最后的房价进行预测。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/2897732866.png" alt="添加前馈神经网络后与其他模型进行比较">&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/3640570809.jpg" alt="训练过程中的loss曲线">&lt;/p>
&lt;h3 id="最终预测">
最终预测
&lt;a class="heading-link" href="#%e6%9c%80%e7%bb%88%e9%a2%84%e6%b5%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    最终我们利用构建的前馈神经网络模型进行预测，利用测试集对其进行对比，绘制预测如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/1130005314.png" alt="predict_groundtruth.png">&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​    可以看到其中很多点都覆盖的很好，即预测准确。&lt;/p>
&lt;p>​    通过理论对模型进行量化分析，计算预测的 $R^2$
$$
R^2 = 1-\frac{\sum(\hat{y_i}-y_i)^2}{\sum(\bar{y}-y_i)^2} = 1-0.01357 = 0.98643=98.643%
$$
​    可以发现 $R^2$ 十分接近1，说明回归模型性能良好，符合要求。&lt;/p>
&lt;h3 id="实现代码">
实现代码
&lt;a class="heading-link" href="#%e5%ae%9e%e7%8e%b0%e4%bb%a3%e7%a0%81">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    代码放在我的Github了，其中写了较详细的README，链接为 &lt;a href="https://github.com/zzsqwq/BostonPredict">BostonPredict &lt;/a>&lt;/p>
&lt;h3 id="参考链接">
参考链接
&lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/89873990">很系统的波士顿房价预测研究报告（期中作业）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/gwj23/p/10604611.html">作业-机器学习-波士顿房价预测 四种回归算法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/48702850">基于Python预测波士顿房价&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/article/1574255">波士顿房价预测——回归分析案例（献给初学者）&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>2021RoboMaster中国赛比赛记录</title><link>https://zzsqwq.github.io/posts/173/</link><pubDate>Fri, 30 Apr 2021 17:32:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/173/</guid><description>&lt;p>[hplayer]
[Music server=&amp;ldquo;netease&amp;rdquo; id=&amp;ldquo;525278524&amp;rdquo; type=&amp;ldquo;song&amp;rdquo;/]
[/hplayer]&lt;/p>
&lt;h4 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    说起来的话今天距离比赛已经过去近一个月了，比赛结束一直想要记录一下and总结一下经验，但是实在是太懒了，临近五一假期，在四月的末尾为这次中国赛画一个句号吧。&lt;/p>
&lt;h4 id="比赛过程">
比赛过程
&lt;a class="heading-link" href="#%e6%af%94%e8%b5%9b%e8%bf%87%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    如果没记错的话比赛是3.30号（周二）去，4.1号（周四）结束，共三天。但是因为第三天没做什么有意义的事情，就只记录两天了。&lt;/p>
&lt;h5 id="第一天">
第一天
&lt;a class="heading-link" href="#%e7%ac%ac%e4%b8%80%e5%a4%a9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>​    第一天大概中午十点到的吧，去的时候登记完领了牌，就在当地布置场地了。到了场地上才发现，我们好像是拿的东西最多的，包括外接显示屏和集成主机，好像都基本没人带过去····集成主机拿了过去也没怎么用到，本来预想用到的哨岗相机因为 ROS 的通信问题也没能跑成，最后两个机器人还是各跑各的策略了。&lt;/p>
&lt;p>​    调试的时候出了一点问题，两个哨岗相机通过20m的USB延长线后，只有一个能连接，后来排查了一下，好像是因为有一条线是光纤USB3.0的线，跟相机的接口不兼容···这个问题还没想好怎么解决，可能会考虑到时候自己带一根USB延长线过去。&lt;/p>
&lt;p>​    犹记得调试的时候是和青海大学一起调的，有点可惜的是调试中的我方机器人一直在一个地方鬼畜。那晚上我记得大家熬到了很晚···很可惜的视觉因为用的是学习的框架可调性很差，并没有帮上太大的忙。&lt;/p>
&lt;h5 id="第二天">
第二天
&lt;a class="heading-link" href="#%e7%ac%ac%e4%ba%8c%e5%a4%a9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>​    第二天记得一共有三场比赛，分别是打哈工大，哈工大深圳，以及青海大学。&lt;/p>
&lt;p>​    在比赛过程中其实对视觉，我没有做太多的调整，主要还是大家在写导航和策略相关的东西吧。&lt;/p>
&lt;p>​    跟哈工大打的那一场二车因为没有写好启动判定被罚下了，一车因为点位有问题一直卡在障碍物上。&lt;/p>
&lt;p>​    跟哈工深和哈工大两场之间还隔了挺长时间，一个上午是一个下午，中间大家调试了很久，幸好在下午和哈工深打的时候基本没有鬼畜，可以正常的对局，只是因为实力不够强，很明显的一个问题就是视觉做的有问题吧，很多时间在朝着自己的队友打，还有就是会朝着场外的人员打，这是需要改进的点。&lt;/p>
&lt;p>​    跟青海大学打的那场，距和哈工深比赛结束只有十几分钟的间隔时间，大家调了一个小bug就又重新赶去检录了，虽然当时已知青海大学的战术是站在原地不动的，但是由于不知道哪里出问题了，比赛中前一分钟两车都没动，后一分钟二车虽然动起来了去吃了加成区，但是因为定位的一些问题，没有看到敌方机器人并且撞墙了··自己撞掉了60血，最后还是败了QAQ。&lt;/p>
&lt;p>​    所以就很耻辱的被3：0送走了，这样就结束了比赛日程。&lt;/p>
&lt;p>​    值得反思的事情很多吧，赛前虽然基本熬了一个多星期来调车，还是只在最后一天才开始连裁判系统联调，包括暑假效率不高等问题都是值得反思的···打完比赛心中大概已经有了一些改进点，也想把自己的一些调车心得等记录下来，但是因为时间以及学业上的一些事情等一直没去做，本来计划的五月初做好改进的视觉也一直没兑现，希望这个五一假期会有较大的突破吧，不过还要打数模···好累，不想动。&lt;/p>
&lt;p>​    最后，这一天还拿到了和Charm young的合照，还挺动容的，之前看Robomaster的一个宣传标语就是让工程师们成为明星，给他们一个展示的舞台，看到大家对Charm young的热情，深深的感受到了这一点。&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/04/2816211838.jpg" alt="与Charmyoung的合影">&lt;/p></description></item></channel></rss>