<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; on Zs&#39;s Blog</title>
    <link>https://blog.zzsqwq.cn/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Zs&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 09 Nov 2022 22:40:41 +0800</lastBuildDate><atom:link href="https://blog.zzsqwq.cn/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; 类使用注意事项</title>
      <link>https://blog.zzsqwq.cn/posts/cxx-class-skills/</link>
      <pubDate>Wed, 09 Nov 2022 22:40:41 +0800</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/cxx-class-skills/</guid>
      <description>前言 本文包含一些在使用 C++ 类时的注意事项，可避免一些常见问题，并能让你在写代码时更加自信。
因为目前我使用的是 C++ 17，所以仅保证以下内容在 C++ 17 中正确。
构造函数 对于单个参数的构造函数，推荐添加 explicit 关键字，防止隐式转换错误调用构造函数。 class DemoClass { explicit DemoClass(int test) { this-&amp;gt;test_ = test; } } 显式声明有参构造函数后，编译器不会自动生成无参构造函数，若需要，请添加 DemoClass() = default; class DemoClass { explicit DemoClass(int test) { this-&amp;gt;test_ = test; } DemoClass() = default; } 若子类中没有显式调用父类的构造函数，子类会默认调用父类的无参构造函数，如果父类没有无参构造函数，会报错。 析构函数 基类析构函数应该声明为 virtual，这样可以防止子类无法正确的析构。 由于基类析构函数为 virtual，派生类的析构函数应该显式的 override。 class DemoClass { virtual ~DemoClass() = default; } class ChildClass: public DemoClass { ~ChildClass() override { xxx; } } 成员变量默认值 对于类或局部作用域中未明确指定默认值的成员变量，其值遵循以下规则：</description>
    </item>
    
    <item>
      <title>为什么要使用条件变量？</title>
      <link>https://blog.zzsqwq.cn/posts/why-use-condition-variable/</link>
      <pubDate>Wed, 24 Aug 2022 23:37:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/why-use-condition-variable/</guid>
      <description>为什么要使用条件变量？ 前言 最近看了很多与线程有关的 C++ 新特性，条件变量是见的比较多的一个特性。
看的时候我发现，想要理解一个新的特性，关键的要看它的引入到底解决了哪些问题，没有什么特性我们要实现相同的功能要怎么做？
以我的理解来看，条件变量是一个线程间互相同步与通知的手段，他通过主动唤醒的方式减小了各个线程的开销，取代了简单但是消耗较大的一直被动循环检验与等待。
没有条件变量我们如何实现相同的需求？ 这里采用现代C++教程1 中关于条件变量的一个例子作为基础：
不使用条件变量版本 #include &amp;lt;queue&amp;gt; #include &amp;lt;chrono&amp;gt; #include &amp;lt;mutex&amp;gt; #include &amp;lt;thread&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;condition_variable&amp;gt; int main() { std::queue&amp;lt;int&amp;gt; produced_nums; std::mutex mtx; // 生产者 auto producer = [&amp;amp;]() { for (int i = 0; ; i++) { std::this_thread::sleep_for(std::chrono::milliseconds(900)); std::unique_lock&amp;lt;std::mutex&amp;gt; lock(mtx); std::cout &amp;lt;&amp;lt; &amp;#34;producing &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl; produced_nums.push(i); } }; // 消费者 auto consumer = [&amp;amp;]() { while (true) { { std::unique_lock&amp;lt;std::mutex&amp;gt; lock(mtx); if(produced_nums.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;大数类的实现</title>
      <link>https://blog.zzsqwq.cn/posts/64/</link>
      <pubDate>Mon, 06 Apr 2020 01:22:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/64/</guid>
      <description>&lt;h1 id=&#34;c大数类设计思路&#34;&gt;C++大数类设计思路&lt;/h1&gt;
&lt;h3 id=&#34;洛谷大数类httpswwwluogucomcnproblemu111551的评测结果开了氧气优化&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/U111551&#34;&gt;洛谷大数类&lt;/a&gt;的评测结果(开了氧气优化)&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.zzsqwq.cn/usr/uploads/2020/08/4200651250.png&#34; alt=&#34;BigNumber.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个第四个点真的优化不过去了QAQ，24W的数据，&lt;del&gt;丧心病狂&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
