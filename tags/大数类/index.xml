<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>大数类 on Zs's Blog</title><link>https://zzsqwq.github.io/tags/%E5%A4%A7%E6%95%B0%E7%B1%BB/</link><description>Recent content in 大数类 on Zs's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 06 Apr 2020 01:22:00 +0000</lastBuildDate><atom:link href="https://zzsqwq.github.io/tags/%E5%A4%A7%E6%95%B0%E7%B1%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>C++大数类的实现</title><link>https://zzsqwq.github.io/posts/64/</link><pubDate>Mon, 06 Apr 2020 01:22:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/64/</guid><description>&lt;h1 id="c大数类设计思路">
C++大数类设计思路
&lt;a class="heading-link" href="#c%e5%a4%a7%e6%95%b0%e7%b1%bb%e8%ae%be%e8%ae%a1%e6%80%9d%e8%b7%af">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;h3 id="洛谷大数类httpswwwluogucomcnproblemu111551的评测结果开了氧气优化">
&lt;a href="https://www.luogu.com.cn/problem/U111551">洛谷大数类&lt;/a>的评测结果(开了氧气优化)
&lt;a class="heading-link" href="#%e6%b4%9b%e8%b0%b7%e5%a4%a7%e6%95%b0%e7%b1%bbhttpswwwluogucomcnproblemu111551%e7%9a%84%e8%af%84%e6%b5%8b%e7%bb%93%e6%9e%9c%e5%bc%80%e4%ba%86%e6%b0%a7%e6%b0%94%e4%bc%98%e5%8c%96">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2020/08/4200651250.png" alt="BigNumber.png">&lt;/p>
&lt;p>&lt;strong>这个第四个点真的优化不过去了QAQ，24W的数据，&lt;del>丧心病狂&lt;/del>&lt;/strong>&lt;/p>
&lt;h3 id="整体构思">
整体构思
&lt;a class="heading-link" href="#%e6%95%b4%e4%bd%93%e6%9e%84%e6%80%9d">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    构造大数类名为 &lt;strong>BigNumber&lt;/strong> ,首先想法是用字符串读入大数，然后将其转化为vector数组倒序分位存储的整数，然后通过一个 &lt;strong>len&lt;/strong> 来记录数字的位数，便于做运算。还设计了一个标记变量，用于标记这数为正数还是负数。&lt;/p>
&lt;h3 id="构造函数">
构造函数
&lt;a class="heading-link" href="#%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    我用了两种构造函数，一个是无参构造函数，一个是拷贝构造函数，当然还有一个有参构造函数，但是实际过程中我没有用到。无参构造函数用于上述类成员的初始化，拷贝构造函数用于复制一个相同的大数类进行运算。有参构造函数可以用于对类成员的复制。&lt;/p>
&lt;h3 id="重载运算符">
重载运算符
&lt;a class="heading-link" href="#%e9%87%8d%e8%bd%bd%e8%bf%90%e7%ae%97%e7%ac%a6">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="重载-">
重载 &amp;ldquo;+&amp;rdquo;
&lt;a class="heading-link" href="#%e9%87%8d%e8%bd%bd-">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>首先在类中进行了声明, &lt;code>BigNumber operator + (const BigNumber &amp;amp;b);&lt;/code> ，用当前类 *&lt;strong>this&lt;/strong> 来和引入的类 &lt;strong>b&lt;/strong> 进行加法运算，返回值为一个 &lt;strong>BigNumber&lt;/strong> 类。&lt;/li>
&lt;li>在类的外部进行重载的定义，先将用拷贝构造函数将当前的类 *&lt;strong>this&lt;/strong> 拷贝为 &lt;strong>a&lt;/strong> ，然后对 &lt;strong>a&lt;/strong> 和 &lt;strong>b&lt;/strong> 进行加法运算，模拟竖式，对应位相加，大于10则进位，最后去掉尾部的 0 即可。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">//重载 &amp;#34;+&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
Result.len &lt;span style="color:#f92672">=&lt;/span> max(a.len,b.len)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">int&lt;/span> add&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>Result.len&lt;span style="color:#f92672">||&lt;/span>add&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">++&lt;/span>)
{
&lt;span style="color:#66d9ef">int&lt;/span> p&lt;span style="color:#f92672">=&lt;/span>add;
&lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.len) p&lt;span style="color:#f92672">+=&lt;/span>a.v[i];
&lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&lt;/span>b.len) p&lt;span style="color:#f92672">+=&lt;/span>b.v[i];
add&lt;span style="color:#f92672">=&lt;/span>p&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
Result.v.push_back(p&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>);
}
&lt;span style="color:#66d9ef">while&lt;/span>(Result.v[Result.v.size()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Result.v.size() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.pop_back();
}
Result.len&lt;span style="color:#f92672">=&lt;/span>Result.v.size();
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="重载--1">
重载 &amp;ldquo;&amp;lt;&amp;rdquo;
&lt;a class="heading-link" href="#%e9%87%8d%e8%bd%bd--1">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​    因为进行减法前需要比较两个大数类的大小，我就先重载了 &lt;strong>&amp;lt;&lt;/strong> 。思路就是先比较&lt;strong>a、b&lt;/strong>两个大数的长度，长的那个肯定比较大，如果两个长度相等。从尾部开始依次向前比较，如果不相等的话，就看两个数的相对大小，大的那个肯定整体比较大。如果总是相等，到了最后，就返回相应的值表示他们相等。&lt;strong>这里我的返回值为int类型，用的标记是：如果两个相等，返回-1，如果前者小于后者，返回1，如果前者大于后者，返回0.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">// 重载 &amp;#34;&amp;lt;&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span>(a.len &lt;span style="color:#f92672">&amp;lt;&lt;/span> b.len) &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span>(a.len &lt;span style="color:#f92672">&amp;gt;&lt;/span> b.len) &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>a.len&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">--&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span>(a.v[i]&lt;span style="color:#f92672">!=&lt;/span>b.v[i])
{
&lt;span style="color:#66d9ef">return&lt;/span> a.v[i] &lt;span style="color:#f92672">&amp;lt;&lt;/span> b.v[i];
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="重载--">
重载 &amp;ldquo;-&amp;rdquo;
&lt;a class="heading-link" href="#%e9%87%8d%e8%bd%bd--">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>首先在类中进行了声明, &lt;code>BigNumber operator - (BigNumber &amp;amp;b);&lt;/code> ，用当前类 *&lt;strong>this&lt;/strong> 来和引入的类 &lt;strong>b&lt;/strong> 进行减法运算，返回值为一个 &lt;strong>BigNumber&lt;/strong> 类。&lt;/li>
&lt;li>在类的外部进行重载的定义，先将用拷贝构造函数将当前的类 *&lt;strong>this&lt;/strong> 拷贝为 &lt;strong>a&lt;/strong> ，然后对 &lt;strong>a&lt;/strong> 和 &lt;strong>b&lt;/strong> 进行减法运算。如果 &lt;strong>a&amp;lt;b&lt;/strong> ，那么我们就把 &lt;strong>flag&lt;/strong> 设为 &lt;strong>true&lt;/strong> ，标志得数为一个负数，然后用 &lt;strong>swap&lt;/strong> 交换两个类，保证总是大数减小数。减法的话就是从前往后扫，对应位相减，如果不够减的就进行借位。如果借完位当前位置小于0了，那么就再向前借位。最后要去掉结尾多于的0.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">-&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">// 重载 &amp;#34;-&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
{
swap(a,b);
Result.flag&lt;span style="color:#f92672">=&lt;/span>true;
}
Result.len&lt;span style="color:#f92672">=&lt;/span>a.len;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.len;i&lt;span style="color:#f92672">++&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span>(a.v[i]&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
{
a.v[i]&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
a.v[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">--&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span>(a.v[i] &lt;span style="color:#f92672">&amp;lt;&lt;/span> b.v[i]&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>i&lt;span style="color:#f92672">&amp;lt;&lt;/span>b.len)
{
a.v[i]&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
a.v[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">--&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&lt;/span>b.len)
Result.v.push_back(a.v[i]&lt;span style="color:#f92672">-&lt;/span>b.v[i]);
&lt;span style="color:#66d9ef">else&lt;/span> Result.v.push_back(a.v[i]);
}
&lt;span style="color:#66d9ef">while&lt;/span>(Result.v[Result.len&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Result.len &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.pop_back();
Result.len&lt;span style="color:#f92672">--&lt;/span>;
}
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="重载--2">
重载 &amp;ldquo;*&amp;rdquo;
&lt;a class="heading-link" href="#%e9%87%8d%e8%bd%bd--2">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>首先在类中进行了声明, &lt;code>BigNumber operator * (BigNumber &amp;amp;b);&lt;/code>，用当前类 *&lt;strong>this&lt;/strong> 来和引入的类 &lt;strong>b&lt;/strong> 进行乘法运算，返回值为一个 &lt;strong>BigNumber&lt;/strong> 类。&lt;/li>
&lt;li>在类的外部进行重载的定义，先将用拷贝构造函数将当前的类 *&lt;strong>this&lt;/strong> 拷贝为 &lt;strong>a&lt;/strong> ，然后对 &lt;strong>a&lt;/strong> 和 &lt;strong>b&lt;/strong> 进行乘法运算。乘法也是模拟竖式运算，两个位数相乘对应的得数中的哪一位不难发现，因此只需要边乘边进位即可，一开始想的是所有乘完之后再进位，后来想了想运算的次序不会影响除和模的运算，所以就可以边乘边取商和模，可以少掉两层循环。算是一个小小的优化。最后要去掉结尾多于的0.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">// 重载 &amp;#34;*&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
Result.len&lt;span style="color:#f92672">=&lt;/span>a.len&lt;span style="color:#f92672">+&lt;/span>b.len;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>Result.len;i&lt;span style="color:#f92672">++&lt;/span>) Result.v.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.len;i&lt;span style="color:#f92672">++&lt;/span>)
{
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;&lt;/span>b.len;j&lt;span style="color:#f92672">++&lt;/span>)
{
Result.v[i&lt;span style="color:#f92672">+&lt;/span>j]&lt;span style="color:#f92672">+=&lt;/span>a.v[i]&lt;span style="color:#f92672">*&lt;/span>b.v[j];
Result.v[i&lt;span style="color:#f92672">+&lt;/span>j&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">+=&lt;/span>Result.v[i&lt;span style="color:#f92672">+&lt;/span>j]&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
Result.v[i&lt;span style="color:#f92672">+&lt;/span>j]&lt;span style="color:#f92672">%=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
}
}
&lt;span style="color:#66d9ef">while&lt;/span>(Result.v[Result.v.size()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Result.v.size() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.pop_back();
}
Result.len&lt;span style="color:#f92672">=&lt;/span>Result.v.size();
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="重载---1">
重载 &amp;ldquo;/&amp;rdquo;
&lt;a class="heading-link" href="#%e9%87%8d%e8%bd%bd---1">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>首先在类中进行了声明,&lt;code>BigNumber operator / (BigNumber &amp;amp;b);&lt;/code>，用当前类 *&lt;strong>this&lt;/strong> 来和引入的类 &lt;strong>b&lt;/strong> 进行除法运算，返回值为一个 &lt;strong>BigNumber&lt;/strong> 类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在类的外部进行重载的定义，先将用拷贝构造函数将当前的类 *&lt;strong>this&lt;/strong> 拷贝为 &lt;strong>a&lt;/strong> ，然后对 &lt;strong>a&lt;/strong> 和 &lt;strong>b&lt;/strong> 进行除法法运算。我选择了做除法的时候大数类中同时存储商和余数，这样可以加快效率，因为我自己的想法是把除法和取模一起处理，求得商的同时，模也能求出来。因此他们的框架肯定是相差无几的，所以我选择了一次性算出来两个，在大数类中用两个vector数组分别存商和余数，求商和余数我用的是减法的策略，分下面三种情况来讨论&lt;/p>
&lt;ul>
&lt;li>&lt;strong>a&amp;lt;b&lt;/strong> ：很显然商为0，余数为a。&lt;/li>
&lt;li>&lt;strong>a==b&lt;/strong> ：很显然商为1，余数为0。&lt;/li>
&lt;li>&lt;strong>a&amp;gt;b&lt;/strong> ：这个是最难处理的，我们想想一下模拟除法的竖式运算，先在b的后面填0，让a和b的位数相同，然后再一直对a进行减法运算，将得到的数排列起来即可。里面细节还是挺多的，具体的看代码。最后要去掉结尾多于的0.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">/&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">// 重载 &amp;#34;/&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.v.size();i&lt;span style="color:#f92672">++&lt;/span>)
{
Result.m.push_back(a.v[i]);
}
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.push_back(&lt;span style="color:#ae81ff">1&lt;/span>);
Result.m.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
Result.len&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
{
&lt;span style="color:#66d9ef">int&lt;/span> size &lt;span style="color:#f92672">=&lt;/span> a.len&lt;span style="color:#f92672">-&lt;/span>b.len;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>size;i&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">--&lt;/span>)
{
BigNumber &lt;span style="color:#a6e22e">p&lt;/span>(b);
&lt;span style="color:#66d9ef">int&lt;/span> cnt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;=&lt;/span>i;j&lt;span style="color:#f92672">++&lt;/span>)
{
p.v.insert(p.v.begin(),&lt;span style="color:#ae81ff">0&lt;/span>);
}
p.len &lt;span style="color:#f92672">=&lt;/span> p.v.size();
&lt;span style="color:#66d9ef">while&lt;/span>((a&lt;span style="color:#f92672">-&lt;/span>p).flag&lt;span style="color:#f92672">==&lt;/span>false)
{
a&lt;span style="color:#f92672">=&lt;/span>a&lt;span style="color:#f92672">-&lt;/span>p;
cnt&lt;span style="color:#f92672">++&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">==&lt;/span>size)
{
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;=&lt;/span>size;j&lt;span style="color:#f92672">++&lt;/span>)
{
Result.v.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
}
Result.v.push_back(cnt);
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
Result.v[i] &lt;span style="color:#f92672">=&lt;/span> cnt;
}
}
&lt;span style="color:#66d9ef">while&lt;/span>(Result.v[Result.v.size()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Result.v.size() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.pop_back();
}
Result.len&lt;span style="color:#f92672">=&lt;/span>Result.v.size();
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.v.size();i&lt;span style="color:#f92672">++&lt;/span>)
{
Result.m.push_back(a.v[i]);
}
}
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="重载--3">
重载 &amp;ldquo;%&amp;rdquo;
&lt;a class="heading-link" href="#%e9%87%8d%e8%bd%bd--3">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​ 这个和除法的类似，我们除法的其实已经求出来模了，这个只是象征性的搞一搞。QAQ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">%&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">//重载 &amp;#34;%&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b)
{
Result.v.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
&lt;span style="color:#66d9ef">int&lt;/span> size &lt;span style="color:#f92672">=&lt;/span> a.len&lt;span style="color:#f92672">-&lt;/span>b.len;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>size;i&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">--&lt;/span>)
{
BigNumber &lt;span style="color:#a6e22e">p&lt;/span>(b);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;=&lt;/span>i;j&lt;span style="color:#f92672">++&lt;/span>)
{
p.v.insert(p.v.begin(),&lt;span style="color:#ae81ff">0&lt;/span>);
}
p.len &lt;span style="color:#f92672">=&lt;/span> p.v.size();
&lt;span style="color:#66d9ef">while&lt;/span>((a&lt;span style="color:#f92672">-&lt;/span>p).flag&lt;span style="color:#f92672">==&lt;/span>false)
{
a&lt;span style="color:#f92672">=&lt;/span>a&lt;span style="color:#f92672">-&lt;/span>p;
}
}
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.v.size();i&lt;span style="color:#f92672">++&lt;/span>)
{
Result.v.push_back(a.v[i]);
}
}
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其中遇到的问题">
其中遇到的问题
&lt;a class="heading-link" href="#%e5%85%b6%e4%b8%ad%e9%81%87%e5%88%b0%e7%9a%84%e9%97%ae%e9%a2%98">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>在做减法的时候，会出现莫名奇怪的数据，后来发现是由于访问b数组的时候越界，而且vector数组的clear只是将数组的size置为了0，而不是将所有数据都莫抹除，而且vector通过下标访问越界还不会报错，我整个人都傻了，调了巨长时间。&lt;/li>
&lt;li>在做除法的时候，一度自闭。本来是只是一直减，这样效率真的巨tm慢。后来想到了用这个办法好像可以优化到 log 级别的，但是好难调试啊。。从昨天下午一直搞到现在。&lt;/li>
&lt;li>因为swap这个东西，好像会影响到类的源数据，所以我就多定义了几个数，分别对他们进行操作，这样就不会相互影响，虽然看起来挺丑的。&lt;/li>
&lt;/ul>
&lt;h3 id="整体的代码实现">
整体的代码实现
&lt;a class="heading-link" href="#%e6%95%b4%e4%bd%93%e7%9a%84%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> Name: BigNumber Class
&lt;/span>&lt;span style="color:#75715e"> Copyright: Zs
&lt;/span>&lt;span style="color:#75715e"> Author: Zs
&lt;/span>&lt;span style="color:#75715e"> Date: 04/04/20 09:08
&lt;/span>&lt;span style="color:#75715e"> Description: A BigNumber Class
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;cmath&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BigNumber&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> v; &lt;span style="color:#75715e">// 和，差，积，商
&lt;/span>&lt;span style="color:#75715e">&lt;/span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> m; &lt;span style="color:#75715e">// 余数，当无余数的时候 size 为0
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> len; &lt;span style="color:#75715e">// 数字的长度 = v.size()
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> flag; &lt;span style="color:#75715e">//是否为负数的标志
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
BigNumber();&lt;span style="color:#75715e">//无参构造函数
&lt;/span>&lt;span style="color:#75715e">&lt;/span> BigNumber(string s) &lt;span style="color:#75715e">//带参数的构造函数
&lt;/span>&lt;span style="color:#75715e">&lt;/span> {
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">=&lt;/span>s;
}
BigNumber(&lt;span style="color:#66d9ef">const&lt;/span> BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>); &lt;span style="color:#75715e">// 拷贝构造函数
&lt;/span>&lt;span style="color:#75715e">&lt;/span> BigNumber &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> string s); &lt;span style="color:#75715e">// 重载 &amp;#34;=&amp;#34; 声明
&lt;/span>&lt;span style="color:#75715e">&lt;/span> BigNumber &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> k); &lt;span style="color:#75715e">// 重载输入的数为整型的时候的 &amp;#34;=&amp;#34; 声明
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b); &lt;span style="color:#75715e">// 重载 &amp;#34;&amp;lt;&amp;#34; 声明
&lt;/span>&lt;span style="color:#75715e">&lt;/span> BigNumber &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b); &lt;span style="color:#75715e">// 重载 &amp;#34;+&amp;#34; 声明
&lt;/span>&lt;span style="color:#75715e">&lt;/span> BigNumber &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">-&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b); &lt;span style="color:#75715e">// 重载 &amp;#34;-&amp;#34; 声明
&lt;/span>&lt;span style="color:#75715e">&lt;/span> BigNumber &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b); &lt;span style="color:#75715e">// 重载 &amp;#34;*&amp;#34; 声明
&lt;/span>&lt;span style="color:#75715e">&lt;/span> BigNumber &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">/&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b); &lt;span style="color:#75715e">//重载 &amp;#34;/&amp;#34; 声明
&lt;/span>&lt;span style="color:#75715e">&lt;/span> BigNumber &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">%&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b); &lt;span style="color:#75715e">//重载 &amp;#34;%&amp;#34; 声明
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">print&lt;/span>() &lt;span style="color:#75715e">//输出函数
&lt;/span>&lt;span style="color:#75715e">&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span>(flag)
{
printf(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>);
flag&lt;span style="color:#f92672">=&lt;/span>false;
}
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>v.size()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">--&lt;/span>) printf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>,v[i]);
printf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>m.size()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">--&lt;/span>) printf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>,m[i]);
}
};
BigNumber&lt;span style="color:#f92672">::&lt;/span>BigNumber() &lt;span style="color:#75715e">//无参构造函数
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
v.clear();
m.clear();
len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
flag&lt;span style="color:#f92672">=&lt;/span>false;
}
BigNumber&lt;span style="color:#f92672">::&lt;/span>BigNumber(&lt;span style="color:#66d9ef">const&lt;/span> BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>T) &lt;span style="color:#75715e">// 拷贝构造函数
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
v.assign(T.v.begin(),T.v.end());
len &lt;span style="color:#f92672">=&lt;/span> T.len;
flag &lt;span style="color:#f92672">=&lt;/span> T.flag;
}
BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> string s) &lt;span style="color:#75715e">// 重载 &amp;#34;=&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
len &lt;span style="color:#f92672">=&lt;/span> s.length();
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>len;i&lt;span style="color:#f92672">++&lt;/span>)
{
v.push_back(s[len&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">-&lt;/span>i]&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>);
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>;
}
BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> k) &lt;span style="color:#75715e">// 重载输入的数为整型的时候的 &amp;#34;=&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
&lt;span style="color:#66d9ef">while&lt;/span>(k)
{
v.push_back(k&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>);
k&lt;span style="color:#f92672">/=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
len&lt;span style="color:#f92672">++&lt;/span>;
}
len&lt;span style="color:#f92672">--&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>;
}
&lt;span style="color:#66d9ef">int&lt;/span> BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">// 重载 &amp;#34;&amp;lt;&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span>(a.len &lt;span style="color:#f92672">&amp;lt;&lt;/span> b.len) &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span>(a.len &lt;span style="color:#f92672">&amp;gt;&lt;/span> b.len) &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>a.len&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">--&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span>(a.v[i]&lt;span style="color:#f92672">!=&lt;/span>b.v[i])
{
&lt;span style="color:#66d9ef">return&lt;/span> a.v[i] &lt;span style="color:#f92672">&amp;lt;&lt;/span> b.v[i];
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
}
BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">//重载 &amp;#34;+&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
Result.len &lt;span style="color:#f92672">=&lt;/span> max(a.len,b.len)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">int&lt;/span> add&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>Result.len&lt;span style="color:#f92672">||&lt;/span>add&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">++&lt;/span>)
{
&lt;span style="color:#66d9ef">int&lt;/span> p&lt;span style="color:#f92672">=&lt;/span>add;
&lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.len) p&lt;span style="color:#f92672">+=&lt;/span>a.v[i];
&lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&lt;/span>b.len) p&lt;span style="color:#f92672">+=&lt;/span>b.v[i];
add&lt;span style="color:#f92672">=&lt;/span>p&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
Result.v.push_back(p&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>);
}
&lt;span style="color:#66d9ef">while&lt;/span>(Result.v[Result.v.size()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Result.v.size() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.pop_back();
}
Result.len&lt;span style="color:#f92672">=&lt;/span>Result.v.size();
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">-&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">// 重载 &amp;#34;-&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
{
swap(a,b);
Result.flag&lt;span style="color:#f92672">=&lt;/span>true;
}
Result.len&lt;span style="color:#f92672">=&lt;/span>a.len;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.len;i&lt;span style="color:#f92672">++&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span>(a.v[i]&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
{
a.v[i]&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
a.v[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">--&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span>(a.v[i] &lt;span style="color:#f92672">&amp;lt;&lt;/span> b.v[i]&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>i&lt;span style="color:#f92672">&amp;lt;&lt;/span>b.len)
{
a.v[i]&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
a.v[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">--&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&lt;/span>b.len)
Result.v.push_back(a.v[i]&lt;span style="color:#f92672">-&lt;/span>b.v[i]);
&lt;span style="color:#66d9ef">else&lt;/span> Result.v.push_back(a.v[i]);
}
&lt;span style="color:#66d9ef">while&lt;/span>(Result.v[Result.len&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Result.len &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.pop_back();
Result.len&lt;span style="color:#f92672">--&lt;/span>;
}
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">// 重载 &amp;#34;*&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
Result.len&lt;span style="color:#f92672">=&lt;/span>a.len&lt;span style="color:#f92672">+&lt;/span>b.len;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>Result.len;i&lt;span style="color:#f92672">++&lt;/span>) Result.v.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.len;i&lt;span style="color:#f92672">++&lt;/span>)
{
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;&lt;/span>b.len;j&lt;span style="color:#f92672">++&lt;/span>)
{
Result.v[i&lt;span style="color:#f92672">+&lt;/span>j]&lt;span style="color:#f92672">+=&lt;/span>a.v[i]&lt;span style="color:#f92672">*&lt;/span>b.v[j];
Result.v[i&lt;span style="color:#f92672">+&lt;/span>j&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">+=&lt;/span>Result.v[i&lt;span style="color:#f92672">+&lt;/span>j]&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
Result.v[i&lt;span style="color:#f92672">+&lt;/span>j]&lt;span style="color:#f92672">%=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>;
}
}
&lt;span style="color:#66d9ef">while&lt;/span>(Result.v[Result.v.size()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Result.v.size() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.pop_back();
}
Result.len&lt;span style="color:#f92672">=&lt;/span>Result.v.size();
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">/&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">// 重载 &amp;#34;/&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.v.size();i&lt;span style="color:#f92672">++&lt;/span>)
{
Result.m.push_back(a.v[i]);
}
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.push_back(&lt;span style="color:#ae81ff">1&lt;/span>);
Result.m.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
Result.len&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
{
&lt;span style="color:#66d9ef">int&lt;/span> size &lt;span style="color:#f92672">=&lt;/span> a.len&lt;span style="color:#f92672">-&lt;/span>b.len;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>size;i&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">--&lt;/span>)
{
BigNumber &lt;span style="color:#a6e22e">p&lt;/span>(b);
&lt;span style="color:#66d9ef">int&lt;/span> cnt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;=&lt;/span>i;j&lt;span style="color:#f92672">++&lt;/span>)
{
p.v.insert(p.v.begin(),&lt;span style="color:#ae81ff">0&lt;/span>);
}
p.len &lt;span style="color:#f92672">=&lt;/span> p.v.size();
&lt;span style="color:#66d9ef">while&lt;/span>((a&lt;span style="color:#f92672">-&lt;/span>p).flag&lt;span style="color:#f92672">==&lt;/span>false)
{
a&lt;span style="color:#f92672">=&lt;/span>a&lt;span style="color:#f92672">-&lt;/span>p;
cnt&lt;span style="color:#f92672">++&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">==&lt;/span>size)
{
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;=&lt;/span>size;j&lt;span style="color:#f92672">++&lt;/span>)
{
Result.v.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
}
Result.v.push_back(cnt);
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
Result.v[i] &lt;span style="color:#f92672">=&lt;/span> cnt;
}
}
&lt;span style="color:#66d9ef">while&lt;/span>(Result.v[Result.v.size()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Result.v.size() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
{
Result.v.pop_back();
}
Result.len&lt;span style="color:#f92672">=&lt;/span>Result.v.size();
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.v.size();i&lt;span style="color:#f92672">++&lt;/span>)
{
Result.m.push_back(a.v[i]);
}
}
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
BigNumber BigNumber&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">%&lt;/span> (BigNumber &lt;span style="color:#f92672">&amp;amp;&lt;/span>b) &lt;span style="color:#75715e">//重载 &amp;#34;%&amp;#34; 定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
BigNumber Result;
BigNumber &lt;span style="color:#a6e22e">a&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b)
{
Result.v.push_back(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
&lt;span style="color:#66d9ef">int&lt;/span> size &lt;span style="color:#f92672">=&lt;/span> a.len&lt;span style="color:#f92672">-&lt;/span>b.len;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>size;i&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">--&lt;/span>)
{
BigNumber &lt;span style="color:#a6e22e">p&lt;/span>(b);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;=&lt;/span>i;j&lt;span style="color:#f92672">++&lt;/span>)
{
p.v.insert(p.v.begin(),&lt;span style="color:#ae81ff">0&lt;/span>);
}
p.len &lt;span style="color:#f92672">=&lt;/span> p.v.size();
&lt;span style="color:#66d9ef">while&lt;/span>((a&lt;span style="color:#f92672">-&lt;/span>p).flag&lt;span style="color:#f92672">==&lt;/span>false)
{
a&lt;span style="color:#f92672">=&lt;/span>a&lt;span style="color:#f92672">-&lt;/span>p;
}
}
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>a.v.size();i&lt;span style="color:#f92672">++&lt;/span>)
{
Result.v.push_back(a.v[i]);
}
}
&lt;span style="color:#66d9ef">return&lt;/span> Result;
}
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>()
{
&lt;span style="color:#75715e">// freopen(&amp;#34;test.in&amp;#34;,&amp;#34;r&amp;#34;,stdin);
&lt;/span>&lt;span style="color:#75715e">// freopen(&amp;#34;test.out&amp;#34;,&amp;#34;w&amp;#34;,stdout);
&lt;/span>&lt;span style="color:#75715e">&lt;/span> string s1,s2;
cin&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>s1&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>s2;
BigNumber a,b,c,e,f,k,j;
a&lt;span style="color:#f92672">=&lt;/span>s1,b&lt;span style="color:#f92672">=&lt;/span>s2;
e&lt;span style="color:#f92672">=&lt;/span>s1,f&lt;span style="color:#f92672">=&lt;/span>s2;
k&lt;span style="color:#f92672">=&lt;/span>s1,j&lt;span style="color:#f92672">=&lt;/span>s2;
c&lt;span style="color:#f92672">=&lt;/span>a&lt;span style="color:#f92672">+&lt;/span>b;
c.print();
c&lt;span style="color:#f92672">=&lt;/span>a&lt;span style="color:#f92672">-&lt;/span>b;
c.print();
c&lt;span style="color:#f92672">=&lt;/span>k&lt;span style="color:#f92672">*&lt;/span>j;
c.print();
c&lt;span style="color:#f92672">=&lt;/span>e&lt;span style="color:#f92672">%&lt;/span>f;
c.print();
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>