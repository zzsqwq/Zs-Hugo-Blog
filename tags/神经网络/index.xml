<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>神经网络 on Zs's Blog</title><link>https://zzsqwq.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link><description>Recent content in 神经网络 on Zs's Blog</description><generator>Hugo -- gohugo.io</generator><language>cn</language><lastBuildDate>Sun, 16 May 2021 15:19:00 +0000</lastBuildDate><atom:link href="https://zzsqwq.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>利用神经网络进行波士顿房价预测</title><link>https://zzsqwq.github.io/posts/182/</link><pubDate>Sun, 16 May 2021 15:19:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/182/</guid><description>&lt;h3 id="前言">
前言
&lt;a class="heading-link" href="#%e5%89%8d%e8%a8%80">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    前一阵学校有五一数模节校赛，和朋友一起参加做B题，波士顿房价预测，算是第一次自己动手实现一个简单的小网络吧，虽然很简单，但还是想记录一下。&lt;/p>
&lt;h3 id="题目介绍">
题目介绍
&lt;a class="heading-link" href="#%e9%a2%98%e7%9b%ae%e4%bb%8b%e7%bb%8d">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    波士顿住房数据由哈里森和鲁宾菲尔德于1978年Harrison and Rubinfeld&lt;!-- raw HTML omitted -->&lt;a href="https://www.zzsqwq.cn/usr/uploads/2021/05/406125417.png">1&lt;/a>&lt;!-- raw HTML omitted -->收集。它包括了波士顿大区每个调查行政区的506个观察值。1980年Belsley et al.&lt;!-- raw HTML omitted -->&lt;a href="https://www.zzsqwq.cn/usr/uploads/2021/05/3238192089.png">2&lt;/a>&lt;!-- raw HTML omitted -->曾对此数据做过分析。&lt;/p>
&lt;p>​    数据一共14列，每一列的含义分别如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文简称&lt;/th>
&lt;th>详细含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CRIM&lt;/td>
&lt;td>城镇的人均犯罪率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ZN&lt;/td>
&lt;td>大于25,000平方英尺的地块的住宅用地比例。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>INDUS&lt;/td>
&lt;td>每个镇的非零售业务英亩的比例。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CHAS&lt;/td>
&lt;td>查尔斯河虚拟变量（如果环河，则等于1；否则等于0）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NOX&lt;/td>
&lt;td>一氧化氮的浓度（百万分之几）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RM&lt;/td>
&lt;td>每个住宅的平均房间数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AGE&lt;/td>
&lt;td>1940年之前建造的自有住房的比例&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DIS&lt;/td>
&lt;td>到五个波士顿就业中心的加权距离&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RAD&lt;/td>
&lt;td>径向公路通达性的指标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TAX&lt;/td>
&lt;td>每一万美元的全值财产税率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PTRATIO&lt;/td>
&lt;td>各镇的师生比率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>计算方法为 $1000(B_k-0.63)^2$，其中Bk是按城镇划分的非裔美国人的比例&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LSTAT&lt;/td>
&lt;td>底层人口的百分比(%)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>price&lt;/strong>&lt;/td>
&lt;td>自有住房数的中位数，单位（千美元）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>​    基于上述数据，请完成以下问题：&lt;/p>
&lt;p>​    &lt;strong>建立波士顿房价预测模型并对预测结果进行评价。&lt;/strong>&lt;/p>
&lt;h3 id="问题分析">
问题分析
&lt;a class="heading-link" href="#%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    首先这道题目的很明确，数据一共是 $506×14$ 的一个矩阵，有十三维的自变量，通过建立一个模型来拟合回归出最终的因变量 price，即户主拥有住房价值的中位数。这是一个回归问题，综合考虑有以下两个思路&lt;/p>
&lt;ol>
&lt;li>
&lt;p>通过各种回归算法（GradientBoostingRegressor，RandomForestRegressor，ExtraTreesRegressor，LinearRegressor等）结合全部或部分自变量来回归最终的price&lt;/p>
&lt;/li>
&lt;li>
&lt;p>建立前馈神经网络模型，根据通用逼近定理，我们可以拟合此回归模型。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​    我们对上述模型来进行实现并确定评估标准来对他们进行比较，选择最优的模型作为预测模型。&lt;/p>
&lt;h3 id="算法流程">
算法流程
&lt;a class="heading-link" href="#%e7%ae%97%e6%b3%95%e6%b5%81%e7%a8%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="传统的回归算法">
传统的回归算法
&lt;a class="heading-link" href="#%e4%bc%a0%e7%bb%9f%e7%9a%84%e5%9b%9e%e5%bd%92%e7%ae%97%e6%b3%95">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;h5 id="自变量的选择">
自变量的选择
&lt;a class="heading-link" href="#%e8%87%aa%e5%8f%98%e9%87%8f%e7%9a%84%e9%80%89%e6%8b%a9">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>​    首先，考虑到数据集中13列自变量其中某一些可能和最终的房价并无强相关性，如果全部使用进行预测可能会对模型引入噪声，因此我们首先计算了房价price与各个自变量之间的相关系数 $r$ ，其中 $r$ 计算公式如下：
$$
r = \frac{\sum(x_i-\bar{x})(y_i-\bar{y})}{\sqrt{\sum(x_i-\bar{x})^2\sum(y_i-\bar{y})^2}}
$$
​    其中 $x_i,y_i$ 为数据的每个分量，$\bar{x}，\bar{y}$ 为数据的均值&lt;/p>
&lt;p>​    该系数反映了两变量之间的相关性，$r$ 的绝对值介于 $[0,1]$ 区间内，$|r|$ 越接近1，表示两数据相关性越高，反之越低。计算后结果如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CRIM&lt;/th>
&lt;th>ZN&lt;/th>
&lt;th>INDUS&lt;/th>
&lt;th>CHAS&lt;/th>
&lt;th>NOX&lt;/th>
&lt;th>RM&lt;/th>
&lt;th>LSTAT&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-0.385832&lt;/td>
&lt;td>0.360445&lt;/td>
&lt;td>-0.483725&lt;/td>
&lt;td>0.175260&lt;/td>
&lt;td>-0.427321&lt;/td>
&lt;td>0.695360&lt;/td>
&lt;td>-0.737663&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>AGE&lt;/strong>&lt;/td>
&lt;td>&lt;strong>DIS&lt;/strong>&lt;/td>
&lt;td>&lt;strong>RAD&lt;/strong>&lt;/td>
&lt;td>&lt;strong>TAX&lt;/strong>&lt;/td>
&lt;td>&lt;strong>PTRATIO&lt;/strong>&lt;/td>
&lt;td>&lt;strong>B&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-0.376955&lt;/td>
&lt;td>0.249929&lt;/td>
&lt;td>-0.381626&lt;/td>
&lt;td>-0.468536&lt;/td>
&lt;td>-0.507787&lt;/td>
&lt;td>0.333461&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>​    观察结果可以发现，在给定的十三个变量中，&lt;strong>LSTAT &lt;strong>与 &lt;strong>price&lt;/strong> 的相关程度最高$(|r|&amp;gt;0.7)$，其次是 &lt;strong>RM&lt;/strong> 与&lt;/strong>PTRATIO&lt;/strong> $(|r|&amp;gt;0.5)$，再者是 &lt;strong>TAX,INDUS,NOX&lt;/strong> $(|r|&amp;gt;0.4)$，除上述之外的七个变量都与 &lt;strong>price&lt;/strong> 无较强的相关性，因此我们考虑使用六个相关性较强变量和十三个变量分别来对房价进行预测，并对他们进行对比，来寻找最优的回归模型。&lt;/p>
&lt;h5 id="模型的构建">
模型的构建
&lt;a class="heading-link" href="#%e6%a8%a1%e5%9e%8b%e7%9a%84%e6%9e%84%e5%bb%ba">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>首先我们使用了sklearn中自带的 boston 数据集，并将整体数据集随机划分为了训练集和测试集两部分，所占比例分别为80%和20%。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后，我们利用Linear,Ridge,Lasso,ElasticNet,DecisionTree,GradientBoosting,RandomForest,ExtraTrees八种模型通过训练集对其进行训练。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接下来，我们利用训练集拟合得到的模型，使用测试集对其进行测试，与 Ground Truth 进行对比，并通过 $R^2$ 来评价该预测结果，其中 $R^2$ 计算公式如下，其是衡量回归模型好坏的常见指标，其值一般处于[0,1]之间，$R^2$ 越接近1，说明模型的性能越好。
$$
R^2 = 1-\frac{\sum(\hat{y_i}-y_i)^2}{\sum(\bar{y}-y_i)^2}
$$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，考虑到模型的训练及预测可能具有偶然性，因此我们对于每一个模型进行20次训练及预测，利用20次的结果对其进行综合评价。利用得到的结果绘制 &lt;strong>箱线图&lt;/strong> 所得结果如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/406125417.png" alt="使用六变量和十三个变量进行拟合的对比">&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​    分析最终结果可以发现，无论是使用六个相关性较强变量还是十三个变量来进行预测，GradientBoost（梯度提升决策树）回归模型都是最好的，此外，我们可以发现，利用十三个变量要比利用六个主要变量来进行预测比有着更好的效果。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="前馈神经网络">
前馈神经网络
&lt;a class="heading-link" href="#%e5%89%8d%e9%a6%88%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;h5 id="模型的构建-1">
模型的构建
&lt;a class="heading-link" href="#%e6%a8%a1%e5%9e%8b%e7%9a%84%e6%9e%84%e5%bb%ba-1">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>​    近年来，神经网络理论不断发展，前馈神经网络（多层感知机、全连接神经网络）越来越多的被利用到数据分析中，因此考虑使用前馈神经网络来解决此问题。&lt;/p>
&lt;p>​    前馈神经网络（全连接神经网络）的网络结构一般由三部分构成，输入层，隐藏层，以及输出层，输入层与输出层一般只有一层，隐藏层可有多层。中间利用非线性函数作为激活函数可以使得网络具有拟合非线性函数的能力&lt;/p>
&lt;p>​    根据通用近似定理:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>通用近似定理&lt;/strong>&lt;/p>
&lt;p>对于具有线性输出层和至少一个使用“挤压”性质的激活函数的隐藏层组成的前馈神经网络，只要其隐藏层神经元的数量足够，它可以以任意精度来近似任何从一个定义在实数空间中的有界闭集函数。&lt;/p>
&lt;/blockquote>
&lt;p>​    只要隐藏层网络维度够高，就可以拟合任意的函数。&lt;/p>
&lt;p>​    考虑到我们的模型有六维or十三维的数据输入，因此我们建立两层前馈神经网络，中间具有一层隐藏层，维度为1000维，激活函数使用Relu，Relu函数有以下优点:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Relu相比于传统的Sigmoid、Tanh，导数更加好求，反向传播就是不断的更新参数的过程，因为其导数不复杂形式简单，可以使得网络训练更快速。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此外，当数值过大或者过小，Sigmoid，Tanh的导数接近于0，Relu为非饱和激活函数则不存在这种现象，可以很好的解决梯度消失的问题&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​    Relu函数及网络结构图如图所示：&lt;/p>
&lt;p>$$
Relu:f(x) = max(0,x)
$$&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/3238192089.png" alt="构建的前馈神经网络结构图">&lt;/p>
&lt;h5 id="具体实现">
具体实现
&lt;a class="heading-link" href="#%e5%85%b7%e4%bd%93%e5%ae%9e%e7%8e%b0">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h5>
&lt;p>​    利用流行的深度学习框架 &lt;strong>Pytorch&lt;/strong> 来对模型进行实现。&lt;/p>
&lt;ul>
&lt;li>首先，将数据集随机划分为训练集和测试集两部分，分别占80%和20%，并将其转化为Pytorch中的张量形式。&lt;/li>
&lt;li>然后，利用MinMaxScaler对输入数据进行归一化，利用下列公式将其统一归一化为 $[0,1]$ 之间，以求模型能够更快的收敛。&lt;/li>
&lt;/ul>
&lt;p>$$
MinMaxScaler:x^{*} = \frac{x-min(x)}{max(x)-min(x)}
$$&lt;/p>
&lt;ul>
&lt;li>接下来，构建网络模型，利用 mseloss 作为损失函数，在训练过程中利用反向传播使其最终收敛为0。&lt;/li>
&lt;/ul>
&lt;p>$$
MseLoss = \frac{1}{2n}\sum||y(x)-a^L(x)||^2
$$&lt;/p>
&lt;ul>
&lt;li>最后，我们设置网络的学习率为0.01，训练10000个epoch，发现其loss最终降低到0.3%左右，我们利用上文提到的 $R^2$ 对结果进行评估并与回归模型进行对比，通过观察图片可以发现，前馈神经网络相比于传统的回归模型有着更好的拟合效果， 20次预测得到的$R^2$平均值达到了0.95，此外中位数，最大值，最小值也要比回归模型更加优秀，因此我们采用前馈神经网络模型来对最后的房价进行预测。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/2897732866.png" alt="添加前馈神经网络后与其他模型进行比较">&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/3640570809.jpg" alt="训练过程中的loss曲线">&lt;/p>
&lt;h3 id="最终预测">
最终预测
&lt;a class="heading-link" href="#%e6%9c%80%e7%bb%88%e9%a2%84%e6%b5%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    最终我们利用构建的前馈神经网络模型进行预测，利用测试集对其进行对比，绘制预测如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/05/1130005314.png" alt="predict_groundtruth.png">&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​    可以看到其中很多点都覆盖的很好，即预测准确。&lt;/p>
&lt;p>​    通过理论对模型进行量化分析，计算预测的 $R^2$
$$
R^2 = 1-\frac{\sum(\hat{y_i}-y_i)^2}{\sum(\bar{y}-y_i)^2} = 1-0.01357 = 0.98643=98.643%
$$
​    可以发现 $R^2$ 十分接近1，说明回归模型性能良好，符合要求。&lt;/p>
&lt;h3 id="实现代码">
实现代码
&lt;a class="heading-link" href="#%e5%ae%9e%e7%8e%b0%e4%bb%a3%e7%a0%81">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​    代码放在我的Github了，其中写了较详细的README，链接为 &lt;a href="https://github.com/zzsqwq/BostonPredict">BostonPredict &lt;/a>&lt;/p>
&lt;h3 id="参考链接">
参考链接
&lt;a class="heading-link" href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/89873990">很系统的波士顿房价预测研究报告（期中作业）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/gwj23/p/10604611.html">作业-机器学习-波士顿房价预测 四种回归算法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/48702850">基于Python预测波士顿房价&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/article/1574255">波士顿房价预测——回归分析案例（献给初学者）&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>如何使用CenterNet做3D目标检测测试</title><link>https://zzsqwq.github.io/posts/164/</link><pubDate>Wed, 27 Jan 2021 11:50:00 +0000</pubDate><guid>https://zzsqwq.github.io/posts/164/</guid><description>&lt;h2 id="centernetobjects-as-points介绍">
CenterNet—Objects as Points介绍
&lt;a class="heading-link" href="#centernetobjects-as-points%e4%bb%8b%e7%bb%8d">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>​ &lt;a href="https://github.com/xingyizhou/CenterNet">CenterNet&lt;/a>是一个anchor-free的目标检测网络，与YOLOv3相比，精度有所提升，此外他不仅能够用于2D目标检测，也能够用于人体姿态识别，3D目标检测等···&lt;/p>
&lt;h3 id="安装centernet">
安装CenterNet
&lt;a class="heading-link" href="#%e5%ae%89%e8%a3%85centernet">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​ 其实安装&lt;a href="https://github.com/xingyizhou/CenterNet">CenterNet&lt;/a>的过程就是一个配置环境的问题，直接跟着官方给出的这里&lt;a href="https://github.com/xingyizhou/CenterNet/blob/master/readme/INSTALL.md">Install.md&lt;/a>配置一下即可，十分推荐使用Conda来管理环境，这里给出我的环境给大家参考一下：&lt;/p>
&lt;blockquote>
&lt;p>Ubuntu = 18.04 LTS&lt;/p>
&lt;p>pytorch = 1.2.0&lt;/p>
&lt;p>python = 3.6.12&lt;/p>
&lt;p>torchvision = 0.4.0&lt;/p>
&lt;p>cuda = 10.2&lt;/p>
&lt;/blockquote>
&lt;p>​ 需要注意的是：&lt;/p>
&lt;ul>
&lt;li>官方给出的教程里面使用的是 &lt;code>pytorch 0.4.1&lt;/code>，但是我个人在实测过程中遇到了一些问题，遂安装网上的教程更改为 &lt;code>pytorch 1.2.0&lt;/code>，并且需要把 &lt;code>${CenterNet_Root}/src/lib/models/networks/DCNv2&lt;/code> 中的这个&lt;a href="https://github.com/CharlesShang/DCNv2">DCNv2&lt;/a>网络更改为官方的最新版。&lt;/li>
&lt;li>这里使用的cuda版本最好和你的显卡匹配，之前因为显卡驱动的一些问题导致重装了电脑，根据我们学长学姐的建议，最好直接去cuda官网那边去下载deb包直接安装。&lt;/li>
&lt;li>遇到环境配置问题可以先去Google一下，一般作者都在CenterNet&amp;rsquo;s Issues中给出了回复，如果没有，可以发邮件给作者询问，当然也可以发消息/邮箱给我，大家一起探讨一下~&lt;/li>
&lt;/ul>
&lt;h3 id="运行centernet的demo">
运行CenterNet的demo
&lt;a class="heading-link" href="#%e8%bf%90%e8%a1%8ccenternet%e7%9a%84demo">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>​ 想要运行demo，首先要去 &lt;a href="https://github.com/xingyizhou/CenterNet/blob/master/readme/MODEL_ZOO.md">Model zoo&lt;/a> 中下载一下我们需要使用的model，2D目标检测使用的是 &lt;a href="https://drive.google.com/open?id=1pl_-ael8wERdUREEnaIfqOV_VF2bEVRT">ctdet_coco_dla_2x.pth&lt;/a> ，人体姿态评估使用的是 &lt;a href="https://drive.google.com/open?id=1PO1Ax_GDtjiemEmDVD7oPWwqQkUu28PI">multi_pose_dla_3x.pth&lt;/a> ，下载后统一将他们放在CenterNet根目录中的model文件夹中。&lt;/p>
&lt;p>​ 然后使用conda切换到CenterNet的环境，在终端中运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">python demo.py ctdet --demo &lt;span style="color:#e6db74">${&lt;/span>CenterNet_Root&lt;span style="color:#e6db74">}&lt;/span>/images/17790319373_bd19b24cfc_k.jpg --load_model ../models/ctdet_coco_dla_2x.pth
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​ 这里需要注意的是 &lt;code>--demo&lt;/code> 后面的 &lt;code>${CenterNet_Root}/images/17790319373_bd19b24cfc_k.jpg&lt;/code> ，这里我使用的是官方给出的实例图片，它位于CenterNet根目录的images文件夹中，前面的 &lt;code>${CenterNet_Root} &lt;/code> 代表的是 CenterNet根目录，好比我的就位于 &lt;code>/home/zs/CenterNet&lt;/code> 。&lt;/p>
&lt;p>​ 如果不出意外的话效果应该如下图所示：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/01/2469782097.jpg" alt="2D目标检测效果">&lt;/p>
&lt;h3 id="运行centernet的3d目标检测">
运行CenterNet的3D目标检测
&lt;a class="heading-link" href="#%e8%bf%90%e8%a1%8ccenternet%e7%9a%843d%e7%9b%ae%e6%a0%87%e6%a3%80%e6%b5%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="配置数据集和模型">
配置数据集和模型
&lt;a class="heading-link" href="#%e9%85%8d%e7%bd%ae%e6%95%b0%e6%8d%ae%e9%9b%86%e5%92%8c%e6%a8%a1%e5%9e%8b">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​ 我们可以直接参考官方的 &lt;code>DATA.md&lt;/code> 来配置我们的数据集。&lt;/p>
&lt;p>​ 然后到 &lt;a href="https://github.com/xingyizhou/CenterNet/blob/master/readme/MODEL_ZOO.md">Model zoo&lt;/a> 下载3D检测使用的模型 &lt;a href="https://drive.google.com/open?id=1znsM6E-aVTkATreDuUVxoU0ajL1az8rz">ddd_3dop.pth&lt;/a> 。&lt;/p>
&lt;p>​ 这里说一下遇到的几个坑：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先是配置数据集的过程中，我们需要配置的目录结构如图所示（官方给出的结构树有点模糊不清的感觉）&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── ImageSets_3dop
│   ├── test.txt
│   ├── train.txt
│   ├── trainval.txt
│   └── val.txt
├── ImageSets_subcnn
│   ├── test.txt
│   ├── train.txt
│   ├── trainval.txt
│   └── val.txt
└── training
├── calib
├── image_2
└── label_2
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>然后去到 &lt;code>${CenterNet_ROOT}/src/tools&lt;/code>目录下，运行 &lt;code>python convert_kitti_to_coco.py &lt;/code> 将 &lt;strong>kitti&lt;/strong> 数据集转换为 &lt;strong>coco&lt;/strong> 数据集的格式，不出意外应该会报错如下：&lt;/p>
&lt;p>&lt;img src="https://www.zzsqwq.cn/usr/uploads/2021/01/3420056939.png" alt="转换时报错">&lt;/p>
&lt;p>这里的解决方案参考CenterNet中的一个Issue , &lt;a href="https://github.com/xingyizhou/CenterNet/issues/54">How to generate the image dir in kitti?&lt;/a> ，我们需要回到 &lt;code>data/kitti&lt;/code> 目录下手动创建一个 &lt;code>annotations&lt;/code> 文件夹，然后再回去运行转换程序。转换后目录结构如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── annotations
│   ├── kitti_3dop_train.json
│   ├── kitti_3dop_val.json
│   ├── kitti_subcnn_train.json
│   └── kitti_subcnn_val.json
├── ImageSets_3dop
│   ├── test.txt
│   ├── train.txt
│   ├── trainval.txt
│   └── val.txt
├── ImageSets_subcnn
│   ├── test.txt
│   ├── train.txt
│   ├── trainval.txt
│   └── val.txt
└── training
├── calib
├── image_2
└── label_2
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>然后根据官方的教程，我们需要创建一个images文件夹，然后将其 &lt;code>training/image_2&lt;/code> 链接到 &lt;code>images/trainval&lt;/code>，我在实际的测试中，发现此方法并不可行。参考CenterNet中的一个Issue: &lt;a href="https://github.com/xingyizhou/CenterNet/issues/575#">Evaluate kitti&amp;ndash;AttributeError: &amp;lsquo;NoneType&amp;rsquo; object has no attribute &amp;lsquo;shape&amp;rsquo;&lt;/a> ，其中 juanmed给出了解决方案：&lt;/p>
&lt;blockquote>
&lt;p>I had the same problem. For some reason the simlinks that are created during the data preparation process described in DATA.md are not working. So instead of creating simlinks I simply copied the actual data into the directories indicated in DATA.md. In other words the folders &lt;code>data/kitti/images/test&lt;/code> and &lt;code>data/kitti/images/trainval&lt;/code> do contain the actual images.&lt;/p>
&lt;/blockquote>
&lt;p>意思就是说，我们在 &lt;strong>images&lt;/strong> 中的图片必须都是真实的照片，而不能只是软链接过去。&lt;/p>
&lt;p>解决方案很显然，只需要在 &lt;strong>images&lt;/strong> 文件夹中建立一个 &lt;strong>trainval&lt;/strong> 文件夹，将 &lt;code>training/image_2&lt;/code> 中的所有图像都移入其中即可。如果有test的照片，那么也照规在 &lt;strong>images&lt;/strong> 新建一个 &lt;strong>test&lt;/strong> 文件夹，把测试的照片移入其中即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="运行测试程序">
运行测试程序
&lt;a class="heading-link" href="#%e8%bf%90%e8%a1%8c%e6%b5%8b%e8%af%95%e7%a8%8b%e5%ba%8f">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>​ 接下来我们就可以根据官方给出的 &lt;a href="https://github.com/xingyizhou/CenterNet/blob/master/readme/GETTING_STARTED.md">GETTING_STARTED.md&lt;/a> 来进行我们的检测了。&lt;/p>
&lt;p>​ 即先编译一下评估工具，然后运行测试程序，但其实还是有一点点小问题。&lt;/p>
&lt;p>​ 具体问题可以参考 Issus: &lt;a href="https://github.com/xingyizhou/CenterNet/issues/55">kitti test: Couldn&amp;rsquo;t read: 006042.txt of ground truth.&lt;/a>&lt;/p>
&lt;p>​ Issue下 &lt;strong>lhyfst&lt;/strong> 已经给出了解决方案 ：&lt;/p>
&lt;blockquote>
&lt;p>The solution is quite simple.
&lt;code>cd data/kitti&lt;/code>
&lt;code>mv label_2 label_val&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>​ 更改后，运行成功~&lt;/p>
&lt;p>​ 我们应该可以在 &lt;code>${CenterNet_ROOT}/exp/ddd/3dop/results&lt;/code> 看到我们得到的结果，只不过运行得到的是点的坐标，而不是图像，如果需要图像的话可能还需要自己绘制一下。&lt;/p></description></item></channel></rss>