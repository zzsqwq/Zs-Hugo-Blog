<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Zs&#39;s Blog</title>
    <link>https://blog.zzsqwq.cn/tags/python/</link>
    <description>Recent content in Python on Zs&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 May 2021 15:19:00 +0000</lastBuildDate><atom:link href="https://blog.zzsqwq.cn/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用神经网络进行波士顿房价预测</title>
      <link>https://blog.zzsqwq.cn/posts/182/</link>
      <pubDate>Sun, 16 May 2021 15:19:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/182/</guid>
      <description>前言 前一阵学校有五一数模节校赛，和朋友一起参加做B题，波士顿房价预测，算是第一次自己动手实现一个简单的小网络吧，虽然很简单，但还是想记录一下。
题目介绍 波士顿住房数据由哈里森和鲁宾菲尔德于1978年Harrison and Rubinfeld1收集。它包括了波士顿大区每个调查行政区的506个观察值。1980年Belsley et al.2曾对此数据做过分析。
数据一共14列，每一列的含义分别如下：
英文简称 详细含义 CRIM 城镇的人均犯罪率 ZN 大于25,000平方英尺的地块的住宅用地比例。 INDUS 每个镇的非零售业务英亩的比例。 CHAS 查尔斯河虚拟变量（如果环河，则等于1；否则等于0） NOX 一氧化氮的浓度（百万分之几） RM 每个住宅的平均房间数 AGE 1940年之前建造的自有住房的比例 DIS 到五个波士顿就业中心的加权距离 RAD 径向公路通达性的指标 TAX 每一万美元的全值财产税率 PTRATIO 各镇的师生比率 B 计算方法为 $1000(B_k-0.63)^2$，其中Bk是按城镇划分的非裔美国人的比例 LSTAT 底层人口的百分比(%) price 自有住房数的中位数，单位（千美元） 基于上述数据，请完成以下问题：
建立波士顿房价预测模型并对预测结果进行评价。
问题分析 首先这道题目的很明确，数据一共是 $506×14$ 的一个矩阵，有十三维的自变量，通过建立一个模型来拟合回归出最终的因变量 price，即户主拥有住房价值的中位数。这是一个回归问题，综合考虑有以下两个思路
通过各种回归算法（GradientBoostingRegressor，RandomForestRegressor，ExtraTreesRegressor，LinearRegressor等）结合全部或部分自变量来回归最终的price
建立前馈神经网络模型，根据通用逼近定理，我们可以拟合此回归模型。
我们对上述模型来进行实现并确定评估标准来对他们进行比较，选择最优的模型作为预测模型。
算法流程 传统的回归算法 自变量的选择 首先，考虑到数据集中13列自变量其中某一些可能和最终的房价并无强相关性，如果全部使用进行预测可能会对模型引入噪声，因此我们首先计算了房价price与各个自变量之间的相关系数 $r$ ，其中 $r$ 计算公式如下： $$ r = \frac{\sum(x_i-\bar{x})(y_i-\bar{y})}{\sqrt{\sum(x_i-\bar{x})^2\sum(y_i-\bar{y})^2}} $$ 其中 $x_i,y_i$ 为数据的每个分量，$\bar{x}，\bar{y}$ 为数据的均值
该系数反映了两变量之间的相关性，$r$ 的绝对值介于 $[0,1]$ 区间内，$|r|$ 越接近1，表示两数据相关性越高，反之越低。计算后结果如下：</description>
    </item>
    
    <item>
      <title>关于Anaconda中pip路径指向问题</title>
      <link>https://blog.zzsqwq.cn/posts/169/</link>
      <pubDate>Sat, 06 Mar 2021 20:51:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/169/</guid>
      <description>前言 最近使用Anaconda的时候遇到了一个很奇怪的问题，如当我新建环境 condatest 后，使用 pip -V 查看pip的路径指向，会发现pip指向的是另一个环境 CenterNet 的路径。搜索了很久得到一个有一些用的解决方法
解决方案 设有问题的环境为 condatest ，python版本为 3.6
然后进入 ~/anaconda3/envs/condatest/lib/python3.6
编辑目录下的 site.py 文件，将其中的 USER_SITE 的值修改为 /home/zs/anaconda3/envs/condatest ，注意这里路径里面的 zs 是你的当前用户名， USER_BASE 的值修改为 /home/zs/anaconda3/envs/condatest/lib/python3.6/site.py，然后问题应该就解决了。
因为如果环境问题的话，上面两个字符串都为空，猜测的原因是因为有同python版本的环境导致默认指向错误，此方式为修改conda中pip的指向。
参考链接 更改conda环境中的pip包安装的默认路径 </description>
    </item>
    
    <item>
      <title>Python初步学习</title>
      <link>https://blog.zzsqwq.cn/posts/66/</link>
      <pubDate>Sat, 18 Apr 2020 01:24:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/66/</guid>
      <description>&lt;h1 id=&#34;python学习笔记&#34;&gt;Python学习笔记&lt;/h1&gt;
&lt;h2 id=&#34;python的不同解释器&#34;&gt;Python的不同解释器&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPython&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是自带的用C语言开发的解释器，因此叫CPython。它也是使用最广的Python解释器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IPython&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是基于CPython之上的一个交互式解释器，只是相比于CPython多了交互上的优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PyPy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它的目标是执行速度。PyPy采用&lt;a href=&#34;http://en.wikipedia.org/wiki/Just-in-time_compilation&#34;&gt;JIT技术&lt;/a&gt;，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。他与CPython略有不同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>
