<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zs&#39;s Blog</title>
    <link>https://blog.zzsqwq.cn/</link>
    <description>Recent content on Zs&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 12 Nov 2023 23:36:41 +0800</lastBuildDate><atom:link href="https://blog.zzsqwq.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>记一次 GitHub 账号突然被 suspended 的经历</title>
      <link>https://blog.zzsqwq.cn/posts/github-suspended-for-no-reason/</link>
      <pubDate>Sun, 12 Nov 2023 23:36:41 +0800</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/github-suspended-for-no-reason/</guid>
      <description>TL;DR 我在 2023.11.07 凌晨被 GitHub 封禁了账号，GitHub 账号被 suspended 后会在 GitHub 上完全除名（只有自建创建的组织不会消失）。
如果被封禁了请首先通过 API：https://api.github.com/users/[username]/starred 备份自己 star 过的项目。
同时通过 Can&amp;rsquo;t sign-in form 来在无法登陆的情况下发起 GitHub Support 工单来询问/请求解封/询问原因等，一般在两天内会收到回复。
我此次被封禁的原因是由于管理的组织内部有成员被盗号，在组织内创建了违法仓库，因此管理员和被盗号的成员都被封禁了，但后续都被解除了封禁。同时也有可能因为创建违反 DCMA 条款的仓库、fork 违反 DCMA 条款的仓库、贩卖学生/教师教育包等原因被封禁。
背景 大约在 2023.11.07 凌晨 00:30 左右，在 GitHub 上看到了一个不错的项目想要 Star，被提示没有登陆。当时我还在想：“怎么这次 session 过期的这么快？” 就当我边疑惑边重新登录后，突然收到了下图的提示我的账号「Account suspended」：
确认无法登录后，查看邮箱没有任何相关通知。同时我查看了其他内容是否还存在，最后综合表现如下：
没有任何邮件/信息通知被封禁及更加具体的封禁原因，只告诉违反了 ToS 个人页面（https://github.com/zzsqwq）无法访问，访问显示 404 提的相关 Issue 全部被删除（隐藏），无法找到 个人创建的所有项目，访问全部 404，也无法拉取 自己参与的项目，被除名 自己加入的组织，被除名 自己创建的组织，访问 404 简单说就是跟这个账号从来没存在过一样，除了仍可以登陆，但是显示 suspended。接下来开始尝试找办法恢复。
恢复经过 试图查找封禁原因 首先看提示上显示违反了 Github Terms of Service，快速的看了一眼 ToS 没发现我有什么明显违规的地方。
通过搜索引擎搜索 「Github 账号 suspended」相关信息，找到了两个比较强相关的帖子：</description>
    </item>
    
    <item>
      <title>为什么应该抵制拼多多？</title>
      <link>https://blog.zzsqwq.cn/posts/why-should-boycott-pdd/</link>
      <pubDate>Mon, 01 May 2023 23:35:01 +0800</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/why-should-boycott-pdd/</guid>
      <description>TL;DR 本文旨在结合一系列事实总结拼多多过去的一系列恶心行为，包括不限于
虚假宣传 砍一刀套路多 拉人助力 铺天盖地的广告 利用漏洞 希望大家抵制拼多多这种无良平台，非必要不使用拼多多。
前言 最近看了很多拼多多令人反感的操作以及看了很多拼多多的软广，如 拼多多，让谁不爽，看到这么一个无良平台逐渐壮大实在是令人恼火，因此我觉得有必要写一篇文章来总结一下拼多多各种恶心人的操作来让大家了解这个无良平台，来看看他到底为什么让人不爽，并呼吁大家可以联合抵制这个平台。
本文会尽量客观理性，陈述已发生的事实而不是自己的观点，同时因为我不是商家，也不是拼多多的员工，本文只是作为用户角度评判。除了对用户方面的恶心行为，还有对员工及商家的压榨，这个后面有时间再写。欢迎大家补充、批评、指正。
一、虚假宣传 首先需要提到的就是拼多多的虚假宣传，主要是广告，相信大家都看到过，例如「为什么这些 Switch 游戏机只买 9.9 元都没人买，全部砸了算了」这种开头的，或者「你有 iPhone 13 吗，没有就打开拼多多抢一台」。铺天盖地的，无论是你看视频、还是刷QQ空间，还是刷朋友圈，总是能碰到这种广告，无非就是诱惑你点击下载拼多多，但是打开后却发现广告中说的点击就送、无门槛拿根本都是无稽之谈，要不就是限量两个，邀请最多的人才能领。下面是这类视频的合集，大家可能看到的时候都觉得尬和乐，但是却很少有人认识到这是虚假宣传，违规行为。
根据百度百科对于虚假宣传的定义：
虚假宣传是指在商业活动中经营者利用广告或其他方法对商品或者服务做出与实际内容不相符的虚假信息，导致客户或消费者误解的行为。
这拼多多应该确实是符合的吧？虽然很多只是下载了 App 但是没有产生消费行为，但也可以归入其中。
二、砍一刀套路多 套路多是指，经过第一步的虚假宣传，让你下载了 App，你以为可以很轻松的拿到免单的商品，但实际他会给你放一堆的限制，就像十年前的页游，一堆过场动画，什么「你是砍价第一名」、「还差 0.01 即可砍成功」，但你一旦继续深入，你就会发现这是个无底洞，0.01 后面是 0.001，0.001 后面是 0.0001，0.0001 后面怕你看数字太小生气，他就会让你集几万个金币或者一些其他的东西，十万个金币兑换 0.001，这样无限循环，想砍成实在难如登天。
拼多多曾公开表示1：
近日，“拼多多砍价，但始终差0.9%”话题受到广泛关注，去年3月，上海律师刘宇航参加了拼多多的“砍价免费拿”活动后，经多人砍价还是0.9%，在质疑数据有问题后，刘以使用虚假数据隐瞒规则已构成欺诈为由，向法院递交了起诉材料。在刘宇航随后释出的文件中得知，拼多多称是“因页面显示百分比位数有限，所以他们把一个至少小数点后有6位数以上的百分比，省略显示为0.9%，砍价页面显示的0.9%不是0.9%，而是0.9996427%。”
当然这里也有砍成功的，不过是分价位的，你砍 100 元的红包，可能拉个七八个人就成功，如果都是新用户可能会更少，如果是砍 Switch、手机这种大件，需要砍的次数则就更多。当然砍 100 元的红包砍的多了，积累的价钱上去了，他也不会让你持续的薅，难度也是累加的。一个典型的案例可以看 超级小桀 之前的视频，如下：
上面这个视频简单概括一下就是，小桀在直播间突发奇想带水友一起砍一部 IQOO 手机，前期很长的过场动画都在提示你，马上可以直接拿到，进度已经到达 0.00%，但是还是需要收集 10 多个金币，邀请两三个人即可，后来小桀把二维码分享出来，非常多的水友扫码砍，后来导致二维码提示被封禁，小桀又把链接分享给了群里的水友，当时在线的水友不完全统计 6-7W，至少有上千人参与，但最终也没有让那 10 多个金币归零，打电话给客服询问，客服给出理由如下：
每个人砍都是概率砍成功，可能 100 人砍有 50 个人、80 个人砍成功，不是 100% 成功。 像这么多人砍价，系统检测到会封禁。 那我就有点疑问了，你这个东西本来就需要邀请很多人砍价才能成功，但是你人一多又要封禁，那么不邀请这么多人砍价，那么怎么成功呢？真的是「解释权归拼多多所有」。
据小桀自己回应，直到3月17号下午2点40分左右下播，也没有砍成功，但是突然在4点40分左右莫名其妙的成功了，赠送了一张无门槛购物券可以下单此手机，随后客服回应：砍价不成功不属实，已经发放「特制」优惠券。这一通操作，实在是闻所未闻，谁也能看出来是事态发展到不可预料的地步搞了个东西出来封口的。
实在是太像诈骗、传销了，即使这样广泛的虚假宣传，到现在也没有被整治，也还是随处可见。
附小桀对这件事情的声明：
三、拉人助力 拼多多最特色的行为，应该就是这个拉人助力，可能算是拉人助力的始祖了，如今算是各个软件的标配了，美团、饿了么、携程旅行、智行中也都随处可见。好处显而易见，可以提高自己活动的参与率、提高 App 的下载率、提高品牌知名度、提高用户粘性。</description>
    </item>
    
    <item>
      <title>基于地平线 HAT 训练与部署 FCOS 全流程</title>
      <link>https://blog.zzsqwq.cn/posts/hat-train-fcos/</link>
      <pubDate>Sat, 25 Feb 2023 00:45:22 +0800</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/hat-train-fcos/</guid>
      <description>前言 最近想要使用自己采集与标注的数据集来训练与部署一下地平线微调过的 FCOS 网络，在询问和查看文档后发现如果想基于官方微调的模型训练，需要使用提供 HAT（Horizon Algorithm Toolkit，海图） 来进行，具体的文档可以查看：Horizon Algorithm Toolkit 文档，这是在线的版本，版本可能会比较旧，想看最新版的可以查看离线的版本，位置在 OE（Open Explorer，天工开物） 包的 doc 目录下，如下图：
想要方便的查看离线文档可以通过 Python 来实现，在 doc 目录下执行：
python3 -m http.server 3000 这样就可以在本地的 0.0.0.0:3000 地址开启一个 http server，随后可以在本地浏览器使用 localhost:3000 或者其他电脑浏览器使用 {ip}:3000 来访问文档。
但是查看 文档 过后会发现，文档其实也没有那么的全面，讲的比较简单，尝试了一下中间坑还挺多的，社区里面关于这方面的帖子也不多12，因此想记录下我尝试的全流程，也可以作为对上面教程文档的补充。
下面主要分为三部分：
训练的环境配置。
如何基于官方的 COCO 数据集训练？这里就是指基于 mscoco 发布的包含 80 类的数据集。
如何基于自己的数据集进行训练？这里就是指自己建立的，自定义类别的，可能只有四五类，没有 80 类的数据集。
下方涉及到的一些代码、脚本和模型等，可以在 Github 仓库 中找到。
训练的环境配置 我自己环境配置如下：
OS: Ubuntu 20.04
Docker: 20.10.23
Nvidia Docker: 2.11.0-1
GPU: RTX3090
NVIDIA Driver Version: 515.65.01
CUDA Version: 11.</description>
    </item>
    
    <item>
      <title>2022 年度总结</title>
      <link>https://blog.zzsqwq.cn/posts/summary-2022/</link>
      <pubDate>Sun, 01 Jan 2023 16:13:45 +0800</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/summary-2022/</guid>
      <description>2022 依旧是被疫情伴随的一年，时间正着看总是要比回看慢很多，现在回头看过往一年似乎一瞬间就过去了。
今年共发了 11 篇文章，其中还包含了两篇碎碎念，还是没有达到月更，新的一年希望可以。2022 年对我来说变化很大，算是暂时摆脱了学生生活，体验了社畜的感觉，打卡了北上广深中的北和深。
接下来按月份盘点一些值得纪念的事情吧。
一月：
这一月大多是在学校里度过的，封校了很长时间，封校期间报名了送餐志愿者，每天都负责给大家配送三餐，有点累，但是感觉能听到大家感谢的声音以及幸福的笑容还是很值得的，我感觉我一直还挺乐于助人的，帮助别人其实还挺快乐的。值得一提的是，因为之前总喜欢续费超级会员，疫情期间还建了一个宿舍群，送餐期间也兼职在群里传达各种信息，虽然是个吃力不讨好的活，还因为一些过激的言论被挂到知乎说是官僚主义。
二月：
二月换了手机（iPhone 13），加入了果粉的队列，并在心中种下了苹果全家桶的种子。还和家人一起去了青岛的海洋馆玩，和从未见过的网友学弟面了基。
三月：
三月报名参加了 RMUS 2022 ，同时也在备赛 RMUA 2022 和准备大创的中期检查。搭建了一个新的 RMUA 场地。
四月：
移植了一个学术风的 Hexo 主题，搞了一个自己的学术主页，计划用于后面的申请夏令营等。
五月：
带队参加了 RMUA 2022，也担任了其中的赛事志愿者。今年的分组不错，可惜还是因为各种原因惨败了，很难受的一个月。回来还被隔离了七天，隔离的时候也无心学习，后面有考试和各种大作业的检查，这段时间是一年中最难受的时候。
六月：
六月是考试月，各种考试、各种大作业、各种 DDL，压的人喘不过气来。
在 6月12日，基地也搬了新的场地，大二上学期刚加入基地的时候，基地也是新搬场地，现在，基地又新搬了场地，我也该退休了。
七月：
六月的结束也意味着学期的结束，假期的开始。七月学长邀请我去他公司实习，我欣然答应，于是我们就在学期结束后一起飞到了深圳，开始了社畜生活。在深圳的生活很愉快，也有了自己可以支配的收入，不再依赖于家里面的生活费了，也可以攒些小钱买自己想买的东西，这种感觉很棒。同时这个月还入手了 Airpods 3，空间音频给人的感觉很震撼。
八月：
八月继续社畜，做了社畜以后有了比学生生活期间更多的活动，也吃了更多的好吃的，成了KFC、麦当劳、海底捞、肉蟹煲的常客，每天都稳定点两次外卖。这个月还看了《请回答1988》的解说，真的很好看，是令人暖心的剧集。
九月：
九月要开学了，但是因为大四上学期已经没什么课了，而且深圳的疫情非常严重，没有返校。本月最重要的是我成了一名铲屎官（猫屎真的好臭😷），已经是人生赢家了，Siri 给他起名为卓卓。
同时九月也是保研名单公布和保研结束一段时间，再三考虑后决定放弃了保研名额，跟学长一起创业，先在港中文做 RA，后面或许可以去那里读 Ph.D，想出去看看。
这个月还因为要做 iOS 开发公司给配了 Mac，现在已经拥有 iPhone、iPad、Mac、Airpods，距离 Apple 全家桶只有一步之遥。
哦对了，这个月还搬了新的住所，因为人逐渐变多了，之前的屋子已经住不下了。九月，真是繁忙的一月。
十月：
这个月初入手了 Apple Watch，补齐了个人设备的最后一块拼图算是。iMac 这种没有算进来，因为 iOS、iPadOS、MacOS、WatchOS 四个系统已经集齐了，苹果生态给人的感觉真的很不错。
有了 Watch 以后，借着新鲜感锻炼了一段时间，但是体重不降反增了，于是动力没了，又回到了肥宅的生活😁。
同时这个月还和乐乐和雷宝一起去了深圳的欢乐谷游玩，体验了失重的感觉，下次不敢了。
十一月：平淡的一个月，上班、吃吃吃、玩玩玩。卓卓越来越好看了。
十二月：
学长从 HK 带回来了最新版的 Apple TV，苹果生态又添一员。现在的联动已经非常棒了，手机可以直接推流到 Homepod、电视、Mac、耳机等。</description>
    </item>
    
    <item>
      <title>使用 OrangePi 4 LTS 做旁路由</title>
      <link>https://blog.zzsqwq.cn/posts/orangepi4-lts-with-openwrt/</link>
      <pubDate>Sat, 31 Dec 2022 16:34:42 +0800</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/orangepi4-lts-with-openwrt/</guid>
      <description>前言 最近同居的学长从香港带了个最新版的 Apple TV 回来，但是 Apple TV 在国内用不了，必须要代理才可以，所以考虑到了路由器代理的方案。但是现在家里在用的路由器是 Redmi AX3000，没法刷固件，也不想再买个 R2S 这种软路由了，因此就计划将公司之前用完的 香橙派(OrangePi) 4 LTS 利用一下。它的芯片是 RK3399，用来做路由器绰绰有余，不用可惜了。
为什么是旁路由？ 不熟悉旁路由的同学可以看篇指南：从听说到上手，人人都能看懂的旁路由入门指南
找了一些常见的固件，貌似只有针对于 OrangePi R1 和 OrangePi R1 Plus 编译的软路由固件，并且讯龙官方也有放出针对这两个板子的 Openwrt 固件1，可以说是就是为软路由而生，价格也比较便宜，200 左右，性能和 R2S 差别不大。
试了一下在 4 LTS 上跑 R1 和 R1 Plus 的固件2，都无法正常点亮，可能可以自己编译一个对应架构的 OpenWrt，但是有点麻烦，还是没尝试。
考虑到 4 LTS 上可以使用 Docker，因此可以在上面用 Docker 跑一个 OpenWrt 然后做旁路由，到时候只需要把 Apple TV 或者路由器的网关和 DNS 改一下就可以，因此最终选择使用旁路由方案。
具体方案 这里直接参考了小苏的教程：https://mlapp.cn/376.html，写的很清晰，而且很好的考虑了没有基础的同学，赞一个！
里面写的很详细，但是需要注意的是，因为香橙派4 LTS是 ARMv8 架构的，但是直接拉教程里面的默认 latest 镜像是 ARMv7 的，因此需要指定一下镜像的版本，具体的镜像版本可以看 Docker Hub 中的介绍。
docker pull registry.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 类使用注意事项</title>
      <link>https://blog.zzsqwq.cn/posts/cxx-class-skills/</link>
      <pubDate>Wed, 09 Nov 2022 22:40:41 +0800</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/cxx-class-skills/</guid>
      <description>前言 本文包含一些在使用 C++ 类时的注意事项，可避免一些常见问题，并能让你在写代码时更加自信。
因为目前我使用的是 C++ 17，所以仅保证以下内容在 C++ 17 中正确。
构造函数 对于单个参数的构造函数，推荐添加 explicit 关键字，防止隐式转换错误调用构造函数。 class DemoClass { explicit DemoClass(int test) { this-&amp;gt;test_ = test; } } 显式声明有参构造函数后，编译器不会自动生成无参构造函数，若需要，请添加 DemoClass() = default; class DemoClass { explicit DemoClass(int test) { this-&amp;gt;test_ = test; } DemoClass() = default; } 若子类中没有显式调用父类的构造函数，子类会默认调用父类的无参构造函数，如果父类没有无参构造函数，会报错。 析构函数 基类析构函数应该声明为 virtual，这样可以防止子类无法正确的析构。 由于基类析构函数为 virtual，派生类的析构函数应该显式的 override。 class DemoClass { virtual ~DemoClass() = default; } class ChildClass: public DemoClass { ~ChildClass() override { xxx; } } 成员变量默认值 对于类或局部作用域中未明确指定默认值的成员变量，其值遵循以下规则：</description>
    </item>
    
    <item>
      <title>关于美的一些思考</title>
      <link>https://blog.zzsqwq.cn/posts/beauty-think/</link>
      <pubDate>Sun, 30 Oct 2022 04:24:06 +0800</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/beauty-think/</guid>
      <description>楔子 昨天听了学弟们关于博客搭建的一些教程，在听的过程中，也想起了我之前对于博客的种种尝试，发现整体的趋势就是，简约再简约。
这引发了我对我过去几年的审视，感觉自己的审美一直在变化，对于美的认识和感受也是一直在变的，故写此文来记一些我对美认识的思考。
简约是我最终的归宿 遥记得我还在小学和初中时，非常迷恋 QQ飞车 这款游戏，这款游戏里面有一个虚拟人物，人物可以搭配各种装饰，包括但不限于上衣、裤子、发型、发饰、翅膀等，起初我是喜欢要多花哨有多花哨造型，各种发饰、翅膀、脸部特效搞的飞起，现在想起来真是非常搞笑，而且喜欢五颜六色的，当时觉得，真的是太好看了。
但是过了一段时间，就开始感觉不对劲了，这么花哨，这么丑，这怎么可能是我当时亲手选择的造型。后来就逐渐向简约范靠拢，装饰越简单，色调越单一越喜欢。
下面的几张图大致可以窥见这个过程：
而长大后，对于 Blog 的搭建貌似也是这个过程。一开始喜欢相对花哨的，包括各种炫酷的背景、动效等，因此一开始选择了高定制度、有各种花哨特效的 Hexo 框架，不过当时已经在飞车中喜欢上了简约风格，因此主题也选择了 Hexo 中相对简洁的 NexT 主题。
后来发现 Hexo 实在操作过程有些过于繁杂，从操作的意义上来说，他无法做到足够的简洁、简约和高效。
故而我选择了操作更加方便（例如发表博文、操作主题元素）更加方便的动态博客——Typecho。
起初，我选择延续了在 Hexo 上的 NexT 主题，后来发现了更加符合我审美的 Handsome 主题，第一眼就是非常喜欢，后来忍痛买了主题，用了一段时间后，又逐渐觉得主题没有那么好看，有些看腻了，而且动态博客的升级、安装插件，也是十分繁杂。
最后，偶然之下，发现了现在在使用的 Hugo 框架，它生成迅速、无需升级、也有着很多简约风的主题，完美符合我的需求，果断迁移了过来，具体流程可见：记一次博客迁移记录 - Zs&amp;rsquo;s Blog ，一直用到现在，还是对这个框架和主题算是相对满意的。
总体而言，无论是操作还是页面，都是越来越简约、统一了。不知道未来，我会不会觉得这个也不够简约和统一，再去找寻其他的框架呢。
各种产品的变迁 除了上面我自己对美认识的变化，我觉得整个社会对美的认识也是存在变化的。
往大了讲，是各种建筑、各种设施外观的变化。
往小了讲，我们用的手机、手机上的软件（例如 QQ、微信），他们的外观每年都在迭代，可能每次变化时有人吐槽有人叫好，但是整体而言，至少对我来说，他是整体都是越来越好看的，虽然逐渐变得臃肿，但是 UI 确实是“实打实”的在进步。下图是 QQ 的变化（左侧是网友仿的一个老版 QQ 界面1，右图是最新版 Mac QQ），可见一二：
那就引发了我一个思考，大家对于美的认识是被塑造了呢，还是说这个东西就是客观上的变好看了，美毕竟是一个比较主观的东西。
如果他是主观上变好看了，那么他是真的好看了吗？而且为什么可以做到如此的统一，让大多数人都觉得变好看了。
如果他是客观上变好看了，那么到底是什么因素的存在让人觉得他好看呢？
我觉得美这个东西，很不像生活中常见的发展规律，例如芯片的研发，需要数学、物理、化学等学科实际理论的支持。
2001 年的人是没有办法设计出 Apple M2 的芯片的，因为受到了各种硬件的制约。而 2001 年的设计师有没有可能设计出最新版 Mac QQ 这样的界面呢，如果不能，是什么制约着它呢？如果能，为什么没有出现这种设计，是因为当时大家觉得他不好看吗？
因为我不是学设计和美术等专业的，并且这种很很直觉的东西我不知道该怎么去搜索，因此想在这里和大家探讨一下。如果有已经相对成熟的理论，还请大家能够告知与我，解答困扰我好久的疑问。
AI 绘图 看网上有人调侃说，愿意称 2022 年为 AI 绘图元年。</description>
    </item>
    
    <item>
      <title>如何善用搜索引擎？</title>
      <link>https://blog.zzsqwq.cn/posts/how-to-search/</link>
      <pubDate>Sun, 30 Oct 2022 00:31:00 +0800</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/how-to-search/</guid>
      <description>前言 我们使用搜索引擎可能是为了搜集信息、或者是解决一些问题。但如果不能正确的使用搜索引擎，使用关键字等，可能搜到的答案就与问题相关不大，或者与我们的问题相差甚远。
这篇文章意在分享我个人在学习、工作中使用搜索引擎的一些技巧与思考，可能后续会不断的更新，如有纰漏，还请大家指正。
应该使用什么搜索平台？ 想要提高搜索的效率，选择一个好的搜索引擎或者内容平台颇为重要。
下面列举的是我平时会使用的一些平台，列出的顺序代表了我个人对于他们的推荐程度：
通用搜索引擎：Google、Bing、DuckDuckGo、Baidu 编程相关问题：Stack Overflow、Github Issue、segmentfault、稀土掘金、腾讯云开发者社区、CSDN、华为云开发者社区 日常问题：V2EX 第一类为通用搜索引擎，例如 为什么最近头发掉的更多了？ 在其上可以搜索任何问题，其中 Google 的使用门槛相对较高，而 Bing 针对国内用户来说是一个相对不错的选择，不建议常用 Baidu，因为其上广告非常多，有用信息密度相对较小。
第二类为编程相关问题，例如 CMake 为什么报错了？ 其中 Stack Overflow、Github 虽均为国外的平台，但是国内是可以访问的，不过在 Baidu 搜索引擎中词条相对靠后，同时也需要使用英文来进行问题检索。（Btw，Stack 系列还有例如 Stack Exchange 平台，它的模式与前者相同，但是更偏日常一些。）除此以外，后面的平台均为国内平台，所列是我平时常见的一些，整体而言，前面的文章质量普遍会比后面的高一些，其中腾讯云开发者社区、CSDN、华为云开发者社区三者内容重叠度较高。
第三类为日常问题，例如 Mac 上有什么好用的 App ？可以在 V2EX 上寻找答案，当然，它也是包罗万象的，只不过我常用它来解决日常各类小问题。
如何正确的知道问题所在？ 我们遇到一个问题，要首先能够定位这个问题的关键。
例如编译中出错了，可能有很多 log，你必须能够精确定位到到底哪一条 log 才是这次编译出错的关键，进而才能解决这个问题。
以 CMake 为例，编译时报错 log 一般为红色，警告 log 一般为黄色，普通 log 一般为白色。得益于这种等级/颜色分明的 log ，我们可以快速的定位报错。我们日常编程中，为了便于 Debug，最好也遵循这个规范，例如在 C++ 中打印错误 log 时推荐使用 std::stderr 而不是 std::stdout 。
见过很多身边的同学遇到了报错，就一股脑粘贴所有的报错 log，然后贴到搜索引擎中，发现相关的错误基本没有。这就是没有其中错误的关键，报错时的 log 可能 100 行只有 10 行是关键的，甚至只有一行是关键的，例如 100 行 log 中只有 未定义的引用(undefined reference to &amp;lsquo;xxx&amp;rsquo;) 这一句是最关键的。</description>
    </item>
    
    <item>
      <title>为什么要使用条件变量？</title>
      <link>https://blog.zzsqwq.cn/posts/why-use-condition-variable/</link>
      <pubDate>Wed, 24 Aug 2022 23:37:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/why-use-condition-variable/</guid>
      <description>为什么要使用条件变量？ 前言 最近看了很多与线程有关的 C++ 新特性，条件变量是见的比较多的一个特性。
看的时候我发现，想要理解一个新的特性，关键的要看它的引入到底解决了哪些问题，没有什么特性我们要实现相同的功能要怎么做？
以我的理解来看，条件变量是一个线程间互相同步与通知的手段，他通过主动唤醒的方式减小了各个线程的开销，取代了简单但是消耗较大的一直被动循环检验与等待。
没有条件变量我们如何实现相同的需求？ 这里采用现代C++教程1 中关于条件变量的一个例子作为基础：
不使用条件变量版本 #include &amp;lt;queue&amp;gt; #include &amp;lt;chrono&amp;gt; #include &amp;lt;mutex&amp;gt; #include &amp;lt;thread&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;condition_variable&amp;gt; int main() { std::queue&amp;lt;int&amp;gt; produced_nums; std::mutex mtx; // 生产者 auto producer = [&amp;amp;]() { for (int i = 0; ; i++) { std::this_thread::sleep_for(std::chrono::milliseconds(900)); std::unique_lock&amp;lt;std::mutex&amp;gt; lock(mtx); std::cout &amp;lt;&amp;lt; &amp;#34;producing &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl; produced_nums.push(i); } }; // 消费者 auto consumer = [&amp;amp;]() { while (true) { { std::unique_lock&amp;lt;std::mutex&amp;gt; lock(mtx); if(produced_nums.</description>
    </item>
    
    <item>
      <title>一个基于 Hugo 的个人主页主题</title>
      <link>https://blog.zzsqwq.cn/posts/my-hugo-academia-theme/</link>
      <pubDate>Tue, 03 May 2022 21:40:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/my-hugo-academia-theme/</guid>
      <description>背景 之前看到过学长学姐做过个人主页，多是用来申请一些学校的夏令营使用的，觉得非常的 Nice，自己也想搞一个。
大家之前好像大多用的是基于 Hexo 的一个主题 — hexo-theme-academia，但是由于之前我用过 Hexo，觉得他有一些比较明显的弊端，例如环境配置比较麻烦、需要安装 Nodejs、npm 等环境，然后再安装 Hexo。其次它的构建速度比较慢，用起来感觉比较僵硬。
后来随着了解增多，尝试了 Typecho、WordPress，Hugo 等主题后，目前还是决定使用 Hugo。它构建速度快，而且安装简单，在 Ubuntu 上只需要一行 sudo apt install hugo 即可，不可谓不简单。因此萌生了移植一个 Hugo 版本主题的想法，刚好可以锻炼一下自己。
欢迎点击 这里 查看我的个人主页。
一些难点 之前从来没有了解过 Hugo 主题的写法以及 Hexo 主题的写法，不过看了一下仓库的组织形式还算好理解。
这类静态博客生成器都是需要写一些模板文件，然后根据配置文件进行个性化构建。
Hugo 的文档 十分的完善，学习就像是学习一门编程语言，里面有很多函数和变量，还有各种条件结构、循环结构等。原主题是采用的 pug + stylus 的方式，而不是传统的 html + css 。不过这两者之间的转换并不麻烦，而且有一些工具可以参考着转换，例如 pug2html 以及 stylus2css 。
后续就参考着一点点的移植就可以，同时我也改写了一下配置文件（使用的 yaml 格式），大概是更易于配置了。
同时，得益于 Hugo 的强大，我很方便的完成了对多语言的支持。
最终效果 目前已经更新到了 v1.1.0 版本，欢迎大家体验，有问题可以及时反馈！
主题链接：https://github.com/zzsqwq/hugo-academia-theme
演示站：https://zzsqwq.github.io/academic-pages-demo/
英文文档：https://github.com/zzsqwq/hugo-academia-theme/blob/master/README.md
中文文档：https://github.com/zzsqwq/hugo-academia-theme/blob/master/README.zh_cn.md
英文效果图：
中文效果图：</description>
    </item>
    
    <item>
      <title>Docker-Gitlab 与主机共用 ssh 的 22 端口</title>
      <link>https://blog.zzsqwq.cn/posts/docker-gitlab-ssh/</link>
      <pubDate>Sun, 24 Apr 2022 13:46:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/docker-gitlab-ssh/</guid>
      <description>背景 在使用 Docker 搭建 Gitlab/Gitee 会导致无法与主机端共用 22 端口，这导致 ssh 连接的时候会使用形如 ssh://git@git.xxxx.cn:4022/zs/zsblog.git 的 ssh 链接，而不是像官方 Gitlab 那种非常干净的 git@git.xxxx.cn/zs/zsblog.git 链接。这对于我这种强迫症而言非常的难受啊，但因为主机的 22 端口已经被占用了，无法共用，所以需要考虑两者共享端口的问题。
虽说是两者共用，但其实还是使用类似于端口转发的特点，简单说就是在主机设置 git 用户，然后通过一个脚本将 git 用户的所有 ssh 流量转发到 Gitlab 容器中，从而完成对应的事情。
关于 Gitee 的设置，Gitee 官方的 Docker 部署教程1已经说的很清楚了，按照该步骤执行完全没问题。
而关于 Gitlab 貌似没有比较详尽的教程，搜索后发现了一个 Issue2 以及一篇博文3，后者讲的比较清楚，但是经过实践后发现存在一定问题，因此决定将可行的方案记录下来。
具体步骤 一、初始设置 在开始之前，docker-compose.yml 中设置比较关键的几个配置如下：
gitlab-web: image: &amp;#39;gitlab/gitlab-ce:latest&amp;#39; container_name: &amp;#39;gitlab&amp;#39; restart: always environment: GITLAB_OMNIBUS_CONFIG: | gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 4022 ports: - &amp;#39;3090:80&amp;#39; - &amp;#39;4022:22&amp;#39; - &amp;#39;6060:6060&amp;#39; volumes: - &amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39; - &amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39; - &amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39; - .</description>
    </item>
    
    <item>
      <title>关于春节期间的一些碎碎念</title>
      <link>https://blog.zzsqwq.cn/posts/224/</link>
      <pubDate>Thu, 10 Feb 2022 00:52:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/224/</guid>
      <description>前言 春节期间，走亲访友是必不可少的。交谈的多了，免不得一些问题的讨论。
读了很多书，经历了很多事，似乎想法也有一些”离经叛道“，记一下自己目前的一些想法，不知道多年后的自己看这篇文章会是什么想法，还会一如既往的坚持吗。
讨论的话题 打点关系 无论是父母，还是各方亲戚，大家好像都喜欢打点关系，以此来获得一些好处。
最常见的是求人办事，很多时候是我们常说的”走后门“，想让孩子上个好点的小学，避免不了又送礼又吃饭。
事件上升的恶劣一些，定然就是贪污受贿，这肯定是错的，大家都知道，但是度在哪里呢。
和我儿时的哥哥探讨中，他认为，这种送礼打点关系是必要的，送点小礼没啥问题。而我总觉得，这就是0、1、无穷的区别，有一就有二，有二就有无穷。
从出生到现在，试问自己从没遇到过必须送礼才能办成的事，或许以后会遇到，但我想、我应该宁愿放弃这个机会也不会去送礼打点。
大家都对我说：“你现在是这个想法，是没有经历过社会的毒打，你踏入社会就也会这样了。”，我无言。
或许吧，或许以后也会变成善于打点关系、整天辗转于酒局的人。
至少我现在，还是个滴酒不沾、不屑于打点的鸟人。
酒文化 我是个滴酒不沾的人
有两点比较重要的原因
一个是因为酒真的很难喝，好喝也就罢了，难喝为什么要喝呢？
二是因为我真的很讨厌饭桌上推杯换盏，你推我我推你，大家都喝得烂醉如泥。村里有很多喝酒出事去世的例子，小时候看见一个哥哥的朋友，喝醉后在大街上和别人干架，然后在欢喜的日子里一起进医院···何必呢？
推杯换盏还导致饭菜里会混入多多少少的酒，真的不好吃。
大家为什么都不能别这么执拗，这里用执拗可能不合适，不过没想到什么好的词语。人家明明都说了不喝、不吃，为什么还总要一遍遍的推脱？最后立场不坚定的，只能不情愿地吃了。立场坚定的，又闹得双方不愉快似的。
还有很多明明想喝、想吃，却又怕尴尬嘴上说着不喝不吃，一样可恶。
硬唠 平时在家总喜欢窝在自己的屋子里，倒腾自己的事情。
亲戚来了，似乎不出去跟他们聊天就是个错误。总是要数落你一下，在饭桌上调侃你一下，跟家长阴阳怪气一下你。
不想说的是，真的感觉没有什么共同话题，聊不到一起去，实在是没什么话说，只能在那里低头玩手机，哦对了，手机也不得玩，玩多了也会被说。只能在那里干坐着东看西看，听大家侃大山，却因为离家过久大多事都没听说过，时间白白的浪费。
人际关系真的蛮烦的。
关于入党 最近舅家的哥哥萌生了入党的想法，说：”就算无论花多少钱，也得入党。“
我问，那你入党又是为了做什么呢？
他说，入党好啊，入党好啊，入党可以在村委里谋个一官半职，可以轻松一些，赚钱也多。
我说你不应该为了自己的私利来入党，他说，人不为己天诛地灭，没有人不顾自己的私利。
实话的讲，我哥哥是个不错的人，乐于与村里人交善，村民家里出什么事他也喜欢帮忙。但是这个入党的观念真的让我不理解，入党是应该认为认同，而不是因为利益驱使。
大家入党好似都是为了后续能谋个公务员的出路，如果能贯彻为人民服务的宗旨还好，如果一心为了钱，很容易会变成蛀虫、老虎，那这样的话，不如踏踏实实另谋出路。
后记 春节期间思考了很多，感觉与周围的很多亲戚们都格格不入。
文章算是想到什么写什么，可能看起来杂乱无章，见谅。文章也只是我自己的一些看法，不代表普遍性，也无言对错，大家看看就好。
还好的是，我的亲戚们大多不会问我，考的咋样，有对象了没……
之前与一个舅家的哥哥很要好（与上文不是同一个），因为之前感觉我们两人观念很类似，亲戚们也都觉得我们两个像。
这个春节与他进一步交流了一些，似乎观念不尽相同了。
现在他步入社会，参加了工作，开始应付酒局，也会打点关系了。也开始教导我应该善于打点。
我以后也会这样吗？</description>
    </item>
    
    <item>
      <title>一个 Javascript 中异步的小技巧</title>
      <link>https://blog.zzsqwq.cn/posts/223/</link>
      <pubDate>Wed, 19 Jan 2022 00:24:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/223/</guid>
      <description>前言 最近看了一些 js 有关的知识，其中令我这种初学者感到很头疼的一个问题就是异步问题。
今天就我碰到的一个小问题详解一个关于异步的小技巧。
背景 我在程序中需要鉴权，来判断一个用户是普通用户还是管理员，针对不同的用户渲染不同的页面。
每个用户具有唯一的 ID，因此我只需要将管理员的 ID 放到数据库，然后加载程序的时候一一比对即可。
但是我的主程序初始化与页面的初始化是异步的，管理员的判断逻辑我放在了主程序初始化中，这也就意味着很可能我页面在加载时，主程序还没有判断完用户的身份。
每个人默认不是管理员，因此这就会导致一个问题——管理员可能也会显示成普通用户的页面，因为渲染页面的时候程序还不知道这个用户是管理员。
方案 这个方案其实是我从官方的代码上学到的，其实就结合代码给大家讲一下。
官方这里是在获取用户的 userInfo 时用到的。
主程序初始化部分代码：
这里主程序的逻辑就是在 getSetting 调用成功后，判断是否已经获得过 userInfo ，如果已经获得过，则可以直接调用 getUserInfo 函数获取值，赋值成一个主程序的全局变量，所有页面都可以用。
接下来就是一个比较奇怪的点了
可以看到官方的注释为
由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回
所以此处加入 callback 以防止这种情况
这里判断了主程序内是否含有 userInfoReadyCallback 这个函数，如果有的话就执行。
qq.getSetting({ success: res =&amp;gt; { if (res.authSetting[&amp;#39;scope.userInfo&amp;#39;]) { // 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框 qq.getUserInfo({ success: res =&amp;gt; { // 可以将 res 发送给后台解码出 unionId this.globalData.userInfo = res.userInfo // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回 // 所以此处加入 callback 以防止这种情况 if (this.</description>
    </item>
    
    <item>
      <title>记一次博客迁移记录</title>
      <link>https://blog.zzsqwq.cn/posts/221/</link>
      <pubDate>Mon, 13 Dec 2021 02:59:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/221/</guid>
      <description>前言 更换博客系统的想法已经萌生很久了，一个是感觉 Handsome 这个主题有点看腻了，但是在 Typecho 中好似已经没有更好的博客主题可选择了。
有一个看起来貌似很不错，主题名叫 maupassant。效果如下图所示，顺附链接
pagecho/maupassant(github.com)
不过一直没有下定决心更换，后来也尝试过使用 WordPress，又觉得 WordPress 体量有点太大了。
每天逛 Github 的时候看到了很多很不错的静态博客主题，那天看到一个学长分析学校校园网的博客，第一眼就感觉很不错，找寻了一下发现博客基于 Hugo，主题是 hugo-PaperMod。
于是顺着寻找了一下，发现 Hugo 中很多博客主题非常的不错。此外，Hugo 相比于 Hexo 也有很多优点：博客构建速度快，基于模板的概念组织内容，环境配置容易，在 Ubuntu 下一行命令即可，而 Hexo 依赖于 Node.js，体量稍微有点大。
于是决定把博客迁移到 Hugo，并且采用主题 Coder 。
过程 Typecho 文章导出 这里采用了 lizheming 大大的迁移插件：lizheming/typecho-export-hugo
具体导出为 zip 的时候可能会提示损坏，这样的话可以直接去服务器 \tmp\Export2Hugo 下面打包。
安装 hugo 过程基于 Windows 平台，很简单，在 这里 下载 hugo 最新的 release 版本，找到对应自己系统的即可。下载后解压到某个目录下，设置一下环境变量即可。这里牵扯到 hugo 和 hugo_extended 两个版本的区别，以下是某个 issue 中的解释：
I agree.
The only functional difference is SASS/SCSS The technical build time difference is that it requires a C++ build chain for the target platform to build, the reason why we currently only build the extended for 3 platforms (Windows, Linux, MacOS) Binaries are slightly less portable as you need a compatible Libc version on your computer (for Windows we build a fully static version as Libc is rather uncommon unless you have Visual Studio or something installed).</description>
    </item>
    
    <item>
      <title>Markdown 编辑器推荐</title>
      <link>https://blog.zzsqwq.cn/posts/220/</link>
      <pubDate>Wed, 01 Dec 2021 20:12:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/220/</guid>
      <description>前言 近期著名 Markdown 编辑器 Typora 宣布收费了，起初感觉很难受，后来感慨之余也觉得算是合理，毕竟 Typora 用起来感觉是真的很良心，也在考虑是否买一份支持一下。
已于2021/12/10购入，还是选择回归了 Typora 了哈哈哈
虽说左右分屏的设计可能更符合 Markdown 的初衷，但是像 Typora 这种所见即所得（WYSIWYG） 的书写体验确实是感觉习惯了就回不去了。
因此近期也搜集了 Markdown 编辑器作为 Typora 的替代品，在这里给大家分享一下。
特别声明，下面的分享多是我日常体验中的一些感受，可能不够客观，比较片面，大家可以自己使用体验一下！
一、Obsidian 界面预览 特点 具有文档的双向链接
支持行级和块级公式
官网可以购买 sync 套餐保持各个客户端同步
可以购买 publish 服务将 markdown 发布为排版美观的界面
有丰富的插件，例如日历、待办清单、Git同步等等。
有Linux，Windows，iPad等多平台支持。
使用体验 Obsidian 中文为黑曜石。我觉得它的图标很好看。
在我使用的一段时间内，他给我的感觉是，功能十分丰富的一个 Markdown 文件管理工具。如果你购买了他的同步服务，那你可以很轻松的在各平台同步你的 Markdown 文件夹，并且基于他强大的插件，可以很完成很多 Markdown 文件份外的事，例如待办清单、日历等等。
他虽没有所见即所得的模式，但是依靠其一款第三方插件，可以达成类似的效果，不过还是用起来不如 Typora 这种顺手。同时，它的各端同步如果不开启官方的服务，用起来还是挺麻烦的，经过我的一阵倒腾，我总结了如下几个方案：
使用第三方Git管理插件，可以定时推送文件夹中的内容到仓库，这样可以完成 linux 与 Windwos 平台的同步，只需要在某一方推送某一方拉取即可。而 Windows 平台与 iPad 平台的同步，可以借助 Apple 的 iCloud，Windows上有对应的客户端，这也是 Obsidian 官方支持的。不过在我使用的过程中我发现，这样异常的麻烦，使用 Git 来管理很可能会产生冲突，导致需要手动处理冲突，久而久之就会觉得很烦。
使用自建云盘如 NextCloud + Obsidian，或者 Seafile + Obsidian。 这个是我觉得目前非常可行的一个方案，最近我也有在尝试 NextCloud，它的多端同步做的非常不错，依靠此可以在各个平台同步文件夹，加上 Obsidian 强悍的能力，是不错的组合！</description>
    </item>
    
    <item>
      <title>2021版小新Pro14 Ubuntu 20.04 配置指南</title>
      <link>https://blog.zzsqwq.cn/posts/215/</link>
      <pubDate>Tue, 02 Nov 2021 01:16:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/215/</guid>
      <description>2021版小新Pro14 Ubuntu 20.04 配置指南 补充 最近重装了 Ubuntu 20.04，又找了相关的一些帖子，发现 聯想Yoga 14s 2021款裝機小記 中提到了下文中提到的屏幕闪烁的问题，解决办法是：只需要在内核参数中加入 i915.enable_psr=0 即可。
具体操作步骤如下：
$ sudo vim /etc/default/grub 在 GRUB_CMDLINE_LINUX_DEFAULT 这一行的最后添加 i915.enable_psr=0，保存后终端运行：
$ sudo update-grub 然后重启即可。
前言 苦于沉重游戏本的迫害，新买了一台小新Pro14 2021款，上手感觉还挺不错的。如下是配置：
CPU：酷睿 i5-11300H 显卡：集成显卡 Intel 锐炬Iris Xe 内存：16G 外存：512 SSD 屏幕：分辨率 2880x1800、400nits、100%sRGB 这里需要注意的是，不同时间出的小新Pro14配置是不太一样的，所以我这里列了一下配置。主要区别在于有一部分是2.2K分辨率+MX450显卡，而我这个是2.8K分辨率+锐炬Iris Xe显卡。
为了工作的需要，要装一个Ubuntu，先是装了之前用过的 Ubuntu 18.04，安装后发现触摸板无法使用，一系列探索后无果，在朋友的推荐下，还是决定安装 Ubuntu 20.04 试一下，踩了一些坑，在这里记录一下。
问题列表 如果你遇到了以下问题，那么这篇文章的方法可能会对你有益处：
Ubuntu 18.04 相关 Ubuntu 18.04 无法使用触摸板 Ubuntu 18.04 无法使用内置键盘 Ubuntu 18.04 无法调节亮 Ubuntu 18.04 查看GPU发现是llvm，而不是Iris Xe Ubuntu 20.04 相关 Ubuntu 20.</description>
    </item>
    
    <item>
      <title>关于Git的一些理解</title>
      <link>https://blog.zzsqwq.cn/posts/201/</link>
      <pubDate>Fri, 23 Jul 2021 14:17:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/201/</guid>
      <description>前言 前段时间在 Github 学完了关于 git 的小游戏 learnGitBranching ，受益匪浅。
它通过可视化的方式将分支的关系，每条命令的作用等都明明白白的体现出来，可以很直观的感受到你每条命令对整个分支树，每一个 ref 的作用。
通过这种学习感觉自己对 Git 的理解更加深入一步，能够理解其中的原理，而不是浅尝辄止，照猫画虎。
学习中记了一些零零散散的思路，想要写一篇笔记记录出来，之前已经写过一个简单的 Git 教程，这篇教程将会更加深入，希望可以帮助大家更好的掌握 Git。
窃认为，想要学好 Git ，必须要理解清楚其中的分区以及引用，学会了这两个，各种基本操作就很容易理解了。接下来的笔记也基本以此思路展开。
Git中的分区 首先，Git中存在三大分区，分别是工作区、暂存区、版本库。其中，
工作区即我们工作的目录，暂存区是我们执行 git add 后文件存在的区域。
我们可以通过 git status 对两种状态进行查看，例如：
~/test master* base ❯ git status On branch master Changes to be committed: (use &amp;#34;git restore --staged &amp;lt;file&amp;gt;...&amp;#34; to unstage) modified: test Changes not staged for commit: (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed) (use &amp;#34;git restore &amp;lt;file&amp;gt;.</description>
    </item>
    
    <item>
      <title>利用树莓派为HP LaserJet 1020配置无线打印功能</title>
      <link>https://blog.zzsqwq.cn/posts/198/</link>
      <pubDate>Sun, 18 Jul 2021 16:03:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/198/</guid>
      <description>前言 最近基地的打印机突然又好起来了。
因为基地的打印机型号比较老——HP LaserJet 1020，没有无线打印的功能。所以之前一位学长1 用树莓派配置了打印机的无线打印功能，但是后来发现有一些问题，有时候发送打印请求树莓派无法接收，而且不知道为何，学长之前用的是树莓派自己创建WiFi，连接对应WiFi才能打印，但是这个显然不是最优的解决办法。
考虑到之间已经配置好基地WiFi，我决定重新配置一下打印功能，使其连接基地WiFi即可实现局域网打印。
配置过程 查看树莓派内容 通过ssh连接树莓派，发现里面除了Github上的一个开源项目create_ap ，就没有什么其他的内容了，连接屏幕后发现没有任何图像信号，无从下手，因此考虑重新刷机。
对树莓派进行刷机 把数据备份了一下，看了一下树莓派版本是2015年生产的 Raspberry Pi 3 model B V1.2 ，是老古董了。
去官网看了一下，因为我对Ubuntu比较熟悉，我计划安装一个 Ubuntu20.04版本的，考虑到版本比较老，就装了server版本的，相比与desktop版本负担更小一些。
其实就是下一个官方的软件，Raspberry Pi Imager ，直接用读卡器对树莓派的存储卡刷机即可。
这里是对应的镜像以及教程： 镜像下载 安装教程
配置网络相关 Ubuntu的server版本有个比较蛋疼的问题就是上网比较困难，如果是用的学校网线，必须要PPPOE拨号才能上网，但是server版本居然没有 net-tools 和 network-manager ，连接WiFi啥的试了很多办法但还是没有什么作用。
解决办法：用网线直接连接树莓派和有网的路由器，安装 net-tools 和 network-manager ，执行
$ sudo nmtui 选择 Activate a connect 连接无线的WiFi，执行
$ sudo ifconfig 查看WiFi对应的IP，至此，树莓派可以摆脱屏幕，我们可以使用电脑进行使用 ssh 连接。
这里也可以使用网线进行连接，具体操作如下
用网线连接树莓派和自己的电脑。
在树莓派的利用 nmtui 选择 Edit a connection ，Add一个Ethernet connect，对IPv4 CONFIGURATION进行设置，首先讲 Automatic 设置为 Manual，设置 Address 为 静态IP 如 192.</description>
    </item>
    
    <item>
      <title>deepin-wine-qq-9.1.8版本无法正常启动的解决方案</title>
      <link>https://blog.zzsqwq.cn/posts/195/</link>
      <pubDate>Wed, 16 Jun 2021 01:38:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/195/</guid>
      <description>问题描述 ​Ubuntu下想要使用QQ有一个比较好的解决方案就是deepin-wine的版本，deepin-wine版本的QQ一共有两个版本，分别是 8.9.1 和 9.1.8 ，前者安装后发现无法登陆，登录时会提示版本过低的问题，于是我换到9.1.8版本后，启动初始化后就无任何信息了，于是开始排查问题
解决方案 ​首先我们根据上文的启示，因为每一个应用程序对应了一个 xxx.desktop 文件，因此在应用库中的QQ一定也有一个对应的 desktop 文件
​我们进入到 /usr/share/applications ，运行
$ ls | grep -i qq ​可以发现其中有一个名为 deepin.com.qq.im.desktop 的文件，我们打开后发现内容如下：
#!/usr/bin/env xdg-open [Desktop Entry] Encoding=UTF-8 Type=Application X-Created-By=Deepin WINE Team Categories=chat; Icon=deepin.com.qq.im Exec=&amp;#34;/opt/deepinwine/apps/Deepin-QQ/run.sh&amp;#34; -u %u Name=QQ Name[zh_CN]=QQ Comment=Tencent QQ Client on Deepin Wine StartupWMClass=QQ.exe MimeType= ​可以看到Exec那一栏为 Exec=&amp;quot;/opt/deepinwine/apps/Deepin-QQ/run.sh&amp;quot; -u %u ，发现他是运行目录下的一个 run.sh 脚本来启动的。
​我们进入目录下直接运行该脚本，查看log信息：
base ❯ ./run.sh Run Deepin-QQ 9.1.8deepin0 c:/Program Files/Tencent/QQ/Bin/QQ.exe run Deepin-QQ progress pid Gtk-Message: 01:16:58.069: GtkDialog mapped without a transient parent.</description>
    </item>
    
    <item>
      <title>利用神经网络进行波士顿房价预测</title>
      <link>https://blog.zzsqwq.cn/posts/182/</link>
      <pubDate>Sun, 16 May 2021 15:19:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/182/</guid>
      <description>前言 前一阵学校有五一数模节校赛，和朋友一起参加做B题，波士顿房价预测，算是第一次自己动手实现一个简单的小网络吧，虽然很简单，但还是想记录一下。
题目介绍 波士顿住房数据由哈里森和鲁宾菲尔德于1978年Harrison and Rubinfeld1收集。它包括了波士顿大区每个调查行政区的506个观察值。1980年Belsley et al.2曾对此数据做过分析。
数据一共14列，每一列的含义分别如下：
英文简称 详细含义 CRIM 城镇的人均犯罪率 ZN 大于25,000平方英尺的地块的住宅用地比例。 INDUS 每个镇的非零售业务英亩的比例。 CHAS 查尔斯河虚拟变量（如果环河，则等于1；否则等于0） NOX 一氧化氮的浓度（百万分之几） RM 每个住宅的平均房间数 AGE 1940年之前建造的自有住房的比例 DIS 到五个波士顿就业中心的加权距离 RAD 径向公路通达性的指标 TAX 每一万美元的全值财产税率 PTRATIO 各镇的师生比率 B 计算方法为 $1000(B_k-0.63)^2$，其中Bk是按城镇划分的非裔美国人的比例 LSTAT 底层人口的百分比(%) price 自有住房数的中位数，单位（千美元） 基于上述数据，请完成以下问题：
建立波士顿房价预测模型并对预测结果进行评价。
问题分析 首先这道题目的很明确，数据一共是 $506×14$ 的一个矩阵，有十三维的自变量，通过建立一个模型来拟合回归出最终的因变量 price，即户主拥有住房价值的中位数。这是一个回归问题，综合考虑有以下两个思路
通过各种回归算法（GradientBoostingRegressor，RandomForestRegressor，ExtraTreesRegressor，LinearRegressor等）结合全部或部分自变量来回归最终的price
建立前馈神经网络模型，根据通用逼近定理，我们可以拟合此回归模型。
我们对上述模型来进行实现并确定评估标准来对他们进行比较，选择最优的模型作为预测模型。
算法流程 传统的回归算法 自变量的选择 首先，考虑到数据集中13列自变量其中某一些可能和最终的房价并无强相关性，如果全部使用进行预测可能会对模型引入噪声，因此我们首先计算了房价price与各个自变量之间的相关系数 $r$ ，其中 $r$ 计算公式如下： $$ r = \frac{\sum(x_i-\bar{x})(y_i-\bar{y})}{\sqrt{\sum(x_i-\bar{x})^2\sum(y_i-\bar{y})^2}} $$ 其中 $x_i,y_i$ 为数据的每个分量，$\bar{x}，\bar{y}$ 为数据的均值
该系数反映了两变量之间的相关性，$r$ 的绝对值介于 $[0,1]$ 区间内，$|r|$ 越接近1，表示两数据相关性越高，反之越低。计算后结果如下：</description>
    </item>
    
    <item>
      <title>2021RoboMaster中国赛比赛记录</title>
      <link>https://blog.zzsqwq.cn/posts/173/</link>
      <pubDate>Fri, 30 Apr 2021 17:32:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/173/</guid>
      <description>前言 ​说起来的话今天距离比赛已经过去近一个月了，比赛结束一直想要记录一下and总结一下经验，但是实在是太懒了，临近五一假期，在四月的末尾为这次中国赛画一个句号吧。
比赛过程 ​如果没记错的话比赛是3.30号（周二）去，4.1号（周四）结束，共三天。但是因为第三天没做什么有意义的事情，就只记录两天了。
第一天 ​第一天大概中午十点到的吧，去的时候登记完领了牌，就在当地布置场地了。到了场地上才发现，我们好像是拿的东西最多的，包括外接显示屏和集成主机，好像都基本没人带过去····集成主机拿了过去也没怎么用到，本来预想用到的哨岗相机因为 ROS 的通信问题也没能跑成，最后两个机器人还是各跑各的策略了。
​调试的时候出了一点问题，两个哨岗相机通过20m的USB延长线后，只有一个能连接，后来排查了一下，好像是因为有一条线是光纤USB3.0的线，跟相机的接口不兼容···这个问题还没想好怎么解决，可能会考虑到时候自己带一根USB延长线过去。
​犹记得调试的时候是和青海大学一起调的，有点可惜的是调试中的我方机器人一直在一个地方鬼畜。那晚上我记得大家熬到了很晚···很可惜的视觉因为用的是学习的框架可调性很差，并没有帮上太大的忙。
第二天 ​第二天记得一共有三场比赛，分别是打哈工大，哈工大深圳，以及青海大学。
​在比赛过程中其实对视觉，我没有做太多的调整，主要还是大家在写导航和策略相关的东西吧。
​跟哈工大打的那一场二车因为没有写好启动判定被罚下了，一车因为点位有问题一直卡在障碍物上。
​跟哈工深和哈工大两场之间还隔了挺长时间，一个上午是一个下午，中间大家调试了很久，幸好在下午和哈工深打的时候基本没有鬼畜，可以正常的对局，只是因为实力不够强，很明显的一个问题就是视觉做的有问题吧，很多时间在朝着自己的队友打，还有就是会朝着场外的人员打，这是需要改进的点。
​跟青海大学打的那场，距和哈工深比赛结束只有十几分钟的间隔时间，大家调了一个小bug就又重新赶去检录了，虽然当时已知青海大学的战术是站在原地不动的，但是由于不知道哪里出问题了，比赛中前一分钟两车都没动，后一分钟二车虽然动起来了去吃了加成区，但是因为定位的一些问题，没有看到敌方机器人并且撞墙了··自己撞掉了60血，最后还是败了QAQ。
​所以就很耻辱的被3：0送走了，这样就结束了比赛日程。
​值得反思的事情很多吧，赛前虽然基本熬了一个多星期来调车，还是只在最后一天才开始连裁判系统联调，包括暑假效率不高等问题都是值得反思的···打完比赛心中大概已经有了一些改进点，也想把自己的一些调车心得等记录下来，但是因为时间以及学业上的一些事情等一直没去做，本来计划的五月初做好改进的视觉也一直没兑现，希望这个五一假期会有较大的突破吧，不过还要打数模···好累，不想动。
最后，这一天还拿到了和Charm young的合照，还挺动容的，之前看Robomaster的一个宣传标语就是让工程师们成为明星，给他们一个展示的舞台，看到大家对Charm young的热情，深深的感受到了这一点。</description>
    </item>
    
    <item>
      <title>关于Anaconda中pip路径指向问题</title>
      <link>https://blog.zzsqwq.cn/posts/169/</link>
      <pubDate>Sat, 06 Mar 2021 20:51:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/169/</guid>
      <description>前言 最近使用Anaconda的时候遇到了一个很奇怪的问题，如当我新建环境 condatest 后，使用 pip -V 查看pip的路径指向，会发现pip指向的是另一个环境 CenterNet 的路径。搜索了很久得到一个有一些用的解决方法
解决方案 设有问题的环境为 condatest ，python版本为 3.6
然后进入 ~/anaconda3/envs/condatest/lib/python3.6
编辑目录下的 site.py 文件，将其中的 USER_SITE 的值修改为 /home/zs/anaconda3/envs/condatest ，注意这里路径里面的 zs 是你的当前用户名， USER_BASE 的值修改为 /home/zs/anaconda3/envs/condatest/lib/python3.6/site.py，然后问题应该就解决了。
因为如果环境问题的话，上面两个字符串都为空，猜测的原因是因为有同python版本的环境导致默认指向错误，此方式为修改conda中pip的指向。
参考链接 更改conda环境中的pip包安装的默认路径 </description>
    </item>
    
    <item>
      <title>如何使用CenterNet做3D目标检测测试</title>
      <link>https://blog.zzsqwq.cn/posts/164/</link>
      <pubDate>Wed, 27 Jan 2021 11:50:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/164/</guid>
      <description>CenterNet—Objects as Points介绍 ​CenterNet是一个anchor-free的目标检测网络，与YOLOv3相比，精度有所提升，此外他不仅能够用于2D目标检测，也能够用于人体姿态识别，3D目标检测等···
安装CenterNet ​其实安装CenterNet的过程就是一个配置环境的问题，直接跟着官方给出的这里Install.md配置一下即可，十分推荐使用Conda来管理环境，这里给出我的环境给大家参考一下：
Ubuntu = 18.04 LTS
pytorch = 1.2.0
python = 3.6.12
torchvision = 0.4.0
cuda = 10.2
​需要注意的是：
官方给出的教程里面使用的是 pytorch 0.4.1，但是我个人在实测过程中遇到了一些问题，遂安装网上的教程更改为 pytorch 1.2.0，并且需要把 ${CenterNet_Root}/src/lib/models/networks/DCNv2 中的这个DCNv2网络更改为官方的最新版。 这里使用的cuda版本最好和你的显卡匹配，之前因为显卡驱动的一些问题导致重装了电脑，根据我们学长学姐的建议，最好直接去cuda官网那边去下载deb包直接安装。 遇到环境配置问题可以先去Google一下，一般作者都在CenterNet&amp;rsquo;s Issues中给出了回复，如果没有，可以发邮件给作者询问，当然也可以发消息/邮箱给我，大家一起探讨一下~ 运行CenterNet的demo ​想要运行demo，首先要去 Model zoo 中下载一下我们需要使用的model，2D目标检测使用的是 ctdet_coco_dla_2x.pth ，人体姿态评估使用的是 multi_pose_dla_3x.pth ，下载后统一将他们放在CenterNet根目录中的model文件夹中。
​然后使用conda切换到CenterNet的环境，在终端中运行：
python demo.py ctdet --demo ${CenterNet_Root}/images/17790319373_bd19b24cfc_k.jpg --load_model ../models/ctdet_coco_dla_2x.pth ​这里需要注意的是 --demo 后面的 ${CenterNet_Root}/images/17790319373_bd19b24cfc_k.jpg ，这里我使用的是官方给出的实例图片，它位于CenterNet根目录的images文件夹中，前面的 ${CenterNet_Root} 代表的是 CenterNet根目录，好比我的就位于 /home/zs/CenterNet 。
​如果不出意外的话效果应该如下图所示：
运行CenterNet的3D目标检测 配置数据集和模型 ​我们可以直接参考官方的 DATA.md 来配置我们的数据集。
​然后到 Model zoo 下载3D检测使用的模型 ddd_3dop.</description>
    </item>
    
    <item>
      <title>Git的简易教程</title>
      <link>https://blog.zzsqwq.cn/posts/157/</link>
      <pubDate>Sat, 05 Dec 2020 20:26:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/157/</guid>
      <description>前言 最近在复习Git，因此顺手做个笔记分享出来，方便大家学习和查阅。相信无论是以后的课程作业还是工作，我们都会或多或少的接触/用到Git。
什么是Git？ Git你可能没听说过，但是我相信你应该听说过Github，毕竟是全球最大的同性交友网站。他和Git有着密不可分的联系，我们后续再详细介绍。
Git的中文全称叫 分布式版本控制系统 ，版本控制系统是什么意思呢？我们举一个简单的例子，你在做一个大作业，很可能要写上千行的代码，但是你可能写完一个功能以后，对他不够满意，但是又害怕改了以后后悔了，又找不回来了，所以你可能就有很多版本，版本1，版本2，版本3等等等。Git就是解决这个问题的，让你文件能够保持最新，但是又能恢复到之前的版本。
那么既然有分布式版本控制系统，就有 集中式版本控制系统，前者的代表是 Git ，后者的代表有 SVN、CVS 等。
关于两者的区别，对于集中式版本控制系统，如果你想要对做一个项目的内容做修改，那么你要先从中央服务器把最近的版本拉取(Pull)下来，然后修改完以后，把修改后的版本推送(Push)上去，你本地只有最新的版本，而没有完整的版本库，分布式版本控制系统所作的工作与集中式的相差不大，只是它的本地会有一个完整的版本库，因此它十分的安全。
这里贴一个他人总结的区别，供大家参考。
Git的安装 Linux系统
因为我只用过Ubuntu，所以我只会Ubuntu的QAQ..
Ubuntu中安装Git只需要在终端中输入 sudo apt-get install git 即可。
如果是其他的linux系统，我猜你在终端中输入git即可获得安装提示，不然的话借助搜索引擎也可以。
Windows系统
直接去 Git官网 下载安装程序然后安装即可。关于安装时候的选项，我都是用的默认的。
Mac OS
太穷了，没用过Mac，但是参考链接中给出了方法，大家有需求可以参考。
Git的基本使用 Git可以做许多事情，好比版本更新，版本修改，提交到远程仓库等等，这里我们只写一写大概以后用的会比较多的。
需要注意的是，我们安装以后大概会有一个 Git GUI 还有一个 Git Bash ，开发中多用 Git Bash，下面的教程也是基于Git Bash的。
表明身份
在Git所有仓库中我们都要有一个所有者的身份，用于标识是谁的仓库，用如下方式标识
git config --global user.name &amp;#34;Your Name&amp;#34; git config --global user.email &amp;#34;Your email&amp;#34; 创建版本库
我们想要把一个文件夹的内容用git来管理，只需要在文件夹目录运行
git init 顾名思义这就是一个初始化的过程，运行以后在当前目录生成一个 .git 文件夹，里面是我们版本控制的数据，一般不要修改。
把文件添加到Git的暂存区
这里出现了 暂存区 这个名词，Git内部的逻辑大概把我们工作的过程分为了三部分
一个是 工作区 ，这个就是我们本地的文件夹。 一个是 暂存区 ，这是我们把文件暂时放到暂存区里，没有决定更新我们的版本。 一个是 最终分支，这就是我们最终的版本存放的位置。 贴一张廖雪峰老师教程中的一张图，我觉得还挺形象的。</description>
    </item>
    
    <item>
      <title>Ubuntu18.04优化教程</title>
      <link>https://blog.zzsqwq.cn/posts/141/</link>
      <pubDate>Fri, 04 Dec 2020 01:39:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/141/</guid>
      <description>前言 因为最近Ubuntu用的比较频繁，所以前一阵把Ubuntu16.04换成Ubuntu18.04了，并且囿于机械硬盘那启动速度，我忍痛割爱把我80G的固态硬盘分给了Ubuntu。
后来，用着用着就觉得这个Ubuntu的原始界面确实不是特别的好看，配色偏基佬紫的感觉。“工欲善其事，必先利其器“，我们只有将自己的工作环境布置的舒心一些才能有做下去的动力！所以我想给Ubuntu换一个看起来舒服点的界面，然后上网找教程乱七八糟的倒腾了一会，感觉换完以后完全不一样了，这个界面真的好看！！用起来也特别的舒心，感觉自己马上就要告别Windows投奔Linux的怀抱了。后续还有一些其他的优化，例如装QQ、微信、配置终端等，一并写在这里吧。
Ubuntu界面的优化 具体效果 先放几张效果图上来，是我改后的界面。大概就是这样(自我感觉挺好看的)，当然也有其他的主题可供选择。
1.安装GNOME桌面环境主题配置工具 如果要改主题，那么首先要有一个利器，这里我用的Ubuntu18.04，桌面环境为 GNOME 3.28.2 ，因为我目前接触的只有GNOME桌面环境的，Ubuntu18.04本来的桌面环境就是GNOME，但是Ubuntu16.04好像没有自带，但是可以安装，这里大家可以自行百度了解。
然后我们已经有了GNOME桌面环境后，安装主题配置工具 GNOME Tweaks ，在终端中输入如下内容：
sudo apt-get update sudo apt-get install gnome-tweak-tool 我们先更新软件源，然后安装后直接打开他就行，在系统软件中中文大概叫 优化 。
2.拓展上述工具 安装完上述工具后，我们可能发现了一个问题，就是外观那一栏目的Shell有一个感叹号，无法更改，这是因为我们没有安装拓展导致的。我们在终端中运行
sudo apt-get install gnome-shell-extensions 然后重启一下电脑。再打开软件找到左侧的拓展，把 User themes 那一栏目打开。切换回去就可以发现Shell那边的感叹号无了。
3.寻找自己喜欢的主题 这里我大家可以去这个网址去找自己喜欢的 GNOME-LOOK.ORG
这里面包含了图标，主题这些，下面介绍一下如何安装。
好比我们找到一个自己喜欢的主题，然后我们点击下面的 Files ，可能会有很多文件，但是多是同一个主题的不同风格，好比暗风格和亮风格这样的，还有不同的版本的，我多是安装那个下载量最多的，我们下载那个对应的文件(多是tar.xz安装包)。
对于主题的安装，我们只需要把解压出来的文件，移动或复制到 /usr/share/themes/ 目录下，如果是光标\图标的安装，那么就把文件夹移动到 /usr/share/icons 目录下。
然后我们回到 GNOME Tweaks 软件中就可以发现，我们已经可以在主题\图标\光标\Shell清单中找到我们移动到文件夹中的文件了，然后选择就可以切换了。这里需要注意的，很多主题都是自带Shell的，你下了一个主题，那么你可以在Shell和主题这两个栏目中都找到他们，是一个配套的。
4.一些后续的调整 我们后续可以改变左边收藏夹的位置，我觉得放在左边有一丢丢的丑，所以我选择把它放在的下面。
我们去Ubuntu软件中搜索 Dash to dock，然后安装这个拓展，然后打开 GNOME Tweaks 软件在拓展中找到他就可以随心所欲的调我们的收藏夹的位置了。
5.我自己的配置 theme&amp;amp;shell Canta-light-compact icons 01-McMojave-circle 6.界面修改的参考链接 Ubuntu18.04美化主题(mac主题) Ubuntu18.04美化主题(完整版) GNOME-LOOK.ORG 30个非常不错的Ubuntu主题供你选择 ubuntu18.</description>
    </item>
    
    <item>
      <title>“程序星编程之路”第二次作业题解</title>
      <link>https://blog.zzsqwq.cn/posts/136/</link>
      <pubDate>Thu, 12 Nov 2020 23:13:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/136/</guid>
      <description>“程序星编程之路”第二次作业题解 A. Zs的回文质数 题目描述 读入一个整数 $n$ ，输出 $[1,n]$ 的所有回文质数，我们规定 $1\sim9$ 也是回文数。
思路 首先我们需要了解什么是回文数，以及什么是质数。
简单点说，回文数就是正着读反着读都是一样的，也就是对称的，形如 $abcba $ 或者 $123321$ 这样的。
质数的话，对于一个数 $n$ ，如果他是质数，那它除了 $1$ 和 $n$ 没有其他因子。例如 $2,3,5,7,11$ 这样的。
那么接下来我们考虑一下解决这个问题应该怎么做，首先我们看一下数据范围，$[1,100000]$ ，还是挺小的，我们可以考虑直接枚举每一个数来判断它是不是回文数，然后再判断一下是不是质数，如果两个都满足，我们就输出它。
判断回文数，我们可以考虑到 NOJ05 幸运数 一题的解题思路，也就是说我们把一个数倒置过来，好比一个数 $xyz$ 倒置成 $zyx$ ，然后判断是否 $xyz == zyx$ ，如果相等的话就是回文数，如果不相等就不是。
判断质数，我们可以在 $[2,\lfloor\sqrt{n}\rfloor]$ 枚举它的因子，这个的完备性我上课的时候证明过，不再赘述。这里需要注意 $1,2$ 需要特判一下。
代码 #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;math.h&amp;gt; //我们需要用到sqrt函数，因此需要引入数学库 int main() { int n; bool flag = false; // 标记 i 是否满足条件 scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); for(int i=1;i&amp;lt;=n;i++) { flag = true; int p=i,j=0; while(p) // 将 p 反转为 j { j=j*10+p%10; p/=10; } if(j==i) { if(j==1) continue; // 特判 1 if(j==2) // 特判 2 { printf(&amp;#34;2\n&amp;#34;); continue; } int sqrtj = sqrt(j); for(int k=2;k&amp;lt;=sqrtj;k++) // 枚举 [2,sqrt(n)] { if(j%k==0) // 如果能够整除(余数为0),那么是 j 的因子 { flag = false; break; } } if(flag) { printf(&amp;#34;%d\n&amp;#34;,j); } } } } 其他 因为我们讲到这里的时候，我们没讲函数，但是这道题如果我们把判断是否为回文数，判断是否为质数，都另成一个函数模块，将使得程序变得更加简洁。我在这里也将函数版本的贴出来，有兴趣的可以看一下。</description>
    </item>
    
    <item>
      <title>Visual Studio 2019 中 OpenCV 配置教程</title>
      <link>https://blog.zzsqwq.cn/posts/114/</link>
      <pubDate>Sat, 31 Oct 2020 20:38:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/114/</guid>
      <description>&lt;h2 id=&#34;windows-平台-visual-studio-2019-中-opencv-配置教程&#34;&gt;Windows 平台 Visual Studio 2019 中 OpenCV 配置教程&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;我这里配置用的是4.5.0版本，但实际配置过程中需要的大部分时间只是路径，因此和版本基本无关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只有一个地方是和版本有关系的，在配置链接器的 &lt;code&gt;opencv_wordxyzd.lib&lt;/code&gt; 时，大家一定要注意！！&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据库的一些基础知识总结</title>
      <link>https://blog.zzsqwq.cn/posts/107/</link>
      <pubDate>Fri, 11 Sep 2020 00:08:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/107/</guid>
      <description>了解SQL 一.什么是SQL SQL是结构化查询语言（Structured Query Language）的缩写。是一种专门用来与数据库通信的语言。
二.什么是数据库？ 数据库（Database）：保存有组织的数据的容器（通常是一个文件或一组文件）。 ​[scode type = &amp;ldquo;yellow&amp;rdquo;]需要注意的是，有时候我们把数据库软件也简称为数据库，但是数据库软件和数据库有本质区别，数据库软件应称为DBMS（数据库管理系统），我们通过数据库软件对数据库进行删减等操作，他代替你操作和访问数据库。[/scode]
三.数据库的组成 表
数据库中通常有多张表，这类似于一个清单。就好像我们管理两个班级就可以用两个表单。
表单之间用表名区分，在同一个数据库中不能有两个具有相同表名的表单。
行（又称记录）
在表中可以有很多行，我们可以把表看成一个二维数组。每一行代表了一个成员。
列
每一行有好多列，一列可以代表着成员的一个属性，例如id，班级，姓名等等······
数据类型
每一列都有着特定的数据类型，例如字符串和数字就是两种不同的数据类型。
主键（primary key）
对于表中的每一行，我们都有一个唯一标识他的记号，这称作他的主键。
可以发现，主键有以下特征：1.每一行都必须有一个主键，不能为空。2.不同行的主键不同。
我们可以用多列作为主键，这样只需要确保多列组合起来的标识是唯一的。
外键（foreign key）
外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的值，通过DBMS的操作可以将两个表联结起来。
通俗点讲，好比有两张表，分别存储了所有供应商的信息，和所有产品的信息，在前面那张表定义了每个供应商的id，作为其主键。然后我们为每个产品定义外键的id，填上对应供应商的id，然后通过连结，我们就能知道每个产品供应商的详细信息了。
可伸缩性（scale）
能够适应不断增加的工作量而不失败。设计良好的数据库或应用程序称之为可伸缩性好（scale well）。
四.数据库的连结 ​在上面我们讲外键的时候有讲到联结，连结的意思大概就是把多个表，根据一些命令串在一起。
等值连结（内部连结）
顾名思义，等值连结就是通过两个表之间元素值的相同来把两个表连结起来。
自联结
这个用于查找在同一表中某一特性相同的所有成员。有的时候自联结要比子查询快很多。
自然联结
在自然联结中，排除相同的列多次出现，使每个列只返回一次。
外部联结
联结包含了那些在相关表中没有关联行的行。这种类型的联结称为外部连结。
五.数据库设计范式 范式：当一个关系中的所有分类都是不可再分的数据项时，该关系是规范化的。不可再分的数据项，即不存在组合数据项和多项数据项。一个低一级的关系模式，通过模式分解可以转换为若干高一级范式的关系模式的集合，这个过程就叫规范化。
第一范式：当关系模式R的所有属性都不能在分解为更基本的数据单位时，称R是满足第一范式的，简记为1NF。满足第一范式是关系模式规范化的最低要求，否则，将有很多基本操作在这样的关系模式中实现不了。
第二范式：如果关系模式R满足第一范式，并且R得所有非主属性都完全依赖于R的每一个候选关键属性，称R满足第二范式，简记为2NF。
第三范式：设R是一个满足第一范式条件的关系模式，X是R的任意属性集，如果X非传递依赖于R的任意一个候选关键字，称R满足第三范式，简记为3NF。
用我们学长的一句话，范式不是必须满足的，但是我们尽量按照范式来设计数据库，毕竟这是这么多程序员实战经验总结出来的。
参考链接 数据库设计三大范式_dosthing 数据库设计三大范式_张龙豪 mysql必知必会 </description>
    </item>
    
    <item>
      <title>自买服务器建站教程</title>
      <link>https://blog.zzsqwq.cn/posts/77/</link>
      <pubDate>Wed, 26 Aug 2020 16:34:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/77/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;本来之前是用的 &lt;strong&gt;Hexo + Github&lt;/strong&gt; 搭建的，虽然用的是 &lt;strong&gt;Github&lt;/strong&gt; 的服务器，但是我用家里的移动网访问起来还是没什么压力，就是慢一点，可以接受。&lt;/p&gt;
&lt;p&gt;后来到了学校，我们学校网访问 &lt;strong&gt;Github&lt;/strong&gt; 的速度简直可以用龟速来形容，白天可以说不开代理根本进不去，只有晚上了才能勉强进得去。然后我就寻思，能不能换成国内的服务器，然后就发现了 &lt;strong&gt;Gitee&lt;/strong&gt; ，这个可以算是中国版的 &lt;strong&gt;Github&lt;/strong&gt; ，他具有的服务 &lt;strong&gt;Gitee Pages&lt;/strong&gt; 在国内可以飞速的访问，But如果想要自定义域名/每次推送自动更新需要开 &lt;strong&gt;Github Pages Pro&lt;/strong&gt; ，还挺贵的，一年大概 &lt;strong&gt;120￥&lt;/strong&gt; 吧。此外，如果想要将域名解析到国内的服务器必须要备案，&lt;strong&gt;备案又必须有服务器&lt;/strong&gt;，那我有服务器了还费那些事了，于是考虑自己买服务器重构一下博客。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排位三和四记录</title>
      <link>https://blog.zzsqwq.cn/posts/68/</link>
      <pubDate>Wed, 19 Aug 2020 13:21:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/68/</guid>
      <description>&lt;h1 id=&#34;day-3&#34;&gt;Day 3&lt;/h1&gt;
&lt;h2 id=&#34;a-黑妹的游戏httpsacnowcodercomacmcontest6956a&#34;&gt;A. &lt;a href=&#34;https://ac.nowcoder.com/acm/contest/6956/A&#34;&gt;黑妹的游戏Ⅰ&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给出三个不同的初始数字$a,b,c$，黑妹每次选择两个不同的数字，计算出差的绝对值后如果黑板上没有就写在黑板上。问黑妹最多能添加多少个数字。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排位一和二记录</title>
      <link>https://blog.zzsqwq.cn/posts/5/</link>
      <pubDate>Mon, 17 Aug 2020 20:04:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/5/</guid>
      <description>&lt;h1 id=&#34;day-1&#34;&gt;Day 1&lt;/h1&gt;
&lt;h2 id=&#34;a-兔子的区间密码httpsacnowcodercomacmcontest6954a&#34;&gt;A. &lt;a href=&#34;https://ac.nowcoder.com/acm/contest/6954/A&#34;&gt;兔子的区间密码&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给定一个区间$[L,R]$ ，求从这个区间任意取两个整数(可以相同)，两者异或后能得到的最大值是多少？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高精度计算pi</title>
      <link>https://blog.zzsqwq.cn/posts/67/</link>
      <pubDate>Mon, 20 Apr 2020 01:25:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/67/</guid>
      <description>&lt;h2 id=&#34;高精度计算pi值&#34;&gt;高精度计算PI值&lt;/h2&gt;
&lt;h3 id=&#34;题目描述&#34;&gt;题目描述&lt;/h3&gt;
&lt;p&gt;使用双向链表作为存储结构，请根据用户输入的一个整数（该整数表示精确到小数点后的位数，可能要求精确到小数点后 &lt;strong&gt;500&lt;/strong&gt; 位），高精度计算PI值。&lt;strong&gt;提示：可以利用反三角函数幂级展开式来进行计算。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python初步学习</title>
      <link>https://blog.zzsqwq.cn/posts/66/</link>
      <pubDate>Sat, 18 Apr 2020 01:24:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/66/</guid>
      <description>&lt;h1 id=&#34;python学习笔记&#34;&gt;Python学习笔记&lt;/h1&gt;
&lt;h2 id=&#34;python的不同解释器&#34;&gt;Python的不同解释器&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPython&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是自带的用C语言开发的解释器，因此叫CPython。它也是使用最广的Python解释器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IPython&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是基于CPython之上的一个交互式解释器，只是相比于CPython多了交互上的优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PyPy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它的目标是执行速度。PyPy采用&lt;a href=&#34;http://en.wikipedia.org/wiki/Just-in-time_compilation&#34;&gt;JIT技术&lt;/a&gt;，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。他与CPython略有不同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;大数类的实现</title>
      <link>https://blog.zzsqwq.cn/posts/64/</link>
      <pubDate>Mon, 06 Apr 2020 01:22:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/64/</guid>
      <description>&lt;h1 id=&#34;c大数类设计思路&#34;&gt;C++大数类设计思路&lt;/h1&gt;
&lt;h3 id=&#34;洛谷大数类httpswwwluogucomcnproblemu111551的评测结果开了氧气优化&#34;&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/U111551&#34;&gt;洛谷大数类&lt;/a&gt;的评测结果(开了氧气优化)&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.zzsqwq.cn/usr/uploads/2020/08/4200651250.png&#34; alt=&#34;BigNumber.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个第四个点真的优化不过去了QAQ，24W的数据，&lt;del&gt;丧心病狂&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux和Vim入门</title>
      <link>https://blog.zzsqwq.cn/posts/63/</link>
      <pubDate>Mon, 30 Mar 2020 01:18:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/63/</guid>
      <description>&lt;h2 id=&#34;linux系统常见命令&#34;&gt;Linux系统常见命令&lt;/h2&gt;
&lt;h3 id=&#34;基本操作&#34;&gt;基本操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**cd (Change Directory)**命令：跳转目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cd path&lt;/strong&gt; ： path为路径，进入相应目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cd #&lt;/strong&gt; 或 &lt;strong&gt;cd ~&lt;/strong&gt; ：回到主目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cd -&lt;/strong&gt; ： 回到上次所在目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cd !$&lt;/strong&gt; ：将上个命令的参数做为输入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cd ..&lt;/strong&gt; ：回到上层目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.zzsqwq.cn/usr/uploads/2020/08/1228769729.png&#34; alt=&#34;image-20200330164354765.png&#34;  /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>专题四:MATLAB绘图</title>
      <link>https://blog.zzsqwq.cn/posts/51/</link>
      <pubDate>Mon, 23 Mar 2020 01:14:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/51/</guid>
      <description>&lt;h2 id=&#34;41-二维曲线&#34;&gt;4.1 二维曲线&lt;/h2&gt;
&lt;h3 id=&#34;span-idjumpplot函数span&#34;&gt;&lt;span id=&#34;jump&#34;&gt;plot函数&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本用法&lt;/strong&gt;：&lt;code&gt;plot(x,y)&lt;/code&gt; ，x和y分别代表横纵坐标，plot函数会将各个点连接起来，形成线，x和y一般为长度相等的向量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最简单的调用格式&lt;/strong&gt;：&lt;code&gt;plot(x)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;当x为实向量时&lt;/strong&gt;，则以该元素下表为横坐标，元素的值为纵坐标绘制曲线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当x为复向量时&lt;/strong&gt;，则以&lt;strong&gt;实部&lt;/strong&gt;和&lt;strong&gt;虚部&lt;/strong&gt;分别为横纵坐标绘制曲线。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>专题三:MATLAB程序流程控制</title>
      <link>https://blog.zzsqwq.cn/posts/36/</link>
      <pubDate>Wed, 18 Mar 2020 01:09:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/36/</guid>
      <description>&lt;h2 id=&#34;31-顺序结构程序&#34;&gt;3.1 顺序结构程序&lt;/h2&gt;
&lt;h3 id=&#34;程序设计的基本步骤&#34;&gt;程序设计的基本步骤&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.zzsqwq.cn/usr/uploads/2020/08/2521586228.png&#34; alt=&#34;step.png&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>专题二:MATLAB矩阵处理</title>
      <link>https://blog.zzsqwq.cn/posts/34/</link>
      <pubDate>Sun, 15 Mar 2020 01:07:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/34/</guid>
      <description>&lt;h2 id=&#34;21-特殊矩阵&#34;&gt;2.1 特殊矩阵&lt;/h2&gt;
&lt;h3 id=&#34;通用的特殊矩阵&#34;&gt;通用的特殊矩阵&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;zeros函数&lt;/strong&gt;： 产生全0矩阵，即零矩阵。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ones函数&lt;/strong&gt;：  产生全1函数，即幺矩阵。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;eye函数&lt;/strong&gt;： 产生对角线为1的矩阵，当矩阵为方针时，为单位矩阵。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;rand函数&lt;/strong&gt;： 产生 &lt;strong&gt;(0,1)&lt;/strong&gt; 区间均匀分布的随机矩阵。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;fix(a+(b-a+1)*rand(x))&lt;/code&gt; 可产生[a,b]区间上均匀分布的随机整数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;randn函数&lt;/strong&gt;： n为normal的意思，产生均值为0，方差为1的标准正态分布随机矩阵。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 $\mu+\sigma x$  来得到均值为 $\mu$ ，方差为 $\sigma{^2}$ 的随机数据。&lt;strong&gt;(高中数学知识，证明可百度)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>专题一:MATLAB基础知识</title>
      <link>https://blog.zzsqwq.cn/posts/33/</link>
      <pubDate>Sat, 14 Mar 2020 01:05:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/33/</guid>
      <description>&lt;h2 id=&#34;11-matlab系统环境&#34;&gt;1.1 MATLAB系统环境&lt;/h2&gt;
&lt;h3 id=&#34;matlab操作界面的组成&#34;&gt;MATLAB操作界面的组成&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;MATLAB主窗口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令行窗口&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;命令行窗口含有 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 命令提示符，表示MATLAB处于准备状态，可以接受并执行命令，按下回车键后MATLAB会执行输入命令，并在后面显示执行结果&lt;/li&gt;
&lt;li&gt;如果指令过长可以分行输入，在一行末尾写 &lt;code&gt;...&lt;/code&gt; 并按下回车键，在下个命令行继续输入，&lt;code&gt;...&lt;/code&gt;称为续行符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当前文件夹窗口&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在MATLAB编程过程中生成的文件自动存放在当前文件夹，我们可以通过cd命令(例如我们要进入E盘下的work文件夹，可以&lt;code&gt;cd e:\work&lt;/code&gt;)或者选择文件工具栏中的文件夹来设置当前文件夹。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作区窗口&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;可用于变量的显示和操作，可显示你当前创建的变量。并且可对其保存，修改，删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>树形dp例题</title>
      <link>https://blog.zzsqwq.cn/posts/31/</link>
      <pubDate>Thu, 20 Feb 2020 01:04:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/31/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;学OI的时候就做过树形dp的题，不过那时候全在划水。看了看题解还不太懂就直接照着题解写了，现在再回来看还是不会QAQ，所以就再看看然后自己写了一遍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces#620 (Div.2)</title>
      <link>https://blog.zzsqwq.cn/posts/30/</link>
      <pubDate>Wed, 19 Feb 2020 01:02:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/30/</guid>
      <description>&lt;h2 id=&#34;a-two-rabbitshttpscodeforcescomcontest1304problema&#34;&gt;A. &lt;a href=&#34;https://codeforces.com/contest/1304/problem/A&#34;&gt;Two Rabbits&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;两个兔子分别位于 $(x,0)$ 和 $(y,0)$  ，两个人对头蹦，前者往前蹦 $a$ ，后者往前蹦 $b$ ，问两人是否能恰好相遇。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dp练习</title>
      <link>https://blog.zzsqwq.cn/posts/29/</link>
      <pubDate>Tue, 18 Feb 2020 01:00:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/29/</guid>
      <description>&lt;h2 id=&#34;a-矩阵取数游戏httpswwwluogucomcnproblemp1005&#34;&gt;A. &lt;a href=&#34;https://www.luogu.com.cn/problem/P1005&#34;&gt;矩阵取数游戏&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给定一个 $n\times m$ 的矩阵，其中每个元素为非负整数。每次你可以从每行的行首或行末取一个元素，得到的分数为当前元素的值 $a_{ij}\times 2^k$  ，$k$ 为当前是第几次取该行上的元素。 问最大得分为多少。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于STL的一些总结</title>
      <link>https://blog.zzsqwq.cn/posts/28/</link>
      <pubDate>Sun, 16 Feb 2020 00:55:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/28/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;STL之前只会用 stack 和 queue ，set 和 map 啥的也不太会用。学习一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>杂题训练</title>
      <link>https://blog.zzsqwq.cn/posts/27/</link>
      <pubDate>Sat, 15 Feb 2020 00:52:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/27/</guid>
      <description>&lt;h2 id=&#34;a-配对httpsacnowcodercomacmcontest3007a&#34;&gt;A. &lt;a href=&#34;https://ac.nowcoder.com/acm/contest/3007/A&#34;&gt;配对&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给定含有 $n$ 个正整数的集合 $A$ 和 $B$ ，你需要建立他们之间的一一映射。将配对的两个数相加可以得到 $n$ 个和，问第 $k$ 大的和最大为多少。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces#619 (Div.2)</title>
      <link>https://blog.zzsqwq.cn/posts/26/</link>
      <pubDate>Fri, 14 Feb 2020 00:51:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/26/</guid>
      <description>&lt;h2 id=&#34;a-three-stringshttpscodeforcescomcontest1301problema&#34;&gt;A. &lt;a href=&#34;https://codeforces.com/contest/1301/problem/A&#34;&gt;Three Strings&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给定三个长度为 $n$ 的字符串 $a$ , $b$ , $c$ ，遍历每个 $c$ 中每个字符 $c_i$，可以将其替换成 $a_i$ 或者 $b_i$ ，必须操作其中一个，问能否通过此操作使得字符串 $a$ , $b$ 相同。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>日常水题</title>
      <link>https://blog.zzsqwq.cn/posts/25/</link>
      <pubDate>Thu, 13 Feb 2020 00:47:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/25/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;今天又是颓废的一天，被大佬拉去跟他一起做牛客网的题，QAQ&amp;hellip;那我会点啥嘛，就只能替大佬写两道水题了···&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dp习题练习</title>
      <link>https://blog.zzsqwq.cn/posts/24/</link>
      <pubDate>Wed, 12 Feb 2020 00:45:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/24/</guid>
      <description>&lt;h2 id=&#34;a-方格取数httpswwwluogucomcnproblemp1004&#34;&gt;A. &lt;a href=&#34;https://www.luogu.com.cn/problem/P1004&#34;&gt;方格取数&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;有一个 $N*N$ 的整数方阵，每个点初始值为0，在一些点上放上数，一个人从左上角走到右下角，规定只能向下或向右走，当他经过的点上有数时会取走它，问走两遍最多能取的数的和最大为多少。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单调队列和单调栈总结</title>
      <link>https://blog.zzsqwq.cn/posts/23/</link>
      <pubDate>Tue, 11 Feb 2020 00:40:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/23/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;最近感觉遇到了好多单调队列和单调栈的问题，但是因为以前没学好，所以遇见了就一脸懵逼，然后绝对下决心来学一下。。感觉遇到啥都不会，这可咋办呐。。补不完的漏洞。
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Codeforces #618 (Div.2)</title>
      <link>https://blog.zzsqwq.cn/posts/22/</link>
      <pubDate>Mon, 10 Feb 2020 00:39:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/22/</guid>
      <description>&lt;h2 id=&#34;a-non-zerohttpscodeforcescomcontest1300problema&#34;&gt;A. &lt;a href=&#34;https://codeforces.com/contest/1300/problem/A&#34;&gt;Non-zero&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给出一段含有 $n$ 个数的序列 $a$ ，可以对其中任何数加一，问最少操作多少次让每一个数和序列和都不为0。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>背包进阶</title>
      <link>https://blog.zzsqwq.cn/posts/21/</link>
      <pubDate>Sun, 09 Feb 2020 00:38:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/21/</guid>
      <description>&lt;h3 id=&#34;1-分组背包httpswwwluogucomcnproblemp1757&#34;&gt;1. &lt;a href=&#34;https://www.luogu.com.cn/problem/P1757&#34;&gt;分组背包&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;在01背包基础上，将其中的物体分成 $k$ 组，每组内的物品相互冲突，即只能取其中一个，问最大价值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一些关于背包的题</title>
      <link>https://blog.zzsqwq.cn/posts/20/</link>
      <pubDate>Sat, 08 Feb 2020 00:33:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/20/</guid>
      <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;今天跟着背包九讲把背包再学习一下，dd_engi大佬的背包九讲Github链接: &lt;a href=&#34;https://github.com/tianyicui/pack&#34;&gt;背包九讲&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-采药01背包httpswwwluogucomcnproblemp1048&#34;&gt;1. &lt;a href=&#34;https://www.luogu.com.cn/problem/P1048&#34;&gt;采药(01背包)&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;有 $n$ 个价值为 $w_i$ ，体积为 $v_i$ 的物品，装入体积为 $V$ 的背包中，问能获得的最大为多少。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基础线性dp例题 #2</title>
      <link>https://blog.zzsqwq.cn/posts/19/</link>
      <pubDate>Fri, 07 Feb 2020 00:22:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/19/</guid>
      <description>&lt;h3 id=&#34;1-石子归并httpswww51nodcomchallengeproblemhtmlproblemid1021&#34;&gt;1. &lt;a href=&#34;https://www.51nod.com/Challenge/Problem.html#problemId=1021&#34;&gt;石子归并&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$N$ 堆石子摆成一条线。现要将石子有次序地合并成一堆。规定每次只能选相邻的2堆石子合并成新的一堆，并将新的一堆石子数记为该次合并的代价。计算将 $N$ 堆石子合并成一堆的最小代价。
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;思路&#34;&gt;思路&lt;/h4&gt;
&lt;p&gt;很经典的区间dp例题，我们可以用 $dp[i][j]$ 来表示合并 $i\sim j$ 所需的最小代价，通过枚举中间的断点，来通过方程 $dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+cost[i][j])$  ，其中 $cost[i][j]$ 表示从 $i\sim j$ 的石子总数，通过前缀和很容易计算。在进行状态转移时需要前面状态已知，因为是枚举中间断点，所以断开区间的长度一定要小于原区间，因此在转移之前需要确保比他短的区间都已经达到了最小代价，因此我们可以通过枚举区间长度从 $2\sim N$ 来实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基础线性dp例题</title>
      <link>https://blog.zzsqwq.cn/posts/18/</link>
      <pubDate>Thu, 06 Feb 2020 00:09:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/18/</guid>
      <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;某位大佬曾经说过，dp不会没问题，想不到状态转移方程没问题，多做题就会了。所以，我打算多刷点dp题。那么，先从基础刷起吧。&lt;/p&gt;
&lt;h3 id=&#34;1-p1091-合唱队形httpswwwluogucomcnproblemp1091&#34;&gt;1. &lt;a href=&#34;https://www.luogu.com.cn/problem/P1091&#34;&gt;P1091 合唱队形&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;已知序列 $a$ 有 $n$ 个数，通过取出其中一些数可以使他满足严格的先增再减序列，问最少取出几个。&lt;/p&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>Codeforces#617(Div.3)</title>
      <link>https://blog.zzsqwq.cn/posts/17/</link>
      <pubDate>Wed, 05 Feb 2020 23:18:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/17/</guid>
      <description>&lt;h3 id=&#34;a-array-with-odd-sumhttpscodeforcescomcontest1296problema&#34;&gt;A. &lt;a href=&#34;https://codeforces.com/contest/1296/problem/A&#34;&gt;Array with Odd Sum&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出包含 &lt;strong&gt;n&lt;/strong&gt; 个正整数的序列 &lt;strong&gt;a&lt;/strong&gt; ，你可以把任何一个元素 $a_i$ ，赋值给另一个元素 $a_j$ ($i\neq j$) ，问通过任意此操作能否将序列 &lt;strong&gt;a&lt;/strong&gt; 的和变为奇数。可以输出 &lt;strong&gt;YES&lt;/strong&gt; ,不可以输入 &lt;strong&gt;NO&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;思路&#34;&gt;思路&lt;/h4&gt;
&lt;p&gt;首先当起始和为奇数的时候，就直接可输出 &lt;strong&gt;YES&lt;/strong&gt; 了，如果是偶数的话，我们可以发现，如果序列元素中同时包含奇数和偶数，那么就是可以的，否则不可以。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>洛谷的一些搜索题</title>
      <link>https://blog.zzsqwq.cn/posts/16/</link>
      <pubDate>Tue, 04 Feb 2020 23:02:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/16/</guid>
      <description>&lt;h3 id=&#34;1-p1378-油滴扩展httpswwwluogucomcnproblemp1378&#34;&gt;1. &lt;a href=&#34;https://www.luogu.com.cn/problem/P1378&#34;&gt;P1378 油滴扩展&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;在长方形框中，最多有 n ($0\le{n}\le6$)个相异点，在框中点上依次放置可扩展的油滴，当碰到其他油滴边界或者长方形边框时会停止，扩展呈圆形展开。放置下一个时会确保上一个已经扩展完成。问通过变换放置顺序可使得最终框中剩下的面积最小为多少。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LaTeX的一些总结</title>
      <link>https://blog.zzsqwq.cn/posts/10/</link>
      <pubDate>Tue, 04 Feb 2020 22:47:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/10/</guid>
      <description>&lt;h3 id=&#34;希腊字母表&#34;&gt;希腊字母表&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.zzsqwq.cn/usr/uploads/2020/08/248320705.png&#34; alt=&#34;xila.png&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeforcesER #81</title>
      <link>https://blog.zzsqwq.cn/posts/8/</link>
      <pubDate>Sun, 02 Feb 2020 21:53:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/posts/8/</guid>
      <description>&lt;h3 id=&#34;a--display-the-numberhttpscodeforcescomcontest1295problema&#34;&gt;A : &lt;a href=&#34;https://codeforces.com/contest/1295/problem/A&#34;&gt;Display The Number&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;用一定数目的灯管，显示尽可能大的数&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://s2.ax1x.com/2020/02/02/1te6Re.md.png&#34; alt=&#34;A&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.zzsqwq.cn/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/about/</guid>
      <description>About Me Welcome to Zs&amp;rsquo;s blog !
Now an graduate of Northwestern Polytechnical University.
I&amp;rsquo;m interested in computer vision and robotics, etc.
Welcome to know more about me through my homepage.
About Blog Blog is powered by Hugo.
The theme used is hugo-PaperMod, my fork version is here.</description>
    </item>
    
    
    <item>
      <title>Contact Me</title>
      <link>https://blog.zzsqwq.cn/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/contact/</guid>
      <description>Github：@zzsqwq
E-mail: trizsqwq@gmail.com
Telegram: @zzsqwq</description>
    </item>
    
    <item>
      <title>Friends</title>
      <link>https://blog.zzsqwq.cn/friends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zzsqwq.cn/friends/</guid>
      <description>To request a link, please make sure your blog has https enabled.
HuaDeity https://www.huadeity.com
70loKirin https://qllokirin.github.io
MurphyHou https://cosmicdusty.cc
Orangii https://orangii.cn
Kircute https://kircute.jimmytoluene.com
Bowen https://www.tomcatdeng.cn
pg999w https://blog.pg999w.top
Sun&amp;rsquo;s Blog https://iaesun.com
Ljcheng https://ljcheng.cc
Kehan https://blog.kehan.xyz
immortalqx https://immortalqx.github.io
Zhang Jiale https://zjlzjl.com
Zaihua https://www.zaihua.net</description>
    </item>
    
    
  </channel>
</rss>
